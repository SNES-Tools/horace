mode PatternMatchingTest {
  types {
    MaybeByte {
      Just(bits[8]),
      Nothing
    }
    Bool {
      True,
      False
    }
    Compound {
      Pair(MaybeByte, Bool)
    }
  }
  state {
    x: MaybeByte = Just(200)
    b: Bool = True
  }
  main {
    x <- match x with {
      Just(y) -> if y = 255 then
                   Nothing
                 else
                   Just(y + extend[8](1))
      Nothing -> Nothing
    }
    b <- boolNot(b)
    Pair(x, b)
  }
  functions {
    boolNot(q: Bool): Bool {
      match q with {
        True  -> False
        False -> True
      }
    }
  }
}
