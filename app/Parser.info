-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> expr                               (0)
	expr -> int                                        (1)
	expr -> '{' vars exprs '}'                         (2)
	expr -> if pred then expr else expr                (3)
	expr -> for id '=' expr to expr do expr            (4)
	expr -> lval '<-' expr                             (5)
	expr -> idc args ')'                               (6)
	expr -> id '.' idc args ')'                        (7)
	expr -> match expr with '{' cases '}'              (8)
	expr -> trans '[' int ',' int ']' '(' expr ')'     (9)
	expr -> ext '[' int ']' '(' expr ')'               (10)
	expr -> sext '[' int ']' '(' expr ')'              (11)
	expr -> shrink '[' int ']' '(' expr ')'            (12)
	expr -> expr '+' expr                              (13)
	expr -> expr '-' expr                              (14)
	expr -> expr '&' expr                              (15)
	expr -> expr '^' expr                              (16)
	expr -> expr '|' expr                              (17)
	expr -> id                                         (18)
	expr -> '(' expr ')'                               (19)
	expr -> void                                       (20)
	lval -> id                                         (21)
	lval -> id '[' expr ']'                            (22)
	exprs ->                                           (23)
	exprs -> expr exprs                                (24)
	vars ->                                            (25)
	vars -> var_decl vars                              (26)
	var_decl -> var id ':' type_reg '=' expr           (27)
	args ->                                            (28)
	args -> expr                                       (29)
	args -> expr ',' args                              (30)
	cases ->                                           (31)
	cases -> case cases                                (32)
	case -> pat '->' expr                              (33)
	pat -> '_'                                         (34)
	pat -> int                                         (35)
	pat -> id                                          (36)
	pat -> id '(' pats ')'                             (37)
	pats ->                                            (38)
	pats -> pat ',' pats                               (39)
	pred -> true                                       (40)
	pred -> false                                      (41)
	pred -> not pred                                   (42)
	pred -> pred and pred                              (43)
	pred -> pred or pred                               (44)
	pred -> expr comp expr                             (45)
	comp -> '='                                        (46)
	comp -> '/='                                       (47)
	comp -> '<'                                        (48)
	comp -> '>'                                        (49)
	comp -> '<='                                       (50)
	comp -> '>='                                       (51)
	comp -> '<$'                                       (52)
	comp -> '>$'                                       (53)
	comp -> '<=$'                                      (54)
	comp -> '>=$'                                      (55)
	type_reg -> bits '[' int ']'                       (56)
	type_reg -> range '[' int ',' int ']'              (57)
	type_reg -> data id                                (58)
	type_reg -> void                                   (59)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	data           { TokenData }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'&'            { TokenAmphersand }
	'|'            { TokenPipe }
	'^'            { TokenCaret }
	'='            { TokenEq }
	'/='           { TokenNeq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	lval            rules 21, 22
	exprs           rules 23, 24
	vars            rules 25, 26
	var_decl        rule  27
	args            rules 28, 29, 30
	cases           rules 31, 32
	case            rule  33
	pat             rules 34, 35, 36, 37
	pats            rules 38, 39
	pred            rules 40, 41, 42, 43, 44, 45
	comp            rules 46, 47, 48, 49, 50, 51, 52, 53, 54, 55
	type_reg        rules 56, 57, 58, 59

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . expr                              (rule 0)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 3
	lval           goto state 4

State 1

	expr -> . int                                       (rule 1)

	int            shift, and enter state 2


State 2

	expr -> int .                                       (rule 1)

	int            reduce using rule 1
	id             reduce using rule 1
	idc            reduce using rule 1
	var            reduce using rule 1
	void           reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	for            reduce using rule 1
	to             reduce using rule 1
	do             reduce using rule 1
	match          reduce using rule 1
	with           reduce using rule 1
	and            reduce using rule 1
	or             reduce using rule 1
	trans          reduce using rule 1
	shrink         reduce using rule 1
	ext            reduce using rule 1
	sext           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'&'            reduce using rule 1
	'|'            reduce using rule 1
	'^'            reduce using rule 1
	'='            reduce using rule 1
	'/='           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	'_'            reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'<$'           reduce using rule 1
	'<=$'          reduce using rule 1
	'>$'           reduce using rule 1
	'>=$'          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parse -> expr .                              (rule 0)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	%eof           accept


State 4

	expr -> lval . '<-' expr                            (rule 5)

	'<-'           shift, and enter state 36


State 5

	expr -> id . '.' idc args ')'                       (rule 7)
	expr -> id .                                        (rule 18)
	lval -> id .                                        (rule 21)
	lval -> id . '[' expr ']'                           (rule 22)

	int            reduce using rule 18
	id             reduce using rule 18
	idc            reduce using rule 18
	var            reduce using rule 18
	void           reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	for            reduce using rule 18
	to             reduce using rule 18
	do             reduce using rule 18
	match          reduce using rule 18
	with           reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	trans          reduce using rule 18
	shrink         reduce using rule 18
	ext            reduce using rule 18
	sext           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'^'            reduce using rule 18
	'='            reduce using rule 18
	'/='           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'['            shift, and enter state 34
	']'            reduce using rule 18
	','            reduce using rule 18
	'.'            shift, and enter state 35
	'_'            reduce using rule 18
	'<-'           reduce using rule 21
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'<='           reduce using rule 18
	'>='           reduce using rule 18
	'<$'           reduce using rule 18
	'<=$'          reduce using rule 18
	'>$'           reduce using rule 18
	'>=$'          reduce using rule 18
	%eof           reduce using rule 18


State 6

	expr -> idc . args ')'                              (rule 6)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 28
	'{'            shift, and enter state 16

	expr           goto state 32
	lval           goto state 4
	args           goto state 33

State 7

	expr -> void .                                      (rule 20)

	int            reduce using rule 20
	id             reduce using rule 20
	idc            reduce using rule 20
	var            reduce using rule 20
	void           reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	for            reduce using rule 20
	to             reduce using rule 20
	do             reduce using rule 20
	match          reduce using rule 20
	with           reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	trans          reduce using rule 20
	shrink         reduce using rule 20
	ext            reduce using rule 20
	sext           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'&'            reduce using rule 20
	'|'            reduce using rule 20
	'^'            reduce using rule 20
	'='            reduce using rule 20
	'/='           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	'_'            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'<$'           reduce using rule 20
	'<=$'          reduce using rule 20
	'>$'           reduce using rule 20
	'>=$'          reduce using rule 20
	%eof           reduce using rule 20


State 8

	expr -> if . pred then expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	true           shift, and enter state 29
	false          shift, and enter state 30
	not            shift, and enter state 31
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 27
	lval           goto state 4
	pred           goto state 28

State 9

	expr -> for . id '=' expr to expr do expr           (rule 4)

	id             shift, and enter state 26


State 10

	expr -> match . expr with '{' cases '}'             (rule 8)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 25
	lval           goto state 4

State 11

	expr -> trans . '[' int ',' int ']' '(' expr ')'    (rule 9)

	'['            shift, and enter state 24


State 12

	expr -> shrink . '[' int ']' '(' expr ')'           (rule 12)

	'['            shift, and enter state 23


State 13

	expr -> ext . '[' int ']' '(' expr ')'              (rule 10)

	'['            shift, and enter state 22


State 14

	expr -> sext . '[' int ']' '(' expr ')'             (rule 11)

	'['            shift, and enter state 21


State 15

	expr -> '(' . expr ')'                              (rule 19)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 20
	lval           goto state 4

State 16

	expr -> '{' . vars exprs '}'                        (rule 2)

	int            reduce using rule 25
	id             reduce using rule 25
	idc            reduce using rule 25
	var            shift, and enter state 19
	void           reduce using rule 25
	if             reduce using rule 25
	for            reduce using rule 25
	match          reduce using rule 25
	trans          reduce using rule 25
	shrink         reduce using rule 25
	ext            reduce using rule 25
	sext           reduce using rule 25
	'('            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25

	vars           goto state 17
	var_decl       goto state 18

State 17

	expr -> '{' vars . exprs '}'                        (rule 2)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16
	'}'            reduce using rule 23

	expr           goto state 76
	lval           goto state 4
	exprs          goto state 77

State 18

	vars -> var_decl . vars                             (rule 26)

	int            reduce using rule 25
	id             reduce using rule 25
	idc            reduce using rule 25
	var            shift, and enter state 19
	void           reduce using rule 25
	if             reduce using rule 25
	for            reduce using rule 25
	match          reduce using rule 25
	trans          reduce using rule 25
	shrink         reduce using rule 25
	ext            reduce using rule 25
	sext           reduce using rule 25
	'('            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25

	vars           goto state 75
	var_decl       goto state 18

State 19

	var_decl -> var . id ':' type_reg '=' expr          (rule 27)

	id             shift, and enter state 74


State 20

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	expr -> '(' expr . ')'                              (rule 19)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            shift, and enter state 73


State 21

	expr -> sext '[' . int ']' '(' expr ')'             (rule 11)

	int            shift, and enter state 72


State 22

	expr -> ext '[' . int ']' '(' expr ')'              (rule 10)

	int            shift, and enter state 71


State 23

	expr -> shrink '[' . int ']' '(' expr ')'           (rule 12)

	int            shift, and enter state 70


State 24

	expr -> trans '[' . int ',' int ']' '(' expr ')'    (rule 9)

	int            shift, and enter state 69


State 25

	expr -> match expr . with '{' cases '}'             (rule 8)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	with           shift, and enter state 68
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41


State 26

	expr -> for id . '=' expr to expr do expr           (rule 4)

	'='            shift, and enter state 67


State 27

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	pred -> expr . comp expr                            (rule 45)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            shift, and enter state 57
	'/='           shift, and enter state 58
	'<'            shift, and enter state 59
	'>'            shift, and enter state 60
	'<='           shift, and enter state 61
	'>='           shift, and enter state 62
	'<$'           shift, and enter state 63
	'<=$'          shift, and enter state 64
	'>$'           shift, and enter state 65
	'>=$'          shift, and enter state 66

	comp           goto state 56

State 28

	expr -> if pred . then expr else expr               (rule 3)
	pred -> pred . and pred                             (rule 43)
	pred -> pred . or pred                              (rule 44)

	then           shift, and enter state 53
	and            shift, and enter state 54
	or             shift, and enter state 55


State 29

	pred -> true .                                      (rule 40)

	then           reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40


State 30

	pred -> false .                                     (rule 41)

	then           reduce using rule 41
	and            reduce using rule 41
	or             reduce using rule 41


State 31

	pred -> not . pred                                  (rule 42)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	true           shift, and enter state 29
	false          shift, and enter state 30
	not            shift, and enter state 31
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 27
	lval           goto state 4
	pred           goto state 52

State 32

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	args -> expr .                                      (rule 29)
	args -> expr . ',' args                             (rule 30)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            reduce using rule 29
	','            shift, and enter state 51


State 33

	expr -> idc args . ')'                              (rule 6)

	')'            shift, and enter state 50


State 34

	lval -> id '[' . expr ']'                           (rule 22)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 49
	lval           goto state 4

State 35

	expr -> id '.' . idc args ')'                       (rule 7)

	idc            shift, and enter state 48


State 36

	expr -> lval '<-' . expr                            (rule 5)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 47
	lval           goto state 4

State 37

	expr -> expr '+' . expr                             (rule 13)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 46
	lval           goto state 4

State 38

	expr -> expr '-' . expr                             (rule 14)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 45
	lval           goto state 4

State 39

	expr -> expr '&' . expr                             (rule 15)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 44
	lval           goto state 4

State 40

	expr -> expr '|' . expr                             (rule 17)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 43
	lval           goto state 4

State 41

	expr -> expr '^' . expr                             (rule 16)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 42
	lval           goto state 4

State 42

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr '^' expr .                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 16
	id             reduce using rule 16
	idc            reduce using rule 16
	var            reduce using rule 16
	void           reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	to             reduce using rule 16
	do             reduce using rule 16
	match          reduce using rule 16
	with           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	trans          reduce using rule 16
	shrink         reduce using rule 16
	ext            reduce using rule 16
	sext           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'&'            reduce using rule 16
	'|'            shift, and enter state 40
	'^'            reduce using rule 16
	'='            reduce using rule 16
	'/='           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<$'           reduce using rule 16
	'<=$'          reduce using rule 16
	'>$'           reduce using rule 16
	'>=$'          reduce using rule 16
	%eof           reduce using rule 16


State 43

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	expr -> expr '|' expr .                             (rule 17)

	int            reduce using rule 17
	id             reduce using rule 17
	idc            reduce using rule 17
	var            reduce using rule 17
	void           reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	for            reduce using rule 17
	to             reduce using rule 17
	do             reduce using rule 17
	match          reduce using rule 17
	with           reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	trans          reduce using rule 17
	shrink         reduce using rule 17
	ext            reduce using rule 17
	sext           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	'^'            reduce using rule 17
	'='            reduce using rule 17
	'/='           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	'_'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'<$'           reduce using rule 17
	'<=$'          reduce using rule 17
	'>$'           reduce using rule 17
	'>=$'          reduce using rule 17
	%eof           reduce using rule 17


State 44

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr '&' expr .                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 15
	id             reduce using rule 15
	idc            reduce using rule 15
	var            reduce using rule 15
	void           reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	for            reduce using rule 15
	to             reduce using rule 15
	do             reduce using rule 15
	match          reduce using rule 15
	with           reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	trans          reduce using rule 15
	shrink         reduce using rule 15
	ext            reduce using rule 15
	sext           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'&'            reduce using rule 15
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            reduce using rule 15
	'/='           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	'_'            reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<$'           reduce using rule 15
	'<=$'          reduce using rule 15
	'>$'           reduce using rule 15
	'>=$'          reduce using rule 15
	%eof           reduce using rule 15


State 45

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr '-' expr .                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 14
	id             reduce using rule 14
	idc            reduce using rule 14
	var            reduce using rule 14
	void           reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	for            reduce using rule 14
	to             reduce using rule 14
	do             reduce using rule 14
	match          reduce using rule 14
	with           reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	trans          reduce using rule 14
	shrink         reduce using rule 14
	ext            reduce using rule 14
	sext           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            reduce using rule 14
	'/='           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	'_'            reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<$'           reduce using rule 14
	'<=$'          reduce using rule 14
	'>$'           reduce using rule 14
	'>=$'          reduce using rule 14
	%eof           reduce using rule 14


State 46

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr '+' expr .                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 13
	id             reduce using rule 13
	idc            reduce using rule 13
	var            reduce using rule 13
	void           reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	for            reduce using rule 13
	to             reduce using rule 13
	do             reduce using rule 13
	match          reduce using rule 13
	with           reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	trans          reduce using rule 13
	shrink         reduce using rule 13
	ext            reduce using rule 13
	sext           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            reduce using rule 13
	'/='           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	'_'            reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<$'           reduce using rule 13
	'<=$'          reduce using rule 13
	'>$'           reduce using rule 13
	'>=$'          reduce using rule 13
	%eof           reduce using rule 13


State 47

	expr -> lval '<-' expr .                            (rule 5)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 5
	id             reduce using rule 5
	idc            reduce using rule 5
	var            reduce using rule 5
	void           reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	for            reduce using rule 5
	to             reduce using rule 5
	do             reduce using rule 5
	match          reduce using rule 5
	with           reduce using rule 5
	and            reduce using rule 5
	or             reduce using rule 5
	trans          reduce using rule 5
	shrink         reduce using rule 5
	ext            reduce using rule 5
	sext           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	'^'            reduce using rule 5
	'='            reduce using rule 5
	'/='           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	'_'            reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	'<='           reduce using rule 5
	'>='           reduce using rule 5
	'<$'           reduce using rule 5
	'<=$'          reduce using rule 5
	'>$'           reduce using rule 5
	'>=$'          reduce using rule 5
	%eof           reduce using rule 5


State 48

	expr -> id '.' idc . args ')'                       (rule 7)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 28
	'{'            shift, and enter state 16

	expr           goto state 32
	lval           goto state 4
	args           goto state 93

State 49

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	lval -> id '[' expr . ']'                           (rule 22)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	']'            shift, and enter state 92


State 50

	expr -> idc args ')' .                              (rule 6)

	int            reduce using rule 6
	id             reduce using rule 6
	idc            reduce using rule 6
	var            reduce using rule 6
	void           reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	for            reduce using rule 6
	to             reduce using rule 6
	do             reduce using rule 6
	match          reduce using rule 6
	with           reduce using rule 6
	and            reduce using rule 6
	or             reduce using rule 6
	trans          reduce using rule 6
	shrink         reduce using rule 6
	ext            reduce using rule 6
	sext           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'&'            reduce using rule 6
	'|'            reduce using rule 6
	'^'            reduce using rule 6
	'='            reduce using rule 6
	'/='           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	'_'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'<$'           reduce using rule 6
	'<=$'          reduce using rule 6
	'>$'           reduce using rule 6
	'>=$'          reduce using rule 6
	%eof           reduce using rule 6


State 51

	args -> expr ',' . args                             (rule 30)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 28
	'{'            shift, and enter state 16

	expr           goto state 32
	lval           goto state 4
	args           goto state 91

State 52

	pred -> not pred .                                  (rule 42)
	pred -> pred . and pred                             (rule 43)
	pred -> pred . or pred                              (rule 44)

	then           reduce using rule 42
	and            shift, and enter state 54
	or             shift, and enter state 55


State 53

	expr -> if pred then . expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 90
	lval           goto state 4

State 54

	pred -> pred and . pred                             (rule 43)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	true           shift, and enter state 29
	false          shift, and enter state 30
	not            shift, and enter state 31
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 27
	lval           goto state 4
	pred           goto state 89

State 55

	pred -> pred or . pred                              (rule 44)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	true           shift, and enter state 29
	false          shift, and enter state 30
	not            shift, and enter state 31
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 27
	lval           goto state 4
	pred           goto state 88

State 56

	pred -> expr comp . expr                            (rule 45)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 87
	lval           goto state 4

State 57

	comp -> '=' .                                       (rule 46)

	int            reduce using rule 46
	id             reduce using rule 46
	idc            reduce using rule 46
	void           reduce using rule 46
	if             reduce using rule 46
	for            reduce using rule 46
	match          reduce using rule 46
	trans          reduce using rule 46
	shrink         reduce using rule 46
	ext            reduce using rule 46
	sext           reduce using rule 46
	'('            reduce using rule 46
	'{'            reduce using rule 46


State 58

	comp -> '/=' .                                      (rule 47)

	int            reduce using rule 47
	id             reduce using rule 47
	idc            reduce using rule 47
	void           reduce using rule 47
	if             reduce using rule 47
	for            reduce using rule 47
	match          reduce using rule 47
	trans          reduce using rule 47
	shrink         reduce using rule 47
	ext            reduce using rule 47
	sext           reduce using rule 47
	'('            reduce using rule 47
	'{'            reduce using rule 47


State 59

	comp -> '<' .                                       (rule 48)

	int            reduce using rule 48
	id             reduce using rule 48
	idc            reduce using rule 48
	void           reduce using rule 48
	if             reduce using rule 48
	for            reduce using rule 48
	match          reduce using rule 48
	trans          reduce using rule 48
	shrink         reduce using rule 48
	ext            reduce using rule 48
	sext           reduce using rule 48
	'('            reduce using rule 48
	'{'            reduce using rule 48


State 60

	comp -> '>' .                                       (rule 49)

	int            reduce using rule 49
	id             reduce using rule 49
	idc            reduce using rule 49
	void           reduce using rule 49
	if             reduce using rule 49
	for            reduce using rule 49
	match          reduce using rule 49
	trans          reduce using rule 49
	shrink         reduce using rule 49
	ext            reduce using rule 49
	sext           reduce using rule 49
	'('            reduce using rule 49
	'{'            reduce using rule 49


State 61

	comp -> '<=' .                                      (rule 50)

	int            reduce using rule 50
	id             reduce using rule 50
	idc            reduce using rule 50
	void           reduce using rule 50
	if             reduce using rule 50
	for            reduce using rule 50
	match          reduce using rule 50
	trans          reduce using rule 50
	shrink         reduce using rule 50
	ext            reduce using rule 50
	sext           reduce using rule 50
	'('            reduce using rule 50
	'{'            reduce using rule 50


State 62

	comp -> '>=' .                                      (rule 51)

	int            reduce using rule 51
	id             reduce using rule 51
	idc            reduce using rule 51
	void           reduce using rule 51
	if             reduce using rule 51
	for            reduce using rule 51
	match          reduce using rule 51
	trans          reduce using rule 51
	shrink         reduce using rule 51
	ext            reduce using rule 51
	sext           reduce using rule 51
	'('            reduce using rule 51
	'{'            reduce using rule 51


State 63

	comp -> '<$' .                                      (rule 52)

	int            reduce using rule 52
	id             reduce using rule 52
	idc            reduce using rule 52
	void           reduce using rule 52
	if             reduce using rule 52
	for            reduce using rule 52
	match          reduce using rule 52
	trans          reduce using rule 52
	shrink         reduce using rule 52
	ext            reduce using rule 52
	sext           reduce using rule 52
	'('            reduce using rule 52
	'{'            reduce using rule 52


State 64

	comp -> '<=$' .                                     (rule 54)

	int            reduce using rule 54
	id             reduce using rule 54
	idc            reduce using rule 54
	void           reduce using rule 54
	if             reduce using rule 54
	for            reduce using rule 54
	match          reduce using rule 54
	trans          reduce using rule 54
	shrink         reduce using rule 54
	ext            reduce using rule 54
	sext           reduce using rule 54
	'('            reduce using rule 54
	'{'            reduce using rule 54


State 65

	comp -> '>$' .                                      (rule 53)

	int            reduce using rule 53
	id             reduce using rule 53
	idc            reduce using rule 53
	void           reduce using rule 53
	if             reduce using rule 53
	for            reduce using rule 53
	match          reduce using rule 53
	trans          reduce using rule 53
	shrink         reduce using rule 53
	ext            reduce using rule 53
	sext           reduce using rule 53
	'('            reduce using rule 53
	'{'            reduce using rule 53


State 66

	comp -> '>=$' .                                     (rule 55)

	int            reduce using rule 55
	id             reduce using rule 55
	idc            reduce using rule 55
	void           reduce using rule 55
	if             reduce using rule 55
	for            reduce using rule 55
	match          reduce using rule 55
	trans          reduce using rule 55
	shrink         reduce using rule 55
	ext            reduce using rule 55
	sext           reduce using rule 55
	'('            reduce using rule 55
	'{'            reduce using rule 55


State 67

	expr -> for id '=' . expr to expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 86
	lval           goto state 4

State 68

	expr -> match expr with . '{' cases '}'             (rule 8)

	'{'            shift, and enter state 85


State 69

	expr -> trans '[' int . ',' int ']' '(' expr ')'    (rule 9)

	','            shift, and enter state 84


State 70

	expr -> shrink '[' int . ']' '(' expr ')'           (rule 12)

	']'            shift, and enter state 83


State 71

	expr -> ext '[' int . ']' '(' expr ')'              (rule 10)

	']'            shift, and enter state 82


State 72

	expr -> sext '[' int . ']' '(' expr ')'             (rule 11)

	']'            shift, and enter state 81


State 73

	expr -> '(' expr ')' .                              (rule 19)

	int            reduce using rule 19
	id             reduce using rule 19
	idc            reduce using rule 19
	var            reduce using rule 19
	void           reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	for            reduce using rule 19
	to             reduce using rule 19
	do             reduce using rule 19
	match          reduce using rule 19
	with           reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	trans          reduce using rule 19
	shrink         reduce using rule 19
	ext            reduce using rule 19
	sext           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	'^'            reduce using rule 19
	'='            reduce using rule 19
	'/='           reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	'_'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'<$'           reduce using rule 19
	'<=$'          reduce using rule 19
	'>$'           reduce using rule 19
	'>=$'          reduce using rule 19
	%eof           reduce using rule 19


State 74

	var_decl -> var id . ':' type_reg '=' expr          (rule 27)

	':'            shift, and enter state 80


State 75

	vars -> var_decl vars .                             (rule 26)

	int            reduce using rule 26
	id             reduce using rule 26
	idc            reduce using rule 26
	void           reduce using rule 26
	if             reduce using rule 26
	for            reduce using rule 26
	match          reduce using rule 26
	trans          reduce using rule 26
	shrink         reduce using rule 26
	ext            reduce using rule 26
	sext           reduce using rule 26
	'('            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26


State 76

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	exprs -> expr . exprs                               (rule 24)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'('            shift, and enter state 15
	'{'            shift, and enter state 16
	'}'            reduce using rule 23

	expr           goto state 76
	lval           goto state 4
	exprs          goto state 79

State 77

	expr -> '{' vars exprs . '}'                        (rule 2)

	'}'            shift, and enter state 78


State 78

	expr -> '{' vars exprs '}' .                        (rule 2)

	int            reduce using rule 2
	id             reduce using rule 2
	idc            reduce using rule 2
	var            reduce using rule 2
	void           reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	for            reduce using rule 2
	to             reduce using rule 2
	do             reduce using rule 2
	match          reduce using rule 2
	with           reduce using rule 2
	and            reduce using rule 2
	or             reduce using rule 2
	trans          reduce using rule 2
	shrink         reduce using rule 2
	ext            reduce using rule 2
	sext           reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'&'            reduce using rule 2
	'|'            reduce using rule 2
	'^'            reduce using rule 2
	'='            reduce using rule 2
	'/='           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	'_'            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'<$'           reduce using rule 2
	'<=$'          reduce using rule 2
	'>$'           reduce using rule 2
	'>=$'          reduce using rule 2
	%eof           reduce using rule 2


State 79

	exprs -> expr exprs .                               (rule 24)

	'}'            reduce using rule 24


State 80

	var_decl -> var id ':' . type_reg '=' expr          (rule 27)

	bits           shift, and enter state 108
	range          shift, and enter state 109
	data           shift, and enter state 110
	void           shift, and enter state 111

	type_reg       goto state 107

State 81

	expr -> sext '[' int ']' . '(' expr ')'             (rule 11)

	'('            shift, and enter state 106


State 82

	expr -> ext '[' int ']' . '(' expr ')'              (rule 10)

	'('            shift, and enter state 105


State 83

	expr -> shrink '[' int ']' . '(' expr ')'           (rule 12)

	'('            shift, and enter state 104


State 84

	expr -> trans '[' int ',' . int ']' '(' expr ')'    (rule 9)

	int            shift, and enter state 103


State 85

	expr -> match expr with '{' . cases '}'             (rule 8)

	int            shift, and enter state 100
	id             shift, and enter state 101
	'}'            reduce using rule 31
	'_'            shift, and enter state 102

	cases          goto state 97
	case           goto state 98
	pat            goto state 99

State 86

	expr -> for id '=' expr . to expr do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	to             shift, and enter state 96
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41


State 87

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	pred -> expr comp expr .                            (rule 45)

	then           reduce using rule 45
	and            reduce using rule 45
	or             reduce using rule 45
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41


State 88

	pred -> pred . and pred                             (rule 43)
	pred -> pred . or pred                              (rule 44)
	pred -> pred or pred .                              (rule 44)

	then           reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44


State 89

	pred -> pred . and pred                             (rule 43)
	pred -> pred and pred .                             (rule 43)
	pred -> pred . or pred                              (rule 44)

	then           reduce using rule 43
	and            reduce using rule 43
	or             shift, and enter state 55


State 90

	expr -> if pred then expr . else expr               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	else           shift, and enter state 95
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41


State 91

	args -> expr ',' args .                             (rule 30)

	')'            reduce using rule 30


State 92

	lval -> id '[' expr ']' .                           (rule 22)

	'<-'           reduce using rule 22


State 93

	expr -> id '.' idc args . ')'                       (rule 7)

	')'            shift, and enter state 94


State 94

	expr -> id '.' idc args ')' .                       (rule 7)

	int            reduce using rule 7
	id             reduce using rule 7
	idc            reduce using rule 7
	var            reduce using rule 7
	void           reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	for            reduce using rule 7
	to             reduce using rule 7
	do             reduce using rule 7
	match          reduce using rule 7
	with           reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	trans          reduce using rule 7
	shrink         reduce using rule 7
	ext            reduce using rule 7
	sext           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'^'            reduce using rule 7
	'='            reduce using rule 7
	'/='           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	'_'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'<$'           reduce using rule 7
	'<=$'          reduce using rule 7
	'>$'           reduce using rule 7
	'>=$'          reduce using rule 7
	%eof           reduce using rule 7


State 95

	expr -> if pred then expr else . expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 125
	lval           goto state 4

State 96

	expr -> for id '=' expr to . expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 124
	lval           goto state 4

State 97

	expr -> match expr with '{' cases . '}'             (rule 8)

	'}'            shift, and enter state 123


State 98

	cases -> case . cases                               (rule 32)

	int            shift, and enter state 100
	id             shift, and enter state 101
	'}'            reduce using rule 31
	'_'            shift, and enter state 102

	cases          goto state 122
	case           goto state 98
	pat            goto state 99

State 99

	case -> pat . '->' expr                             (rule 33)

	'->'           shift, and enter state 121


State 100

	pat -> int .                                        (rule 35)

	','            reduce using rule 35
	'->'           reduce using rule 35


State 101

	pat -> id .                                         (rule 36)
	pat -> id . '(' pats ')'                            (rule 37)

	'('            shift, and enter state 120
	','            reduce using rule 36
	'->'           reduce using rule 36


State 102

	pat -> '_' .                                        (rule 34)

	','            reduce using rule 34
	'->'           reduce using rule 34


State 103

	expr -> trans '[' int ',' int . ']' '(' expr ')'    (rule 9)

	']'            shift, and enter state 119


State 104

	expr -> shrink '[' int ']' '(' . expr ')'           (rule 12)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 118
	lval           goto state 4

State 105

	expr -> ext '[' int ']' '(' . expr ')'              (rule 10)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 117
	lval           goto state 4

State 106

	expr -> sext '[' int ']' '(' . expr ')'             (rule 11)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 116
	lval           goto state 4

State 107

	var_decl -> var id ':' type_reg . '=' expr          (rule 27)

	'='            shift, and enter state 115


State 108

	type_reg -> bits . '[' int ']'                      (rule 56)

	'['            shift, and enter state 114


State 109

	type_reg -> range . '[' int ',' int ']'             (rule 57)

	'['            shift, and enter state 113


State 110

	type_reg -> data . id                               (rule 58)

	id             shift, and enter state 112


State 111

	type_reg -> void .                                  (rule 59)

	'='            reduce using rule 59


State 112

	type_reg -> data id .                               (rule 58)

	'='            reduce using rule 58


State 113

	type_reg -> range '[' . int ',' int ']'             (rule 57)

	int            shift, and enter state 136


State 114

	type_reg -> bits '[' . int ']'                      (rule 56)

	int            shift, and enter state 135


State 115

	var_decl -> var id ':' type_reg '=' . expr          (rule 27)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 134
	lval           goto state 4

State 116

	expr -> sext '[' int ']' '(' expr . ')'             (rule 11)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            shift, and enter state 133


State 117

	expr -> ext '[' int ']' '(' expr . ')'              (rule 10)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            shift, and enter state 132


State 118

	expr -> shrink '[' int ']' '(' expr . ')'           (rule 12)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            shift, and enter state 131


State 119

	expr -> trans '[' int ',' int ']' . '(' expr ')'    (rule 9)

	'('            shift, and enter state 130


State 120

	pat -> id '(' . pats ')'                            (rule 37)

	int            shift, and enter state 100
	id             shift, and enter state 101
	')'            reduce using rule 38
	'_'            shift, and enter state 102

	pat            goto state 128
	pats           goto state 129

State 121

	case -> pat '->' . expr                             (rule 33)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 127
	lval           goto state 4

State 122

	cases -> case cases .                               (rule 32)

	'}'            reduce using rule 32


State 123

	expr -> match expr with '{' cases '}' .             (rule 8)

	int            reduce using rule 8
	id             reduce using rule 8
	idc            reduce using rule 8
	var            reduce using rule 8
	void           reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	for            reduce using rule 8
	to             reduce using rule 8
	do             reduce using rule 8
	match          reduce using rule 8
	with           reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	trans          reduce using rule 8
	shrink         reduce using rule 8
	ext            reduce using rule 8
	sext           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	'^'            reduce using rule 8
	'='            reduce using rule 8
	'/='           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	'_'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'<$'           reduce using rule 8
	'<=$'          reduce using rule 8
	'>$'           reduce using rule 8
	'>=$'          reduce using rule 8
	%eof           reduce using rule 8


State 124

	expr -> for id '=' expr to expr . do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	do             shift, and enter state 126
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41


State 125

	expr -> if pred then expr else expr .               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 3
	id             reduce using rule 3
	idc            reduce using rule 3
	var            reduce using rule 3
	void           reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	for            reduce using rule 3
	to             reduce using rule 3
	do             reduce using rule 3
	match          reduce using rule 3
	with           reduce using rule 3
	and            reduce using rule 3
	or             reduce using rule 3
	trans          reduce using rule 3
	shrink         reduce using rule 3
	ext            reduce using rule 3
	sext           reduce using rule 3
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            reduce using rule 3
	'/='           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	'_'            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'<$'           reduce using rule 3
	'<=$'          reduce using rule 3
	'>$'           reduce using rule 3
	'>=$'          reduce using rule 3
	%eof           reduce using rule 3


State 126

	expr -> for id '=' expr to expr do . expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 142
	lval           goto state 4

State 127

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	case -> pat '->' expr .                             (rule 33)

	int            reduce using rule 33
	id             reduce using rule 33
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'}'            reduce using rule 33
	'_'            reduce using rule 33


State 128

	pats -> pat . ',' pats                              (rule 39)

	','            shift, and enter state 141


State 129

	pat -> id '(' pats . ')'                            (rule 37)

	')'            shift, and enter state 140


State 130

	expr -> trans '[' int ',' int ']' '(' . expr ')'    (rule 9)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	void           shift, and enter state 7
	if             shift, and enter state 8
	for            shift, and enter state 9
	match          shift, and enter state 10
	trans          shift, and enter state 11
	shrink         shift, and enter state 12
	ext            shift, and enter state 13
	sext           shift, and enter state 14
	'('            shift, and enter state 15
	'{'            shift, and enter state 16

	expr           goto state 139
	lval           goto state 4

State 131

	expr -> shrink '[' int ']' '(' expr ')' .           (rule 12)

	int            reduce using rule 12
	id             reduce using rule 12
	idc            reduce using rule 12
	var            reduce using rule 12
	void           reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	for            reduce using rule 12
	to             reduce using rule 12
	do             reduce using rule 12
	match          reduce using rule 12
	with           reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	trans          reduce using rule 12
	shrink         reduce using rule 12
	ext            reduce using rule 12
	sext           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'&'            reduce using rule 12
	'|'            reduce using rule 12
	'^'            reduce using rule 12
	'='            reduce using rule 12
	'/='           reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	'_'            reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'<$'           reduce using rule 12
	'<=$'          reduce using rule 12
	'>$'           reduce using rule 12
	'>=$'          reduce using rule 12
	%eof           reduce using rule 12


State 132

	expr -> ext '[' int ']' '(' expr ')' .              (rule 10)

	int            reduce using rule 10
	id             reduce using rule 10
	idc            reduce using rule 10
	var            reduce using rule 10
	void           reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	for            reduce using rule 10
	to             reduce using rule 10
	do             reduce using rule 10
	match          reduce using rule 10
	with           reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	trans          reduce using rule 10
	shrink         reduce using rule 10
	ext            reduce using rule 10
	sext           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'&'            reduce using rule 10
	'|'            reduce using rule 10
	'^'            reduce using rule 10
	'='            reduce using rule 10
	'/='           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	'_'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'<$'           reduce using rule 10
	'<=$'          reduce using rule 10
	'>$'           reduce using rule 10
	'>=$'          reduce using rule 10
	%eof           reduce using rule 10


State 133

	expr -> sext '[' int ']' '(' expr ')' .             (rule 11)

	int            reduce using rule 11
	id             reduce using rule 11
	idc            reduce using rule 11
	var            reduce using rule 11
	void           reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	for            reduce using rule 11
	to             reduce using rule 11
	do             reduce using rule 11
	match          reduce using rule 11
	with           reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	trans          reduce using rule 11
	shrink         reduce using rule 11
	ext            reduce using rule 11
	sext           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'&'            reduce using rule 11
	'|'            reduce using rule 11
	'^'            reduce using rule 11
	'='            reduce using rule 11
	'/='           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	'_'            reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'<$'           reduce using rule 11
	'<=$'          reduce using rule 11
	'>$'           reduce using rule 11
	'>=$'          reduce using rule 11
	%eof           reduce using rule 11


State 134

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	var_decl -> var id ':' type_reg '=' expr .          (rule 27)

	int            reduce using rule 27
	id             reduce using rule 27
	idc            reduce using rule 27
	var            reduce using rule 27
	void           reduce using rule 27
	if             reduce using rule 27
	for            reduce using rule 27
	match          reduce using rule 27
	trans          reduce using rule 27
	shrink         reduce using rule 27
	ext            reduce using rule 27
	sext           reduce using rule 27
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'('            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27


State 135

	type_reg -> bits '[' int . ']'                      (rule 56)

	']'            shift, and enter state 138


State 136

	type_reg -> range '[' int . ',' int ']'             (rule 57)

	','            shift, and enter state 137


State 137

	type_reg -> range '[' int ',' . int ']'             (rule 57)

	int            shift, and enter state 145


State 138

	type_reg -> bits '[' int ']' .                      (rule 56)

	'='            reduce using rule 56


State 139

	expr -> trans '[' int ',' int ']' '(' expr . ')'    (rule 9)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	')'            shift, and enter state 144


State 140

	pat -> id '(' pats ')' .                            (rule 37)

	','            reduce using rule 37
	'->'           reduce using rule 37


State 141

	pats -> pat ',' . pats                              (rule 39)

	int            shift, and enter state 100
	id             shift, and enter state 101
	')'            reduce using rule 38
	'_'            shift, and enter state 102

	pat            goto state 128
	pats           goto state 143

State 142

	expr -> for id '=' expr to expr do expr .           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 4
	id             reduce using rule 4
	idc            reduce using rule 4
	var            reduce using rule 4
	void           reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	for            reduce using rule 4
	to             reduce using rule 4
	do             reduce using rule 4
	match          reduce using rule 4
	with           reduce using rule 4
	and            reduce using rule 4
	or             reduce using rule 4
	trans          reduce using rule 4
	shrink         reduce using rule 4
	ext            reduce using rule 4
	sext           reduce using rule 4
	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'&'            shift, and enter state 39
	'|'            shift, and enter state 40
	'^'            shift, and enter state 41
	'='            reduce using rule 4
	'/='           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	'_'            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'<='           reduce using rule 4
	'>='           reduce using rule 4
	'<$'           reduce using rule 4
	'<=$'          reduce using rule 4
	'>$'           reduce using rule 4
	'>=$'          reduce using rule 4
	%eof           reduce using rule 4


State 143

	pats -> pat ',' pats .                              (rule 39)

	')'            reduce using rule 39


State 144

	expr -> trans '[' int ',' int ']' '(' expr ')' .    (rule 9)

	int            reduce using rule 9
	id             reduce using rule 9
	idc            reduce using rule 9
	var            reduce using rule 9
	void           reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	for            reduce using rule 9
	to             reduce using rule 9
	do             reduce using rule 9
	match          reduce using rule 9
	with           reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	trans          reduce using rule 9
	shrink         reduce using rule 9
	ext            reduce using rule 9
	sext           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'&'            reduce using rule 9
	'|'            reduce using rule 9
	'^'            reduce using rule 9
	'='            reduce using rule 9
	'/='           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	'_'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'<$'           reduce using rule 9
	'<=$'          reduce using rule 9
	'>$'           reduce using rule 9
	'>=$'          reduce using rule 9
	%eof           reduce using rule 9


State 145

	type_reg -> range '[' int ',' int . ']'             (rule 57)

	']'            shift, and enter state 146


State 146

	type_reg -> range '[' int ',' int ']' .             (rule 57)

	'='            reduce using rule 57


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 60
Number of terminals: 52
Number of non-terminals: 14
Number of states: 147
