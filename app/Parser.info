-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


rule 5 is unused
rule 6 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> expr                               (0)
	expr -> int                                        (1)
	expr -> expr '+' expr                              (2)
	expr -> expr '*' expr                              (3)
	expr -> '(' expr ')'                               (4)
	binop -> '+'                                       (5)
	binop -> '*'                                       (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt $$ }
	'+'            { TokenPlus }
	'*'            { TokenMult }
	'('            { TokenLParen }
	')'            { TokenRParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3, 4
	binop           rules 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . expr                              (rule 0)

	int            shift, and enter state 2
	'('            shift, and enter state 4

	expr           goto state 3

State 1

	expr -> . int                                       (rule 1)

	int            shift, and enter state 2


State 2

	expr -> int .                                       (rule 1)

	'+'            reduce using rule 1
	'*'            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parse -> expr .                              (rule 0)
	expr -> expr . '+' expr                             (rule 2)
	expr -> expr . '*' expr                             (rule 3)

	'+'            shift, and enter state 6
	'*'            shift, and enter state 7
	%eof           accept


State 4

	expr -> '(' . expr ')'                              (rule 4)

	int            shift, and enter state 2
	'('            shift, and enter state 4

	expr           goto state 5

State 5

	expr -> expr . '+' expr                             (rule 2)
	expr -> expr . '*' expr                             (rule 3)
	expr -> '(' expr . ')'                              (rule 4)

	'+'            shift, and enter state 6
	'*'            shift, and enter state 7
	')'            shift, and enter state 10


State 6

	expr -> expr '+' . expr                             (rule 2)

	int            shift, and enter state 2
	'('            shift, and enter state 4

	expr           goto state 9

State 7

	expr -> expr '*' . expr                             (rule 3)

	int            shift, and enter state 2
	'('            shift, and enter state 4

	expr           goto state 8

State 8

	expr -> expr . '+' expr                             (rule 2)
	expr -> expr . '*' expr                             (rule 3)
	expr -> expr '*' expr .                             (rule 3)

	'+'            reduce using rule 3
	'*'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 9

	expr -> expr . '+' expr                             (rule 2)
	expr -> expr '+' expr .                             (rule 2)
	expr -> expr . '*' expr                             (rule 3)

	'+'            reduce using rule 2
	'*'            shift, and enter state 7
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 10

	expr -> '(' expr ')' .                              (rule 4)

	'+'            reduce using rule 4
	'*'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 5
Number of non-terminals: 3
Number of states: 11
