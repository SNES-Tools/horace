-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> mode_decl                          (0)
	mode_decl -> mode Id '{' types_decl state_decl main_decl func_decl '}'   (1)
	types_decl -> types '{' type_list '}'              (2)
	type_list ->                                       (3)
	type_list -> type type_list                        (4)
	type -> Id '{' type_cases '}'                      (5)
	type_cases -> type_case                            (6)
	type_cases -> type_case ',' type_cases             (7)
	type_case -> Id                                    (8)
	type_case -> Idc type_vars ')'                     (9)
	type_vars -> type_reg                              (10)
	type_vars -> type_reg ',' type_vars                (11)
	state_decl -> state '{' state_vars '}'             (12)
	state_vars ->                                      (13)
	state_vars -> state_var state_vars                 (14)
	state_var -> id ':' type_state '=' expr            (15)
	main_decl -> main expr                             (16)
	func_decl -> funcs '{' func_list '}'               (17)
	func_list ->                                       (18)
	func_list -> func func_list                        (19)
	func -> id '(' params ')' ':' type_reg expr        (20)
	func -> idc params ')' ':' type_reg expr           (21)
	params ->                                          (22)
	params -> param                                    (23)
	params -> param ',' params                         (24)
	param -> id ':' type_reg                           (25)
	expr -> int                                        (26)
	expr -> '{' vars exprs '}'                         (27)
	expr -> if pred then expr else expr                (28)
	expr -> for id '=' expr to expr do expr            (29)
	expr -> lval '<-' expr                             (30)
	expr -> idc args ')'                               (31)
	expr -> Idc args ')'                               (32)
	expr -> id '.' idc args ')'                        (33)
	expr -> match expr with '{' cases '}'              (34)
	expr -> trans '[' int ',' int ']' '(' expr ')'     (35)
	expr -> ext '[' int ']' '(' expr ')'               (36)
	expr -> sext '[' int ']' '(' expr ')'              (37)
	expr -> shrink '[' int ']' '(' expr ')'            (38)
	expr -> expr '+' expr                              (39)
	expr -> expr '-' expr                              (40)
	expr -> expr '&' expr                              (41)
	expr -> expr '^' expr                              (42)
	expr -> expr '|' expr                              (43)
	expr -> id                                         (44)
	expr -> '(' expr ')'                               (45)
	expr -> void                                       (46)
	lval -> id                                         (47)
	lval -> id '[' expr ']'                            (48)
	exprs ->                                           (49)
	exprs -> expr exprs                                (50)
	vars ->                                            (51)
	vars -> var_decl vars                              (52)
	var_decl -> var id ':' type_reg '=' expr           (53)
	args ->                                            (54)
	args -> expr                                       (55)
	args -> expr ',' args                              (56)
	cases ->                                           (57)
	cases -> case cases                                (58)
	case -> pat '->' expr                              (59)
	pat -> '_'                                         (60)
	pat -> int                                         (61)
	pat -> id                                          (62)
	pat -> id '(' pats ')'                             (63)
	pats ->                                            (64)
	pats -> pat ',' pats                               (65)
	pred -> true                                       (66)
	pred -> false                                      (67)
	pred -> not pred                                   (68)
	pred -> pred and pred                              (69)
	pred -> pred or pred                               (70)
	pred -> expr comp expr                             (71)
	comp -> '='                                        (72)
	comp -> '/='                                       (73)
	comp -> '<'                                        (74)
	comp -> '>'                                        (75)
	comp -> '<='                                       (76)
	comp -> '>='                                       (77)
	comp -> '<$'                                       (78)
	comp -> '>$'                                       (79)
	comp -> '<=$'                                      (80)
	comp -> '>=$'                                      (81)
	type_state -> type_reg                             (82)
	type_reg -> bits '[' int ']'                       (83)
	type_reg -> range '[' int ',' int ']'              (84)
	type_reg -> Id                                     (85)
	type_reg -> void                                   (86)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	mode           { TokenMode }
	state          { TokenState }
	main           { TokenMain }
	funcs          { TokenFunctions }
	types          { TokenTypes }
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	Id             { TokenCapId $$ }
	Idc            { TokenCapIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'&'            { TokenAmphersand }
	'|'            { TokenPipe }
	'^'            { TokenCaret }
	'='            { TokenEq }
	'/='           { TokenNeq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	mode_decl       rule  1
	types_decl      rule  2
	type_list       rules 3, 4
	type            rule  5
	type_cases      rules 6, 7
	type_case       rules 8, 9
	type_vars       rules 10, 11
	state_decl      rule  12
	state_vars      rules 13, 14
	state_var       rule  15
	main_decl       rule  16
	func_decl       rule  17
	func_list       rules 18, 19
	func            rules 20, 21
	params          rules 22, 23, 24
	param           rule  25
	expr            rules 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46
	lval            rules 47, 48
	exprs           rules 49, 50
	vars            rules 51, 52
	var_decl        rule  53
	args            rules 54, 55, 56
	cases           rules 57, 58
	case            rule  59
	pat             rules 60, 61, 62, 63
	pats            rules 64, 65
	pred            rules 66, 67, 68, 69, 70, 71
	comp            rules 72, 73, 74, 75, 76, 77, 78, 79, 80, 81
	type_state      rule  82
	type_reg        rules 83, 84, 85, 86

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . mode_decl                         (rule 0)

	mode           shift, and enter state 2

	mode_decl      goto state 3

State 1

	mode_decl -> . mode Id '{' types_decl state_decl main_decl func_decl '}'    (rule 1)

	mode           shift, and enter state 2


State 2

	mode_decl -> mode . Id '{' types_decl state_decl main_decl func_decl '}'    (rule 1)

	Id             shift, and enter state 4


State 3

	%start_parse -> mode_decl .                         (rule 0)

	%eof           accept


State 4

	mode_decl -> mode Id . '{' types_decl state_decl main_decl func_decl '}'    (rule 1)

	'{'            shift, and enter state 5


State 5

	mode_decl -> mode Id '{' . types_decl state_decl main_decl func_decl '}'    (rule 1)

	types          shift, and enter state 7

	types_decl     goto state 6

State 6

	mode_decl -> mode Id '{' types_decl . state_decl main_decl func_decl '}'    (rule 1)

	state          shift, and enter state 10

	state_decl     goto state 9

State 7

	types_decl -> types . '{' type_list '}'             (rule 2)

	'{'            shift, and enter state 8


State 8

	types_decl -> types '{' . type_list '}'             (rule 2)

	Id             shift, and enter state 16
	'}'            reduce using rule 3

	type_list      goto state 14
	type           goto state 15

State 9

	mode_decl -> mode Id '{' types_decl state_decl . main_decl func_decl '}'    (rule 1)

	main           shift, and enter state 13

	main_decl      goto state 12

State 10

	state_decl -> state . '{' state_vars '}'            (rule 12)

	'{'            shift, and enter state 11


State 11

	state_decl -> state '{' . state_vars '}'            (rule 12)

	id             shift, and enter state 40
	'}'            reduce using rule 13

	state_vars     goto state 38
	state_var      goto state 39

State 12

	mode_decl -> mode Id '{' types_decl state_decl main_decl . func_decl '}'    (rule 1)

	funcs          shift, and enter state 37

	func_decl      goto state 36

State 13

	main_decl -> main . expr                            (rule 16)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 20
	lval           goto state 21

State 14

	types_decl -> types '{' type_list . '}'             (rule 2)

	'}'            shift, and enter state 19


State 15

	type_list -> type . type_list                       (rule 4)

	Id             shift, and enter state 16
	'}'            reduce using rule 3

	type_list      goto state 18
	type           goto state 15

State 16

	type -> Id . '{' type_cases '}'                     (rule 5)

	'{'            shift, and enter state 17


State 17

	type -> Id '{' . type_cases '}'                     (rule 5)

	Id             shift, and enter state 74
	Idc            shift, and enter state 75

	type_cases     goto state 72
	type_case      goto state 73

State 18

	type_list -> type type_list .                       (rule 4)

	'}'            reduce using rule 4


State 19

	types_decl -> types '{' type_list '}' .             (rule 2)

	state          reduce using rule 2


State 20

	main_decl -> main expr .                            (rule 16)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 16
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 21

	expr -> lval . '<-' expr                            (rule 30)

	'<-'           shift, and enter state 66


State 22

	expr -> int .                                       (rule 26)

	funcs          reduce using rule 26
	int            reduce using rule 26
	id             reduce using rule 26
	idc            reduce using rule 26
	Idc            reduce using rule 26
	var            reduce using rule 26
	void           reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	for            reduce using rule 26
	to             reduce using rule 26
	do             reduce using rule 26
	match          reduce using rule 26
	with           reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	trans          reduce using rule 26
	shrink         reduce using rule 26
	ext            reduce using rule 26
	sext           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'&'            reduce using rule 26
	'|'            reduce using rule 26
	'^'            reduce using rule 26
	'='            reduce using rule 26
	'/='           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	'_'            reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'<$'           reduce using rule 26
	'<=$'          reduce using rule 26
	'>$'           reduce using rule 26
	'>=$'          reduce using rule 26


State 23

	expr -> id . '.' idc args ')'                       (rule 33)
	expr -> id .                                        (rule 44)
	lval -> id .                                        (rule 47)
	lval -> id . '[' expr ']'                           (rule 48)

	funcs          reduce using rule 44
	int            reduce using rule 44
	id             reduce using rule 44
	idc            reduce using rule 44
	Idc            reduce using rule 44
	var            reduce using rule 44
	void           reduce using rule 44
	if             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	for            reduce using rule 44
	to             reduce using rule 44
	do             reduce using rule 44
	match          reduce using rule 44
	with           reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44
	trans          reduce using rule 44
	shrink         reduce using rule 44
	ext            reduce using rule 44
	sext           reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'&'            reduce using rule 44
	'|'            reduce using rule 44
	'^'            reduce using rule 44
	'='            reduce using rule 44
	'/='           reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	'['            shift, and enter state 64
	']'            reduce using rule 44
	','            reduce using rule 44
	'.'            shift, and enter state 65
	'_'            reduce using rule 44
	'<-'           reduce using rule 47
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	'<='           reduce using rule 44
	'>='           reduce using rule 44
	'<$'           reduce using rule 44
	'<=$'          reduce using rule 44
	'>$'           reduce using rule 44
	'>=$'          reduce using rule 44


State 24

	expr -> idc . args ')'                              (rule 31)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	')'            reduce using rule 54
	'{'            shift, and enter state 35

	expr           goto state 61
	lval           goto state 21
	args           goto state 63

State 25

	expr -> Idc . args ')'                              (rule 32)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	')'            reduce using rule 54
	'{'            shift, and enter state 35

	expr           goto state 61
	lval           goto state 21
	args           goto state 62

State 26

	expr -> void .                                      (rule 46)

	funcs          reduce using rule 46
	int            reduce using rule 46
	id             reduce using rule 46
	idc            reduce using rule 46
	Idc            reduce using rule 46
	var            reduce using rule 46
	void           reduce using rule 46
	if             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	for            reduce using rule 46
	to             reduce using rule 46
	do             reduce using rule 46
	match          reduce using rule 46
	with           reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46
	trans          reduce using rule 46
	shrink         reduce using rule 46
	ext            reduce using rule 46
	sext           reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'&'            reduce using rule 46
	'|'            reduce using rule 46
	'^'            reduce using rule 46
	'='            reduce using rule 46
	'/='           reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	'_'            reduce using rule 46
	'<'            reduce using rule 46
	'>'            reduce using rule 46
	'<='           reduce using rule 46
	'>='           reduce using rule 46
	'<$'           reduce using rule 46
	'<=$'          reduce using rule 46
	'>$'           reduce using rule 46
	'>=$'          reduce using rule 46


State 27

	expr -> if . pred then expr else expr               (rule 28)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	true           shift, and enter state 58
	false          shift, and enter state 59
	not            shift, and enter state 60
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 56
	lval           goto state 21
	pred           goto state 57

State 28

	expr -> for . id '=' expr to expr do expr           (rule 29)

	id             shift, and enter state 55


State 29

	expr -> match . expr with '{' cases '}'             (rule 34)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 54
	lval           goto state 21

State 30

	expr -> trans . '[' int ',' int ']' '(' expr ')'    (rule 35)

	'['            shift, and enter state 53


State 31

	expr -> shrink . '[' int ']' '(' expr ')'           (rule 38)

	'['            shift, and enter state 52


State 32

	expr -> ext . '[' int ']' '(' expr ')'              (rule 36)

	'['            shift, and enter state 51


State 33

	expr -> sext . '[' int ']' '(' expr ')'             (rule 37)

	'['            shift, and enter state 50


State 34

	expr -> '(' . expr ')'                              (rule 45)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 49
	lval           goto state 21

State 35

	expr -> '{' . vars exprs '}'                        (rule 27)

	int            reduce using rule 51
	id             reduce using rule 51
	idc            reduce using rule 51
	Idc            reduce using rule 51
	var            shift, and enter state 48
	void           reduce using rule 51
	if             reduce using rule 51
	for            reduce using rule 51
	match          reduce using rule 51
	trans          reduce using rule 51
	shrink         reduce using rule 51
	ext            reduce using rule 51
	sext           reduce using rule 51
	'('            reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51

	vars           goto state 46
	var_decl       goto state 47

State 36

	mode_decl -> mode Id '{' types_decl state_decl main_decl func_decl . '}'    (rule 1)

	'}'            shift, and enter state 45


State 37

	func_decl -> funcs . '{' func_list '}'              (rule 17)

	'{'            shift, and enter state 44


State 38

	state_decl -> state '{' state_vars . '}'            (rule 12)

	'}'            shift, and enter state 43


State 39

	state_vars -> state_var . state_vars                (rule 14)

	id             shift, and enter state 40
	'}'            reduce using rule 13

	state_vars     goto state 42
	state_var      goto state 39

State 40

	state_var -> id . ':' type_state '=' expr           (rule 15)

	':'            shift, and enter state 41


State 41

	state_var -> id ':' . type_state '=' expr           (rule 15)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_state     goto state 125
	type_reg       goto state 126

State 42

	state_vars -> state_var state_vars .                (rule 14)

	'}'            reduce using rule 14


State 43

	state_decl -> state '{' state_vars '}' .            (rule 12)

	main           reduce using rule 12


State 44

	func_decl -> funcs '{' . func_list '}'              (rule 17)

	id             shift, and enter state 123
	idc            shift, and enter state 124
	'}'            reduce using rule 18

	func_list      goto state 121
	func           goto state 122

State 45

	mode_decl -> mode Id '{' types_decl state_decl main_decl func_decl '}' .    (rule 1)

	%eof           reduce using rule 1


State 46

	expr -> '{' vars . exprs '}'                        (rule 27)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35
	'}'            reduce using rule 49

	expr           goto state 119
	lval           goto state 21
	exprs          goto state 120

State 47

	vars -> var_decl . vars                             (rule 52)

	int            reduce using rule 51
	id             reduce using rule 51
	idc            reduce using rule 51
	Idc            reduce using rule 51
	var            shift, and enter state 48
	void           reduce using rule 51
	if             reduce using rule 51
	for            reduce using rule 51
	match          reduce using rule 51
	trans          reduce using rule 51
	shrink         reduce using rule 51
	ext            reduce using rule 51
	sext           reduce using rule 51
	'('            reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51

	vars           goto state 118
	var_decl       goto state 47

State 48

	var_decl -> var . id ':' type_reg '=' expr          (rule 53)

	id             shift, and enter state 117


State 49

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	expr -> '(' expr . ')'                              (rule 45)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            shift, and enter state 116


State 50

	expr -> sext '[' . int ']' '(' expr ')'             (rule 37)

	int            shift, and enter state 115


State 51

	expr -> ext '[' . int ']' '(' expr ')'              (rule 36)

	int            shift, and enter state 114


State 52

	expr -> shrink '[' . int ']' '(' expr ')'           (rule 38)

	int            shift, and enter state 113


State 53

	expr -> trans '[' . int ',' int ']' '(' expr ')'    (rule 35)

	int            shift, and enter state 112


State 54

	expr -> match expr . with '{' cases '}'             (rule 34)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	with           shift, and enter state 111
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 55

	expr -> for id . '=' expr to expr do expr           (rule 29)

	'='            shift, and enter state 110


State 56

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	pred -> expr . comp expr                            (rule 71)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'='            shift, and enter state 100
	'/='           shift, and enter state 101
	'<'            shift, and enter state 102
	'>'            shift, and enter state 103
	'<='           shift, and enter state 104
	'>='           shift, and enter state 105
	'<$'           shift, and enter state 106
	'<=$'          shift, and enter state 107
	'>$'           shift, and enter state 108
	'>=$'          shift, and enter state 109

	comp           goto state 99

State 57

	expr -> if pred . then expr else expr               (rule 28)
	pred -> pred . and pred                             (rule 69)
	pred -> pred . or pred                              (rule 70)

	then           shift, and enter state 96
	and            shift, and enter state 97
	or             shift, and enter state 98


State 58

	pred -> true .                                      (rule 66)

	then           reduce using rule 66
	and            reduce using rule 66
	or             reduce using rule 66


State 59

	pred -> false .                                     (rule 67)

	then           reduce using rule 67
	and            reduce using rule 67
	or             reduce using rule 67


State 60

	pred -> not . pred                                  (rule 68)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	true           shift, and enter state 58
	false          shift, and enter state 59
	not            shift, and enter state 60
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 56
	lval           goto state 21
	pred           goto state 95

State 61

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	args -> expr .                                      (rule 55)
	args -> expr . ',' args                             (rule 56)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            reduce using rule 55
	','            shift, and enter state 94


State 62

	expr -> Idc args . ')'                              (rule 32)

	')'            shift, and enter state 93


State 63

	expr -> idc args . ')'                              (rule 31)

	')'            shift, and enter state 92


State 64

	lval -> id '[' . expr ']'                           (rule 48)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 91
	lval           goto state 21

State 65

	expr -> id '.' . idc args ')'                       (rule 33)

	idc            shift, and enter state 90


State 66

	expr -> lval '<-' . expr                            (rule 30)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 89
	lval           goto state 21

State 67

	expr -> expr '+' . expr                             (rule 39)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 88
	lval           goto state 21

State 68

	expr -> expr '-' . expr                             (rule 40)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 87
	lval           goto state 21

State 69

	expr -> expr '&' . expr                             (rule 41)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 86
	lval           goto state 21

State 70

	expr -> expr '|' . expr                             (rule 43)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 85
	lval           goto state 21

State 71

	expr -> expr '^' . expr                             (rule 42)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 84
	lval           goto state 21

State 72

	type -> Id '{' type_cases . '}'                     (rule 5)

	'}'            shift, and enter state 83


State 73

	type_cases -> type_case .                           (rule 6)
	type_cases -> type_case . ',' type_cases            (rule 7)

	'}'            reduce using rule 6
	','            shift, and enter state 82


State 74

	type_case -> Id .                                   (rule 8)

	'}'            reduce using rule 8
	','            reduce using rule 8


State 75

	type_case -> Idc . type_vars ')'                    (rule 9)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_vars      goto state 76
	type_reg       goto state 77

State 76

	type_case -> Idc type_vars . ')'                    (rule 9)

	')'            shift, and enter state 154


State 77

	type_vars -> type_reg .                             (rule 10)
	type_vars -> type_reg . ',' type_vars               (rule 11)

	')'            reduce using rule 10
	','            shift, and enter state 153


State 78

	type_reg -> Id .                                    (rule 85)

	int            reduce using rule 85
	id             reduce using rule 85
	idc            reduce using rule 85
	Idc            reduce using rule 85
	void           reduce using rule 85
	if             reduce using rule 85
	for            reduce using rule 85
	match          reduce using rule 85
	trans          reduce using rule 85
	shrink         reduce using rule 85
	ext            reduce using rule 85
	sext           reduce using rule 85
	'='            reduce using rule 85
	'('            reduce using rule 85
	')'            reduce using rule 85
	'{'            reduce using rule 85
	','            reduce using rule 85


State 79

	type_reg -> bits . '[' int ']'                      (rule 83)

	'['            shift, and enter state 152


State 80

	type_reg -> range . '[' int ',' int ']'             (rule 84)

	'['            shift, and enter state 151


State 81

	type_reg -> void .                                  (rule 86)

	int            reduce using rule 86
	id             reduce using rule 86
	idc            reduce using rule 86
	Idc            reduce using rule 86
	void           reduce using rule 86
	if             reduce using rule 86
	for            reduce using rule 86
	match          reduce using rule 86
	trans          reduce using rule 86
	shrink         reduce using rule 86
	ext            reduce using rule 86
	sext           reduce using rule 86
	'='            reduce using rule 86
	'('            reduce using rule 86
	')'            reduce using rule 86
	'{'            reduce using rule 86
	','            reduce using rule 86


State 82

	type_cases -> type_case ',' . type_cases            (rule 7)

	Id             shift, and enter state 74
	Idc            shift, and enter state 75

	type_cases     goto state 150
	type_case      goto state 73

State 83

	type -> Id '{' type_cases '}' .                     (rule 5)

	Id             reduce using rule 5
	'}'            reduce using rule 5


State 84

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr '^' expr .                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 42
	int            reduce using rule 42
	id             reduce using rule 42
	idc            reduce using rule 42
	Idc            reduce using rule 42
	var            reduce using rule 42
	void           reduce using rule 42
	if             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	for            reduce using rule 42
	to             reduce using rule 42
	do             reduce using rule 42
	match          reduce using rule 42
	with           reduce using rule 42
	and            reduce using rule 42
	or             reduce using rule 42
	trans          reduce using rule 42
	shrink         reduce using rule 42
	ext            reduce using rule 42
	sext           reduce using rule 42
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            reduce using rule 42
	'^'            reduce using rule 42
	'='            reduce using rule 42
	'/='           reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	'_'            reduce using rule 42
	'<'            reduce using rule 42
	'>'            reduce using rule 42
	'<='           reduce using rule 42
	'>='           reduce using rule 42
	'<$'           reduce using rule 42
	'<=$'          reduce using rule 42
	'>$'           reduce using rule 42
	'>=$'          reduce using rule 42


State 85

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	expr -> expr '|' expr .                             (rule 43)

	funcs          reduce using rule 43
	int            reduce using rule 43
	id             reduce using rule 43
	idc            reduce using rule 43
	Idc            reduce using rule 43
	var            reduce using rule 43
	void           reduce using rule 43
	if             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	for            reduce using rule 43
	to             reduce using rule 43
	do             reduce using rule 43
	match          reduce using rule 43
	with           reduce using rule 43
	and            reduce using rule 43
	or             reduce using rule 43
	trans          reduce using rule 43
	shrink         reduce using rule 43
	ext            reduce using rule 43
	sext           reduce using rule 43
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            reduce using rule 43
	'^'            shift, and enter state 71
	'='            reduce using rule 43
	'/='           reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	'_'            reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43
	'<='           reduce using rule 43
	'>='           reduce using rule 43
	'<$'           reduce using rule 43
	'<=$'          reduce using rule 43
	'>$'           reduce using rule 43
	'>=$'          reduce using rule 43


State 86

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr '&' expr .                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 41
	int            reduce using rule 41
	id             reduce using rule 41
	idc            reduce using rule 41
	Idc            reduce using rule 41
	var            reduce using rule 41
	void           reduce using rule 41
	if             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	for            reduce using rule 41
	to             reduce using rule 41
	do             reduce using rule 41
	match          reduce using rule 41
	with           reduce using rule 41
	and            reduce using rule 41
	or             reduce using rule 41
	trans          reduce using rule 41
	shrink         reduce using rule 41
	ext            reduce using rule 41
	sext           reduce using rule 41
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            reduce using rule 41
	'|'            reduce using rule 41
	'^'            reduce using rule 41
	'='            reduce using rule 41
	'/='           reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	']'            reduce using rule 41
	','            reduce using rule 41
	'_'            reduce using rule 41
	'<'            reduce using rule 41
	'>'            reduce using rule 41
	'<='           reduce using rule 41
	'>='           reduce using rule 41
	'<$'           reduce using rule 41
	'<=$'          reduce using rule 41
	'>$'           reduce using rule 41
	'>=$'          reduce using rule 41


State 87

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr '-' expr .                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 40
	int            reduce using rule 40
	id             reduce using rule 40
	idc            reduce using rule 40
	Idc            reduce using rule 40
	var            reduce using rule 40
	void           reduce using rule 40
	if             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	for            reduce using rule 40
	to             reduce using rule 40
	do             reduce using rule 40
	match          reduce using rule 40
	with           reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40
	trans          reduce using rule 40
	shrink         reduce using rule 40
	ext            reduce using rule 40
	sext           reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'&'            reduce using rule 40
	'|'            reduce using rule 40
	'^'            reduce using rule 40
	'='            reduce using rule 40
	'/='           reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	']'            reduce using rule 40
	','            reduce using rule 40
	'_'            reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40
	'<='           reduce using rule 40
	'>='           reduce using rule 40
	'<$'           reduce using rule 40
	'<=$'          reduce using rule 40
	'>$'           reduce using rule 40
	'>=$'          reduce using rule 40


State 88

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr '+' expr .                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 39
	int            reduce using rule 39
	id             reduce using rule 39
	idc            reduce using rule 39
	Idc            reduce using rule 39
	var            reduce using rule 39
	void           reduce using rule 39
	if             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	for            reduce using rule 39
	to             reduce using rule 39
	do             reduce using rule 39
	match          reduce using rule 39
	with           reduce using rule 39
	and            reduce using rule 39
	or             reduce using rule 39
	trans          reduce using rule 39
	shrink         reduce using rule 39
	ext            reduce using rule 39
	sext           reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'&'            reduce using rule 39
	'|'            reduce using rule 39
	'^'            reduce using rule 39
	'='            reduce using rule 39
	'/='           reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	'_'            reduce using rule 39
	'<'            reduce using rule 39
	'>'            reduce using rule 39
	'<='           reduce using rule 39
	'>='           reduce using rule 39
	'<$'           reduce using rule 39
	'<=$'          reduce using rule 39
	'>$'           reduce using rule 39
	'>=$'          reduce using rule 39


State 89

	expr -> lval '<-' expr .                            (rule 30)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 30
	int            reduce using rule 30
	id             reduce using rule 30
	idc            reduce using rule 30
	Idc            reduce using rule 30
	var            reduce using rule 30
	void           reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	for            reduce using rule 30
	to             reduce using rule 30
	do             reduce using rule 30
	match          reduce using rule 30
	with           reduce using rule 30
	and            reduce using rule 30
	or             reduce using rule 30
	trans          reduce using rule 30
	shrink         reduce using rule 30
	ext            reduce using rule 30
	sext           reduce using rule 30
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'='            reduce using rule 30
	'/='           reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	'_'            reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	'<$'           reduce using rule 30
	'<=$'          reduce using rule 30
	'>$'           reduce using rule 30
	'>=$'          reduce using rule 30


State 90

	expr -> id '.' idc . args ')'                       (rule 33)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	')'            reduce using rule 54
	'{'            shift, and enter state 35

	expr           goto state 61
	lval           goto state 21
	args           goto state 149

State 91

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	lval -> id '[' expr . ']'                           (rule 48)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	']'            shift, and enter state 148


State 92

	expr -> idc args ')' .                              (rule 31)

	funcs          reduce using rule 31
	int            reduce using rule 31
	id             reduce using rule 31
	idc            reduce using rule 31
	Idc            reduce using rule 31
	var            reduce using rule 31
	void           reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	for            reduce using rule 31
	to             reduce using rule 31
	do             reduce using rule 31
	match          reduce using rule 31
	with           reduce using rule 31
	and            reduce using rule 31
	or             reduce using rule 31
	trans          reduce using rule 31
	shrink         reduce using rule 31
	ext            reduce using rule 31
	sext           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'&'            reduce using rule 31
	'|'            reduce using rule 31
	'^'            reduce using rule 31
	'='            reduce using rule 31
	'/='           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	'_'            reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	'<$'           reduce using rule 31
	'<=$'          reduce using rule 31
	'>$'           reduce using rule 31
	'>=$'          reduce using rule 31


State 93

	expr -> Idc args ')' .                              (rule 32)

	funcs          reduce using rule 32
	int            reduce using rule 32
	id             reduce using rule 32
	idc            reduce using rule 32
	Idc            reduce using rule 32
	var            reduce using rule 32
	void           reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	for            reduce using rule 32
	to             reduce using rule 32
	do             reduce using rule 32
	match          reduce using rule 32
	with           reduce using rule 32
	and            reduce using rule 32
	or             reduce using rule 32
	trans          reduce using rule 32
	shrink         reduce using rule 32
	ext            reduce using rule 32
	sext           reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'&'            reduce using rule 32
	'|'            reduce using rule 32
	'^'            reduce using rule 32
	'='            reduce using rule 32
	'/='           reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	'_'            reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	'<$'           reduce using rule 32
	'<=$'          reduce using rule 32
	'>$'           reduce using rule 32
	'>=$'          reduce using rule 32


State 94

	args -> expr ',' . args                             (rule 56)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	')'            reduce using rule 54
	'{'            shift, and enter state 35

	expr           goto state 61
	lval           goto state 21
	args           goto state 147

State 95

	pred -> not pred .                                  (rule 68)
	pred -> pred . and pred                             (rule 69)
	pred -> pred . or pred                              (rule 70)

	then           reduce using rule 68
	and            reduce using rule 68
	or             reduce using rule 68


State 96

	expr -> if pred then . expr else expr               (rule 28)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 146
	lval           goto state 21

State 97

	pred -> pred and . pred                             (rule 69)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	true           shift, and enter state 58
	false          shift, and enter state 59
	not            shift, and enter state 60
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 56
	lval           goto state 21
	pred           goto state 145

State 98

	pred -> pred or . pred                              (rule 70)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	true           shift, and enter state 58
	false          shift, and enter state 59
	not            shift, and enter state 60
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 56
	lval           goto state 21
	pred           goto state 144

State 99

	pred -> expr comp . expr                            (rule 71)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 143
	lval           goto state 21

State 100

	comp -> '=' .                                       (rule 72)

	int            reduce using rule 72
	id             reduce using rule 72
	idc            reduce using rule 72
	Idc            reduce using rule 72
	void           reduce using rule 72
	if             reduce using rule 72
	for            reduce using rule 72
	match          reduce using rule 72
	trans          reduce using rule 72
	shrink         reduce using rule 72
	ext            reduce using rule 72
	sext           reduce using rule 72
	'('            reduce using rule 72
	'{'            reduce using rule 72


State 101

	comp -> '/=' .                                      (rule 73)

	int            reduce using rule 73
	id             reduce using rule 73
	idc            reduce using rule 73
	Idc            reduce using rule 73
	void           reduce using rule 73
	if             reduce using rule 73
	for            reduce using rule 73
	match          reduce using rule 73
	trans          reduce using rule 73
	shrink         reduce using rule 73
	ext            reduce using rule 73
	sext           reduce using rule 73
	'('            reduce using rule 73
	'{'            reduce using rule 73


State 102

	comp -> '<' .                                       (rule 74)

	int            reduce using rule 74
	id             reduce using rule 74
	idc            reduce using rule 74
	Idc            reduce using rule 74
	void           reduce using rule 74
	if             reduce using rule 74
	for            reduce using rule 74
	match          reduce using rule 74
	trans          reduce using rule 74
	shrink         reduce using rule 74
	ext            reduce using rule 74
	sext           reduce using rule 74
	'('            reduce using rule 74
	'{'            reduce using rule 74


State 103

	comp -> '>' .                                       (rule 75)

	int            reduce using rule 75
	id             reduce using rule 75
	idc            reduce using rule 75
	Idc            reduce using rule 75
	void           reduce using rule 75
	if             reduce using rule 75
	for            reduce using rule 75
	match          reduce using rule 75
	trans          reduce using rule 75
	shrink         reduce using rule 75
	ext            reduce using rule 75
	sext           reduce using rule 75
	'('            reduce using rule 75
	'{'            reduce using rule 75


State 104

	comp -> '<=' .                                      (rule 76)

	int            reduce using rule 76
	id             reduce using rule 76
	idc            reduce using rule 76
	Idc            reduce using rule 76
	void           reduce using rule 76
	if             reduce using rule 76
	for            reduce using rule 76
	match          reduce using rule 76
	trans          reduce using rule 76
	shrink         reduce using rule 76
	ext            reduce using rule 76
	sext           reduce using rule 76
	'('            reduce using rule 76
	'{'            reduce using rule 76


State 105

	comp -> '>=' .                                      (rule 77)

	int            reduce using rule 77
	id             reduce using rule 77
	idc            reduce using rule 77
	Idc            reduce using rule 77
	void           reduce using rule 77
	if             reduce using rule 77
	for            reduce using rule 77
	match          reduce using rule 77
	trans          reduce using rule 77
	shrink         reduce using rule 77
	ext            reduce using rule 77
	sext           reduce using rule 77
	'('            reduce using rule 77
	'{'            reduce using rule 77


State 106

	comp -> '<$' .                                      (rule 78)

	int            reduce using rule 78
	id             reduce using rule 78
	idc            reduce using rule 78
	Idc            reduce using rule 78
	void           reduce using rule 78
	if             reduce using rule 78
	for            reduce using rule 78
	match          reduce using rule 78
	trans          reduce using rule 78
	shrink         reduce using rule 78
	ext            reduce using rule 78
	sext           reduce using rule 78
	'('            reduce using rule 78
	'{'            reduce using rule 78


State 107

	comp -> '<=$' .                                     (rule 80)

	int            reduce using rule 80
	id             reduce using rule 80
	idc            reduce using rule 80
	Idc            reduce using rule 80
	void           reduce using rule 80
	if             reduce using rule 80
	for            reduce using rule 80
	match          reduce using rule 80
	trans          reduce using rule 80
	shrink         reduce using rule 80
	ext            reduce using rule 80
	sext           reduce using rule 80
	'('            reduce using rule 80
	'{'            reduce using rule 80


State 108

	comp -> '>$' .                                      (rule 79)

	int            reduce using rule 79
	id             reduce using rule 79
	idc            reduce using rule 79
	Idc            reduce using rule 79
	void           reduce using rule 79
	if             reduce using rule 79
	for            reduce using rule 79
	match          reduce using rule 79
	trans          reduce using rule 79
	shrink         reduce using rule 79
	ext            reduce using rule 79
	sext           reduce using rule 79
	'('            reduce using rule 79
	'{'            reduce using rule 79


State 109

	comp -> '>=$' .                                     (rule 81)

	int            reduce using rule 81
	id             reduce using rule 81
	idc            reduce using rule 81
	Idc            reduce using rule 81
	void           reduce using rule 81
	if             reduce using rule 81
	for            reduce using rule 81
	match          reduce using rule 81
	trans          reduce using rule 81
	shrink         reduce using rule 81
	ext            reduce using rule 81
	sext           reduce using rule 81
	'('            reduce using rule 81
	'{'            reduce using rule 81


State 110

	expr -> for id '=' . expr to expr do expr           (rule 29)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 142
	lval           goto state 21

State 111

	expr -> match expr with . '{' cases '}'             (rule 34)

	'{'            shift, and enter state 141


State 112

	expr -> trans '[' int . ',' int ']' '(' expr ')'    (rule 35)

	','            shift, and enter state 140


State 113

	expr -> shrink '[' int . ']' '(' expr ')'           (rule 38)

	']'            shift, and enter state 139


State 114

	expr -> ext '[' int . ']' '(' expr ')'              (rule 36)

	']'            shift, and enter state 138


State 115

	expr -> sext '[' int . ']' '(' expr ')'             (rule 37)

	']'            shift, and enter state 137


State 116

	expr -> '(' expr ')' .                              (rule 45)

	funcs          reduce using rule 45
	int            reduce using rule 45
	id             reduce using rule 45
	idc            reduce using rule 45
	Idc            reduce using rule 45
	var            reduce using rule 45
	void           reduce using rule 45
	if             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	for            reduce using rule 45
	to             reduce using rule 45
	do             reduce using rule 45
	match          reduce using rule 45
	with           reduce using rule 45
	and            reduce using rule 45
	or             reduce using rule 45
	trans          reduce using rule 45
	shrink         reduce using rule 45
	ext            reduce using rule 45
	sext           reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'&'            reduce using rule 45
	'|'            reduce using rule 45
	'^'            reduce using rule 45
	'='            reduce using rule 45
	'/='           reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	'_'            reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45
	'<='           reduce using rule 45
	'>='           reduce using rule 45
	'<$'           reduce using rule 45
	'<=$'          reduce using rule 45
	'>$'           reduce using rule 45
	'>=$'          reduce using rule 45


State 117

	var_decl -> var id . ':' type_reg '=' expr          (rule 53)

	':'            shift, and enter state 136


State 118

	vars -> var_decl vars .                             (rule 52)

	int            reduce using rule 52
	id             reduce using rule 52
	idc            reduce using rule 52
	Idc            reduce using rule 52
	void           reduce using rule 52
	if             reduce using rule 52
	for            reduce using rule 52
	match          reduce using rule 52
	trans          reduce using rule 52
	shrink         reduce using rule 52
	ext            reduce using rule 52
	sext           reduce using rule 52
	'('            reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52


State 119

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	exprs -> expr . exprs                               (rule 50)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'('            shift, and enter state 34
	'{'            shift, and enter state 35
	'}'            reduce using rule 49

	expr           goto state 119
	lval           goto state 21
	exprs          goto state 135

State 120

	expr -> '{' vars exprs . '}'                        (rule 27)

	'}'            shift, and enter state 134


State 121

	func_decl -> funcs '{' func_list . '}'              (rule 17)

	'}'            shift, and enter state 133


State 122

	func_list -> func . func_list                       (rule 19)

	id             shift, and enter state 123
	idc            shift, and enter state 124
	'}'            reduce using rule 18

	func_list      goto state 132
	func           goto state 122

State 123

	func -> id . '(' params ')' ':' type_reg expr       (rule 20)

	'('            shift, and enter state 131


State 124

	func -> idc . params ')' ':' type_reg expr          (rule 21)

	id             shift, and enter state 130
	')'            reduce using rule 22

	params         goto state 128
	param          goto state 129

State 125

	state_var -> id ':' type_state . '=' expr           (rule 15)

	'='            shift, and enter state 127


State 126

	type_state -> type_reg .                            (rule 82)

	'='            reduce using rule 82


State 127

	state_var -> id ':' type_state '=' . expr           (rule 15)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 176
	lval           goto state 21

State 128

	func -> idc params . ')' ':' type_reg expr          (rule 21)

	')'            shift, and enter state 175


State 129

	params -> param .                                   (rule 23)
	params -> param . ',' params                        (rule 24)

	')'            reduce using rule 23
	','            shift, and enter state 174


State 130

	param -> id . ':' type_reg                          (rule 25)

	':'            shift, and enter state 173


State 131

	func -> id '(' . params ')' ':' type_reg expr       (rule 20)

	id             shift, and enter state 130
	')'            reduce using rule 22

	params         goto state 172
	param          goto state 129

State 132

	func_list -> func func_list .                       (rule 19)

	'}'            reduce using rule 19


State 133

	func_decl -> funcs '{' func_list '}' .              (rule 17)

	'}'            reduce using rule 17


State 134

	expr -> '{' vars exprs '}' .                        (rule 27)

	funcs          reduce using rule 27
	int            reduce using rule 27
	id             reduce using rule 27
	idc            reduce using rule 27
	Idc            reduce using rule 27
	var            reduce using rule 27
	void           reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	for            reduce using rule 27
	to             reduce using rule 27
	do             reduce using rule 27
	match          reduce using rule 27
	with           reduce using rule 27
	and            reduce using rule 27
	or             reduce using rule 27
	trans          reduce using rule 27
	shrink         reduce using rule 27
	ext            reduce using rule 27
	sext           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'&'            reduce using rule 27
	'|'            reduce using rule 27
	'^'            reduce using rule 27
	'='            reduce using rule 27
	'/='           reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	'_'            reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	'<$'           reduce using rule 27
	'<=$'          reduce using rule 27
	'>$'           reduce using rule 27
	'>=$'          reduce using rule 27


State 135

	exprs -> expr exprs .                               (rule 50)

	'}'            reduce using rule 50


State 136

	var_decl -> var id ':' . type_reg '=' expr          (rule 53)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_reg       goto state 171

State 137

	expr -> sext '[' int ']' . '(' expr ')'             (rule 37)

	'('            shift, and enter state 170


State 138

	expr -> ext '[' int ']' . '(' expr ')'              (rule 36)

	'('            shift, and enter state 169


State 139

	expr -> shrink '[' int ']' . '(' expr ')'           (rule 38)

	'('            shift, and enter state 168


State 140

	expr -> trans '[' int ',' . int ']' '(' expr ')'    (rule 35)

	int            shift, and enter state 167


State 141

	expr -> match expr with '{' . cases '}'             (rule 34)

	int            shift, and enter state 164
	id             shift, and enter state 165
	'}'            reduce using rule 57
	'_'            shift, and enter state 166

	cases          goto state 161
	case           goto state 162
	pat            goto state 163

State 142

	expr -> for id '=' expr . to expr do expr           (rule 29)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	to             shift, and enter state 160
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 143

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	pred -> expr comp expr .                            (rule 71)

	then           reduce using rule 71
	and            reduce using rule 71
	or             reduce using rule 71
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 144

	pred -> pred . and pred                             (rule 69)
	pred -> pred . or pred                              (rule 70)
	pred -> pred or pred .                              (rule 70)

	then           reduce using rule 70
	and            shift, and enter state 97
	or             reduce using rule 70


State 145

	pred -> pred . and pred                             (rule 69)
	pred -> pred and pred .                             (rule 69)
	pred -> pred . or pred                              (rule 70)

	then           reduce using rule 69
	and            reduce using rule 69
	or             reduce using rule 69


State 146

	expr -> if pred then expr . else expr               (rule 28)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	else           shift, and enter state 159
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 147

	args -> expr ',' args .                             (rule 56)

	')'            reduce using rule 56


State 148

	lval -> id '[' expr ']' .                           (rule 48)

	'<-'           reduce using rule 48


State 149

	expr -> id '.' idc args . ')'                       (rule 33)

	')'            shift, and enter state 158


State 150

	type_cases -> type_case ',' type_cases .            (rule 7)

	'}'            reduce using rule 7


State 151

	type_reg -> range '[' . int ',' int ']'             (rule 84)

	int            shift, and enter state 157


State 152

	type_reg -> bits '[' . int ']'                      (rule 83)

	int            shift, and enter state 156


State 153

	type_vars -> type_reg ',' . type_vars               (rule 11)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_vars      goto state 155
	type_reg       goto state 77

State 154

	type_case -> Idc type_vars ')' .                    (rule 9)

	'}'            reduce using rule 9
	','            reduce using rule 9


State 155

	type_vars -> type_reg ',' type_vars .               (rule 11)

	')'            reduce using rule 11


State 156

	type_reg -> bits '[' int . ']'                      (rule 83)

	']'            shift, and enter state 193


State 157

	type_reg -> range '[' int . ',' int ']'             (rule 84)

	','            shift, and enter state 192


State 158

	expr -> id '.' idc args ')' .                       (rule 33)

	funcs          reduce using rule 33
	int            reduce using rule 33
	id             reduce using rule 33
	idc            reduce using rule 33
	Idc            reduce using rule 33
	var            reduce using rule 33
	void           reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	for            reduce using rule 33
	to             reduce using rule 33
	do             reduce using rule 33
	match          reduce using rule 33
	with           reduce using rule 33
	and            reduce using rule 33
	or             reduce using rule 33
	trans          reduce using rule 33
	shrink         reduce using rule 33
	ext            reduce using rule 33
	sext           reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'&'            reduce using rule 33
	'|'            reduce using rule 33
	'^'            reduce using rule 33
	'='            reduce using rule 33
	'/='           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	'_'            reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<$'           reduce using rule 33
	'<=$'          reduce using rule 33
	'>$'           reduce using rule 33
	'>=$'          reduce using rule 33


State 159

	expr -> if pred then expr else . expr               (rule 28)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 191
	lval           goto state 21

State 160

	expr -> for id '=' expr to . expr do expr           (rule 29)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 190
	lval           goto state 21

State 161

	expr -> match expr with '{' cases . '}'             (rule 34)

	'}'            shift, and enter state 189


State 162

	cases -> case . cases                               (rule 58)

	int            shift, and enter state 164
	id             shift, and enter state 165
	'}'            reduce using rule 57
	'_'            shift, and enter state 166

	cases          goto state 188
	case           goto state 162
	pat            goto state 163

State 163

	case -> pat . '->' expr                             (rule 59)

	'->'           shift, and enter state 187


State 164

	pat -> int .                                        (rule 61)

	','            reduce using rule 61
	'->'           reduce using rule 61


State 165

	pat -> id .                                         (rule 62)
	pat -> id . '(' pats ')'                            (rule 63)

	'('            shift, and enter state 186
	','            reduce using rule 62
	'->'           reduce using rule 62


State 166

	pat -> '_' .                                        (rule 60)

	','            reduce using rule 60
	'->'           reduce using rule 60


State 167

	expr -> trans '[' int ',' int . ']' '(' expr ')'    (rule 35)

	']'            shift, and enter state 185


State 168

	expr -> shrink '[' int ']' '(' . expr ')'           (rule 38)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 184
	lval           goto state 21

State 169

	expr -> ext '[' int ']' '(' . expr ')'              (rule 36)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 183
	lval           goto state 21

State 170

	expr -> sext '[' int ']' '(' . expr ')'             (rule 37)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 182
	lval           goto state 21

State 171

	var_decl -> var id ':' type_reg . '=' expr          (rule 53)

	'='            shift, and enter state 181


State 172

	func -> id '(' params . ')' ':' type_reg expr       (rule 20)

	')'            shift, and enter state 180


State 173

	param -> id ':' . type_reg                          (rule 25)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_reg       goto state 179

State 174

	params -> param ',' . params                        (rule 24)

	id             shift, and enter state 130
	')'            reduce using rule 22

	params         goto state 178
	param          goto state 129

State 175

	func -> idc params ')' . ':' type_reg expr          (rule 21)

	':'            shift, and enter state 177


State 176

	state_var -> id ':' type_state '=' expr .           (rule 15)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	id             reduce using rule 15
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'}'            reduce using rule 15


State 177

	func -> idc params ')' ':' . type_reg expr          (rule 21)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_reg       goto state 205

State 178

	params -> param ',' params .                        (rule 24)

	')'            reduce using rule 24


State 179

	param -> id ':' type_reg .                          (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25


State 180

	func -> id '(' params ')' . ':' type_reg expr       (rule 20)

	':'            shift, and enter state 204


State 181

	var_decl -> var id ':' type_reg '=' . expr          (rule 53)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 203
	lval           goto state 21

State 182

	expr -> sext '[' int ']' '(' expr . ')'             (rule 37)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            shift, and enter state 202


State 183

	expr -> ext '[' int ']' '(' expr . ')'              (rule 36)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            shift, and enter state 201


State 184

	expr -> shrink '[' int ']' '(' expr . ')'           (rule 38)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            shift, and enter state 200


State 185

	expr -> trans '[' int ',' int ']' . '(' expr ')'    (rule 35)

	'('            shift, and enter state 199


State 186

	pat -> id '(' . pats ')'                            (rule 63)

	int            shift, and enter state 164
	id             shift, and enter state 165
	')'            reduce using rule 64
	'_'            shift, and enter state 166

	pat            goto state 197
	pats           goto state 198

State 187

	case -> pat '->' . expr                             (rule 59)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 196
	lval           goto state 21

State 188

	cases -> case cases .                               (rule 58)

	'}'            reduce using rule 58


State 189

	expr -> match expr with '{' cases '}' .             (rule 34)

	funcs          reduce using rule 34
	int            reduce using rule 34
	id             reduce using rule 34
	idc            reduce using rule 34
	Idc            reduce using rule 34
	var            reduce using rule 34
	void           reduce using rule 34
	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	for            reduce using rule 34
	to             reduce using rule 34
	do             reduce using rule 34
	match          reduce using rule 34
	with           reduce using rule 34
	and            reduce using rule 34
	or             reduce using rule 34
	trans          reduce using rule 34
	shrink         reduce using rule 34
	ext            reduce using rule 34
	sext           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'&'            reduce using rule 34
	'|'            reduce using rule 34
	'^'            reduce using rule 34
	'='            reduce using rule 34
	'/='           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	'_'            reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	'<$'           reduce using rule 34
	'<=$'          reduce using rule 34
	'>$'           reduce using rule 34
	'>=$'          reduce using rule 34


State 190

	expr -> for id '=' expr to expr . do expr           (rule 29)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	do             shift, and enter state 195
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71


State 191

	expr -> if pred then expr else expr .               (rule 28)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 28
	int            reduce using rule 28
	id             reduce using rule 28
	idc            reduce using rule 28
	Idc            reduce using rule 28
	var            reduce using rule 28
	void           reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	for            reduce using rule 28
	to             reduce using rule 28
	do             reduce using rule 28
	match          reduce using rule 28
	with           reduce using rule 28
	and            reduce using rule 28
	or             reduce using rule 28
	trans          reduce using rule 28
	shrink         reduce using rule 28
	ext            reduce using rule 28
	sext           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'&'            reduce using rule 28
	'|'            reduce using rule 28
	'^'            reduce using rule 28
	'='            reduce using rule 28
	'/='           reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	'_'            reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'<$'           reduce using rule 28
	'<=$'          reduce using rule 28
	'>$'           reduce using rule 28
	'>=$'          reduce using rule 28


State 192

	type_reg -> range '[' int ',' . int ']'             (rule 84)

	int            shift, and enter state 194


State 193

	type_reg -> bits '[' int ']' .                      (rule 83)

	int            reduce using rule 83
	id             reduce using rule 83
	idc            reduce using rule 83
	Idc            reduce using rule 83
	void           reduce using rule 83
	if             reduce using rule 83
	for            reduce using rule 83
	match          reduce using rule 83
	trans          reduce using rule 83
	shrink         reduce using rule 83
	ext            reduce using rule 83
	sext           reduce using rule 83
	'='            reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'{'            reduce using rule 83
	','            reduce using rule 83


State 194

	type_reg -> range '[' int ',' int . ']'             (rule 84)

	']'            shift, and enter state 212


State 195

	expr -> for id '=' expr to expr do . expr           (rule 29)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 211
	lval           goto state 21

State 196

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	case -> pat '->' expr .                             (rule 59)

	int            reduce using rule 59
	id             reduce using rule 59
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'}'            reduce using rule 59
	'_'            reduce using rule 59


State 197

	pats -> pat . ',' pats                              (rule 65)

	','            shift, and enter state 210


State 198

	pat -> id '(' pats . ')'                            (rule 63)

	')'            shift, and enter state 209


State 199

	expr -> trans '[' int ',' int ']' '(' . expr ')'    (rule 35)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 208
	lval           goto state 21

State 200

	expr -> shrink '[' int ']' '(' expr ')' .           (rule 38)

	funcs          reduce using rule 38
	int            reduce using rule 38
	id             reduce using rule 38
	idc            reduce using rule 38
	Idc            reduce using rule 38
	var            reduce using rule 38
	void           reduce using rule 38
	if             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	for            reduce using rule 38
	to             reduce using rule 38
	do             reduce using rule 38
	match          reduce using rule 38
	with           reduce using rule 38
	and            reduce using rule 38
	or             reduce using rule 38
	trans          reduce using rule 38
	shrink         reduce using rule 38
	ext            reduce using rule 38
	sext           reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	'^'            reduce using rule 38
	'='            reduce using rule 38
	'/='           reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	'_'            reduce using rule 38
	'<'            reduce using rule 38
	'>'            reduce using rule 38
	'<='           reduce using rule 38
	'>='           reduce using rule 38
	'<$'           reduce using rule 38
	'<=$'          reduce using rule 38
	'>$'           reduce using rule 38
	'>=$'          reduce using rule 38


State 201

	expr -> ext '[' int ']' '(' expr ')' .              (rule 36)

	funcs          reduce using rule 36
	int            reduce using rule 36
	id             reduce using rule 36
	idc            reduce using rule 36
	Idc            reduce using rule 36
	var            reduce using rule 36
	void           reduce using rule 36
	if             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	for            reduce using rule 36
	to             reduce using rule 36
	do             reduce using rule 36
	match          reduce using rule 36
	with           reduce using rule 36
	and            reduce using rule 36
	or             reduce using rule 36
	trans          reduce using rule 36
	shrink         reduce using rule 36
	ext            reduce using rule 36
	sext           reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'&'            reduce using rule 36
	'|'            reduce using rule 36
	'^'            reduce using rule 36
	'='            reduce using rule 36
	'/='           reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	'_'            reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36
	'<='           reduce using rule 36
	'>='           reduce using rule 36
	'<$'           reduce using rule 36
	'<=$'          reduce using rule 36
	'>$'           reduce using rule 36
	'>=$'          reduce using rule 36


State 202

	expr -> sext '[' int ']' '(' expr ')' .             (rule 37)

	funcs          reduce using rule 37
	int            reduce using rule 37
	id             reduce using rule 37
	idc            reduce using rule 37
	Idc            reduce using rule 37
	var            reduce using rule 37
	void           reduce using rule 37
	if             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	for            reduce using rule 37
	to             reduce using rule 37
	do             reduce using rule 37
	match          reduce using rule 37
	with           reduce using rule 37
	and            reduce using rule 37
	or             reduce using rule 37
	trans          reduce using rule 37
	shrink         reduce using rule 37
	ext            reduce using rule 37
	sext           reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'&'            reduce using rule 37
	'|'            reduce using rule 37
	'^'            reduce using rule 37
	'='            reduce using rule 37
	'/='           reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	'_'            reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37
	'<='           reduce using rule 37
	'>='           reduce using rule 37
	'<$'           reduce using rule 37
	'<=$'          reduce using rule 37
	'>$'           reduce using rule 37
	'>=$'          reduce using rule 37


State 203

	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)
	var_decl -> var id ':' type_reg '=' expr .          (rule 53)

	int            reduce using rule 53
	id             reduce using rule 53
	idc            reduce using rule 53
	Idc            reduce using rule 53
	var            reduce using rule 53
	void           reduce using rule 53
	if             reduce using rule 53
	for            reduce using rule 53
	match          reduce using rule 53
	trans          reduce using rule 53
	shrink         reduce using rule 53
	ext            reduce using rule 53
	sext           reduce using rule 53
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'('            reduce using rule 53
	'{'            reduce using rule 53
	'}'            reduce using rule 53


State 204

	func -> id '(' params ')' ':' . type_reg expr       (rule 20)

	Id             shift, and enter state 78
	bits           shift, and enter state 79
	range          shift, and enter state 80
	void           shift, and enter state 81

	type_reg       goto state 207

State 205

	func -> idc params ')' ':' type_reg . expr          (rule 21)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 206
	lval           goto state 21

State 206

	func -> idc params ')' ':' type_reg expr .          (rule 21)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	id             reduce using rule 21
	idc            reduce using rule 21
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'}'            reduce using rule 21


State 207

	func -> id '(' params ')' ':' type_reg . expr       (rule 20)

	int            shift, and enter state 22
	id             shift, and enter state 23
	idc            shift, and enter state 24
	Idc            shift, and enter state 25
	void           shift, and enter state 26
	if             shift, and enter state 27
	for            shift, and enter state 28
	match          shift, and enter state 29
	trans          shift, and enter state 30
	shrink         shift, and enter state 31
	ext            shift, and enter state 32
	sext           shift, and enter state 33
	'('            shift, and enter state 34
	'{'            shift, and enter state 35

	expr           goto state 215
	lval           goto state 21

State 208

	expr -> trans '[' int ',' int ']' '(' expr . ')'    (rule 35)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	')'            shift, and enter state 214


State 209

	pat -> id '(' pats ')' .                            (rule 63)

	','            reduce using rule 63
	'->'           reduce using rule 63


State 210

	pats -> pat ',' . pats                              (rule 65)

	int            shift, and enter state 164
	id             shift, and enter state 165
	')'            reduce using rule 64
	'_'            shift, and enter state 166

	pat            goto state 197
	pats           goto state 213

State 211

	expr -> for id '=' expr to expr do expr .           (rule 29)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	funcs          reduce using rule 29
	int            reduce using rule 29
	id             reduce using rule 29
	idc            reduce using rule 29
	Idc            reduce using rule 29
	var            reduce using rule 29
	void           reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	for            reduce using rule 29
	to             reduce using rule 29
	do             reduce using rule 29
	match          reduce using rule 29
	with           reduce using rule 29
	and            reduce using rule 29
	or             reduce using rule 29
	trans          reduce using rule 29
	shrink         reduce using rule 29
	ext            reduce using rule 29
	sext           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'&'            reduce using rule 29
	'|'            reduce using rule 29
	'^'            reduce using rule 29
	'='            reduce using rule 29
	'/='           reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	'_'            reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	'<$'           reduce using rule 29
	'<=$'          reduce using rule 29
	'>$'           reduce using rule 29
	'>=$'          reduce using rule 29


State 212

	type_reg -> range '[' int ',' int ']' .             (rule 84)

	int            reduce using rule 84
	id             reduce using rule 84
	idc            reduce using rule 84
	Idc            reduce using rule 84
	void           reduce using rule 84
	if             reduce using rule 84
	for            reduce using rule 84
	match          reduce using rule 84
	trans          reduce using rule 84
	shrink         reduce using rule 84
	ext            reduce using rule 84
	sext           reduce using rule 84
	'='            reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	'{'            reduce using rule 84
	','            reduce using rule 84


State 213

	pats -> pat ',' pats .                              (rule 65)

	')'            reduce using rule 65


State 214

	expr -> trans '[' int ',' int ']' '(' expr ')' .    (rule 35)

	funcs          reduce using rule 35
	int            reduce using rule 35
	id             reduce using rule 35
	idc            reduce using rule 35
	Idc            reduce using rule 35
	var            reduce using rule 35
	void           reduce using rule 35
	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	for            reduce using rule 35
	to             reduce using rule 35
	do             reduce using rule 35
	match          reduce using rule 35
	with           reduce using rule 35
	and            reduce using rule 35
	or             reduce using rule 35
	trans          reduce using rule 35
	shrink         reduce using rule 35
	ext            reduce using rule 35
	sext           reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'&'            reduce using rule 35
	'|'            reduce using rule 35
	'^'            reduce using rule 35
	'='            reduce using rule 35
	'/='           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	'_'            reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	'<$'           reduce using rule 35
	'<=$'          reduce using rule 35
	'>$'           reduce using rule 35
	'>=$'          reduce using rule 35


State 215

	func -> id '(' params ')' ':' type_reg expr .       (rule 20)
	expr -> expr . '+' expr                             (rule 39)
	expr -> expr . '-' expr                             (rule 40)
	expr -> expr . '&' expr                             (rule 41)
	expr -> expr . '^' expr                             (rule 42)
	expr -> expr . '|' expr                             (rule 43)

	id             reduce using rule 20
	idc            reduce using rule 20
	'+'            shift, and enter state 67
	'-'            shift, and enter state 68
	'&'            shift, and enter state 69
	'|'            shift, and enter state 70
	'^'            shift, and enter state 71
	'}'            reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 87
Number of terminals: 58
Number of non-terminals: 31
Number of states: 216
