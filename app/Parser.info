-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> mode_decl                          (0)
	mode_decl -> mode id '{' state_decl main_decl '}'   (1)
	state_decl -> state '{' state_vars '}'             (2)
	state_vars ->                                      (3)
	state_vars -> state_var state_vars                 (4)
	state_var -> id ':' type_reg '=' expr              (5)
	main_decl -> main expr                             (6)
	expr -> int                                        (7)
	expr -> '{' vars exprs '}'                         (8)
	expr -> if pred then expr else expr                (9)
	expr -> for id '=' expr to expr do expr            (10)
	expr -> lval '<-' expr                             (11)
	expr -> idc args ')'                               (12)
	expr -> id '.' idc args ')'                        (13)
	expr -> match expr with '{' cases '}'              (14)
	expr -> trans '[' int ',' int ']' '(' expr ')'     (15)
	expr -> ext '[' int ']' '(' expr ')'               (16)
	expr -> sext '[' int ']' '(' expr ')'              (17)
	expr -> shrink '[' int ']' '(' expr ')'            (18)
	expr -> expr '+' expr                              (19)
	expr -> expr '-' expr                              (20)
	expr -> expr '&' expr                              (21)
	expr -> expr '^' expr                              (22)
	expr -> expr '|' expr                              (23)
	expr -> id                                         (24)
	expr -> '(' expr ')'                               (25)
	expr -> void                                       (26)
	lval -> id                                         (27)
	lval -> id '[' expr ']'                            (28)
	exprs ->                                           (29)
	exprs -> expr exprs                                (30)
	vars ->                                            (31)
	vars -> var_decl vars                              (32)
	var_decl -> var id ':' type_reg '=' expr           (33)
	args ->                                            (34)
	args -> expr                                       (35)
	args -> expr ',' args                              (36)
	cases ->                                           (37)
	cases -> case cases                                (38)
	case -> pat '->' expr                              (39)
	pat -> '_'                                         (40)
	pat -> int                                         (41)
	pat -> id                                          (42)
	pat -> id '(' pats ')'                             (43)
	pats ->                                            (44)
	pats -> pat ',' pats                               (45)
	pred -> true                                       (46)
	pred -> false                                      (47)
	pred -> not pred                                   (48)
	pred -> pred and pred                              (49)
	pred -> pred or pred                               (50)
	pred -> expr comp expr                             (51)
	comp -> '='                                        (52)
	comp -> '/='                                       (53)
	comp -> '<'                                        (54)
	comp -> '>'                                        (55)
	comp -> '<='                                       (56)
	comp -> '>='                                       (57)
	comp -> '<$'                                       (58)
	comp -> '>$'                                       (59)
	comp -> '<=$'                                      (60)
	comp -> '>=$'                                      (61)
	type_reg -> bits '[' int ']'                       (62)
	type_reg -> range '[' int ',' int ']'              (63)
	type_reg -> data id                                (64)
	type_reg -> void                                   (65)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	mode           { TokenMode }
	state          { TokenState }
	main           { TokenMain }
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	data           { TokenData }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'&'            { TokenAmphersand }
	'|'            { TokenPipe }
	'^'            { TokenCaret }
	'='            { TokenEq }
	'/='           { TokenNeq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	mode_decl       rule  1
	state_decl      rule  2
	state_vars      rules 3, 4
	state_var       rule  5
	main_decl       rule  6
	expr            rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	lval            rules 27, 28
	exprs           rules 29, 30
	vars            rules 31, 32
	var_decl        rule  33
	args            rules 34, 35, 36
	cases           rules 37, 38
	case            rule  39
	pat             rules 40, 41, 42, 43
	pats            rules 44, 45
	pred            rules 46, 47, 48, 49, 50, 51
	comp            rules 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
	type_reg        rules 62, 63, 64, 65

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . mode_decl                         (rule 0)

	mode           shift, and enter state 2

	mode_decl      goto state 3

State 1

	mode_decl -> . mode id '{' state_decl main_decl '}'    (rule 1)

	mode           shift, and enter state 2


State 2

	mode_decl -> mode . id '{' state_decl main_decl '}'    (rule 1)

	id             shift, and enter state 4


State 3

	%start_parse -> mode_decl .                         (rule 0)

	%eof           accept


State 4

	mode_decl -> mode id . '{' state_decl main_decl '}'    (rule 1)

	'{'            shift, and enter state 5


State 5

	mode_decl -> mode id '{' . state_decl main_decl '}'    (rule 1)

	state          shift, and enter state 7

	state_decl     goto state 6

State 6

	mode_decl -> mode id '{' state_decl . main_decl '}'    (rule 1)

	main           shift, and enter state 10

	main_decl      goto state 9

State 7

	state_decl -> state . '{' state_vars '}'            (rule 2)

	'{'            shift, and enter state 8


State 8

	state_decl -> state '{' . state_vars '}'            (rule 2)

	id             shift, and enter state 29
	'}'            reduce using rule 3

	state_vars     goto state 27
	state_var      goto state 28

State 9

	mode_decl -> mode id '{' state_decl main_decl . '}'    (rule 1)

	'}'            shift, and enter state 26


State 10

	main_decl -> main . expr                            (rule 6)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 11
	lval           goto state 12

State 11

	main_decl -> main expr .                            (rule 6)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'}'            reduce using rule 6


State 12

	expr -> lval . '<-' expr                            (rule 11)

	'<-'           shift, and enter state 52


State 13

	expr -> int .                                       (rule 7)

	int            reduce using rule 7
	id             reduce using rule 7
	idc            reduce using rule 7
	var            reduce using rule 7
	void           reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	for            reduce using rule 7
	to             reduce using rule 7
	do             reduce using rule 7
	match          reduce using rule 7
	with           reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	trans          reduce using rule 7
	shrink         reduce using rule 7
	ext            reduce using rule 7
	sext           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'^'            reduce using rule 7
	'='            reduce using rule 7
	'/='           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	'_'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'<$'           reduce using rule 7
	'<=$'          reduce using rule 7
	'>$'           reduce using rule 7
	'>=$'          reduce using rule 7


State 14

	expr -> id . '.' idc args ')'                       (rule 13)
	expr -> id .                                        (rule 24)
	lval -> id .                                        (rule 27)
	lval -> id . '[' expr ']'                           (rule 28)

	int            reduce using rule 24
	id             reduce using rule 24
	idc            reduce using rule 24
	var            reduce using rule 24
	void           reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	for            reduce using rule 24
	to             reduce using rule 24
	do             reduce using rule 24
	match          reduce using rule 24
	with           reduce using rule 24
	and            reduce using rule 24
	or             reduce using rule 24
	trans          reduce using rule 24
	shrink         reduce using rule 24
	ext            reduce using rule 24
	sext           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'&'            reduce using rule 24
	'|'            reduce using rule 24
	'^'            reduce using rule 24
	'='            reduce using rule 24
	'/='           reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'['            shift, and enter state 50
	']'            reduce using rule 24
	','            reduce using rule 24
	'.'            shift, and enter state 51
	'_'            reduce using rule 24
	'<-'           reduce using rule 27
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'<='           reduce using rule 24
	'>='           reduce using rule 24
	'<$'           reduce using rule 24
	'<=$'          reduce using rule 24
	'>$'           reduce using rule 24
	'>=$'          reduce using rule 24


State 15

	expr -> idc . args ')'                              (rule 12)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 34
	'{'            shift, and enter state 25

	expr           goto state 48
	lval           goto state 12
	args           goto state 49

State 16

	expr -> void .                                      (rule 26)

	int            reduce using rule 26
	id             reduce using rule 26
	idc            reduce using rule 26
	var            reduce using rule 26
	void           reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	for            reduce using rule 26
	to             reduce using rule 26
	do             reduce using rule 26
	match          reduce using rule 26
	with           reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	trans          reduce using rule 26
	shrink         reduce using rule 26
	ext            reduce using rule 26
	sext           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'&'            reduce using rule 26
	'|'            reduce using rule 26
	'^'            reduce using rule 26
	'='            reduce using rule 26
	'/='           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	'_'            reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'<$'           reduce using rule 26
	'<=$'          reduce using rule 26
	'>$'           reduce using rule 26
	'>=$'          reduce using rule 26


State 17

	expr -> if . pred then expr else expr               (rule 9)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 45
	false          shift, and enter state 46
	not            shift, and enter state 47
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 43
	lval           goto state 12
	pred           goto state 44

State 18

	expr -> for . id '=' expr to expr do expr           (rule 10)

	id             shift, and enter state 42


State 19

	expr -> match . expr with '{' cases '}'             (rule 14)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 41
	lval           goto state 12

State 20

	expr -> trans . '[' int ',' int ']' '(' expr ')'    (rule 15)

	'['            shift, and enter state 40


State 21

	expr -> shrink . '[' int ']' '(' expr ')'           (rule 18)

	'['            shift, and enter state 39


State 22

	expr -> ext . '[' int ']' '(' expr ')'              (rule 16)

	'['            shift, and enter state 38


State 23

	expr -> sext . '[' int ']' '(' expr ')'             (rule 17)

	'['            shift, and enter state 37


State 24

	expr -> '(' . expr ')'                              (rule 25)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 36
	lval           goto state 12

State 25

	expr -> '{' . vars exprs '}'                        (rule 8)

	int            reduce using rule 31
	id             reduce using rule 31
	idc            reduce using rule 31
	var            shift, and enter state 35
	void           reduce using rule 31
	if             reduce using rule 31
	for            reduce using rule 31
	match          reduce using rule 31
	trans          reduce using rule 31
	shrink         reduce using rule 31
	ext            reduce using rule 31
	sext           reduce using rule 31
	'('            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31

	vars           goto state 33
	var_decl       goto state 34

State 26

	mode_decl -> mode id '{' state_decl main_decl '}' .    (rule 1)

	%eof           reduce using rule 1


State 27

	state_decl -> state '{' state_vars . '}'            (rule 2)

	'}'            shift, and enter state 32


State 28

	state_vars -> state_var . state_vars                (rule 4)

	id             shift, and enter state 29
	'}'            reduce using rule 3

	state_vars     goto state 31
	state_var      goto state 28

State 29

	state_var -> id . ':' type_reg '=' expr             (rule 5)

	':'            shift, and enter state 30


State 30

	state_var -> id ':' . type_reg '=' expr             (rule 5)

	bits           shift, and enter state 95
	range          shift, and enter state 96
	data           shift, and enter state 97
	void           shift, and enter state 98

	type_reg       goto state 94

State 31

	state_vars -> state_var state_vars .                (rule 4)

	'}'            reduce using rule 4


State 32

	state_decl -> state '{' state_vars '}' .            (rule 2)

	main           reduce using rule 2


State 33

	expr -> '{' vars . exprs '}'                        (rule 8)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25
	'}'            reduce using rule 29

	expr           goto state 92
	lval           goto state 12
	exprs          goto state 93

State 34

	vars -> var_decl . vars                             (rule 32)

	int            reduce using rule 31
	id             reduce using rule 31
	idc            reduce using rule 31
	var            shift, and enter state 35
	void           reduce using rule 31
	if             reduce using rule 31
	for            reduce using rule 31
	match          reduce using rule 31
	trans          reduce using rule 31
	shrink         reduce using rule 31
	ext            reduce using rule 31
	sext           reduce using rule 31
	'('            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31

	vars           goto state 91
	var_decl       goto state 34

State 35

	var_decl -> var . id ':' type_reg '=' expr          (rule 33)

	id             shift, and enter state 90


State 36

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> '(' expr . ')'                              (rule 25)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            shift, and enter state 89


State 37

	expr -> sext '[' . int ']' '(' expr ')'             (rule 17)

	int            shift, and enter state 88


State 38

	expr -> ext '[' . int ']' '(' expr ')'              (rule 16)

	int            shift, and enter state 87


State 39

	expr -> shrink '[' . int ']' '(' expr ')'           (rule 18)

	int            shift, and enter state 86


State 40

	expr -> trans '[' . int ',' int ']' '(' expr ')'    (rule 15)

	int            shift, and enter state 85


State 41

	expr -> match expr . with '{' cases '}'             (rule 14)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	with           shift, and enter state 84
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57


State 42

	expr -> for id . '=' expr to expr do expr           (rule 10)

	'='            shift, and enter state 83


State 43

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	pred -> expr . comp expr                            (rule 51)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            shift, and enter state 73
	'/='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76
	'<='           shift, and enter state 77
	'>='           shift, and enter state 78
	'<$'           shift, and enter state 79
	'<=$'          shift, and enter state 80
	'>$'           shift, and enter state 81
	'>=$'          shift, and enter state 82

	comp           goto state 72

State 44

	expr -> if pred . then expr else expr               (rule 9)
	pred -> pred . and pred                             (rule 49)
	pred -> pred . or pred                              (rule 50)

	then           shift, and enter state 69
	and            shift, and enter state 70
	or             shift, and enter state 71


State 45

	pred -> true .                                      (rule 46)

	then           reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46


State 46

	pred -> false .                                     (rule 47)

	then           reduce using rule 47
	and            reduce using rule 47
	or             reduce using rule 47


State 47

	pred -> not . pred                                  (rule 48)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 45
	false          shift, and enter state 46
	not            shift, and enter state 47
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 43
	lval           goto state 12
	pred           goto state 68

State 48

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	args -> expr .                                      (rule 35)
	args -> expr . ',' args                             (rule 36)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            reduce using rule 35
	','            shift, and enter state 67


State 49

	expr -> idc args . ')'                              (rule 12)

	')'            shift, and enter state 66


State 50

	lval -> id '[' . expr ']'                           (rule 28)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 65
	lval           goto state 12

State 51

	expr -> id '.' . idc args ')'                       (rule 13)

	idc            shift, and enter state 64


State 52

	expr -> lval '<-' . expr                            (rule 11)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 63
	lval           goto state 12

State 53

	expr -> expr '+' . expr                             (rule 19)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 62
	lval           goto state 12

State 54

	expr -> expr '-' . expr                             (rule 20)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 61
	lval           goto state 12

State 55

	expr -> expr '&' . expr                             (rule 21)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 60
	lval           goto state 12

State 56

	expr -> expr '|' . expr                             (rule 23)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 59
	lval           goto state 12

State 57

	expr -> expr '^' . expr                             (rule 22)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 58
	lval           goto state 12

State 58

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr '^' expr .                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 22
	id             reduce using rule 22
	idc            reduce using rule 22
	var            reduce using rule 22
	void           reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	for            reduce using rule 22
	to             reduce using rule 22
	do             reduce using rule 22
	match          reduce using rule 22
	with           reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	trans          reduce using rule 22
	shrink         reduce using rule 22
	ext            reduce using rule 22
	sext           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'&'            reduce using rule 22
	'|'            shift, and enter state 56
	'^'            reduce using rule 22
	'='            reduce using rule 22
	'/='           reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	'_'            reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	'<='           reduce using rule 22
	'>='           reduce using rule 22
	'<$'           reduce using rule 22
	'<=$'          reduce using rule 22
	'>$'           reduce using rule 22
	'>=$'          reduce using rule 22


State 59

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	expr -> expr '|' expr .                             (rule 23)

	int            reduce using rule 23
	id             reduce using rule 23
	idc            reduce using rule 23
	var            reduce using rule 23
	void           reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	for            reduce using rule 23
	to             reduce using rule 23
	do             reduce using rule 23
	match          reduce using rule 23
	with           reduce using rule 23
	and            reduce using rule 23
	or             reduce using rule 23
	trans          reduce using rule 23
	shrink         reduce using rule 23
	ext            reduce using rule 23
	sext           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'&'            reduce using rule 23
	'|'            reduce using rule 23
	'^'            reduce using rule 23
	'='            reduce using rule 23
	'/='           reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	'_'            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'<$'           reduce using rule 23
	'<=$'          reduce using rule 23
	'>$'           reduce using rule 23
	'>=$'          reduce using rule 23


State 60

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr '&' expr .                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 21
	id             reduce using rule 21
	idc            reduce using rule 21
	var            reduce using rule 21
	void           reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	for            reduce using rule 21
	to             reduce using rule 21
	do             reduce using rule 21
	match          reduce using rule 21
	with           reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	trans          reduce using rule 21
	shrink         reduce using rule 21
	ext            reduce using rule 21
	sext           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'&'            reduce using rule 21
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            reduce using rule 21
	'/='           reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	'_'            reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'<='           reduce using rule 21
	'>='           reduce using rule 21
	'<$'           reduce using rule 21
	'<=$'          reduce using rule 21
	'>$'           reduce using rule 21
	'>=$'          reduce using rule 21


State 61

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr '-' expr .                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 20
	id             reduce using rule 20
	idc            reduce using rule 20
	var            reduce using rule 20
	void           reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	for            reduce using rule 20
	to             reduce using rule 20
	do             reduce using rule 20
	match          reduce using rule 20
	with           reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	trans          reduce using rule 20
	shrink         reduce using rule 20
	ext            reduce using rule 20
	sext           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            reduce using rule 20
	'/='           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	'_'            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'<$'           reduce using rule 20
	'<=$'          reduce using rule 20
	'>$'           reduce using rule 20
	'>=$'          reduce using rule 20


State 62

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr '+' expr .                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 19
	id             reduce using rule 19
	idc            reduce using rule 19
	var            reduce using rule 19
	void           reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	for            reduce using rule 19
	to             reduce using rule 19
	do             reduce using rule 19
	match          reduce using rule 19
	with           reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	trans          reduce using rule 19
	shrink         reduce using rule 19
	ext            reduce using rule 19
	sext           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            reduce using rule 19
	'/='           reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	'_'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'<$'           reduce using rule 19
	'<=$'          reduce using rule 19
	'>$'           reduce using rule 19
	'>=$'          reduce using rule 19


State 63

	expr -> lval '<-' expr .                            (rule 11)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 11
	id             reduce using rule 11
	idc            reduce using rule 11
	var            reduce using rule 11
	void           reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	for            reduce using rule 11
	to             reduce using rule 11
	do             reduce using rule 11
	match          reduce using rule 11
	with           reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	trans          reduce using rule 11
	shrink         reduce using rule 11
	ext            reduce using rule 11
	sext           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'&'            reduce using rule 11
	'|'            reduce using rule 11
	'^'            reduce using rule 11
	'='            reduce using rule 11
	'/='           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	'_'            reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'<$'           reduce using rule 11
	'<=$'          reduce using rule 11
	'>$'           reduce using rule 11
	'>=$'          reduce using rule 11


State 64

	expr -> id '.' idc . args ')'                       (rule 13)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 34
	'{'            shift, and enter state 25

	expr           goto state 48
	lval           goto state 12
	args           goto state 118

State 65

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	lval -> id '[' expr . ']'                           (rule 28)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	']'            shift, and enter state 117


State 66

	expr -> idc args ')' .                              (rule 12)

	int            reduce using rule 12
	id             reduce using rule 12
	idc            reduce using rule 12
	var            reduce using rule 12
	void           reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	for            reduce using rule 12
	to             reduce using rule 12
	do             reduce using rule 12
	match          reduce using rule 12
	with           reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	trans          reduce using rule 12
	shrink         reduce using rule 12
	ext            reduce using rule 12
	sext           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'&'            reduce using rule 12
	'|'            reduce using rule 12
	'^'            reduce using rule 12
	'='            reduce using rule 12
	'/='           reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	'_'            reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'<$'           reduce using rule 12
	'<=$'          reduce using rule 12
	'>$'           reduce using rule 12
	'>=$'          reduce using rule 12


State 67

	args -> expr ',' . args                             (rule 36)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 34
	'{'            shift, and enter state 25

	expr           goto state 48
	lval           goto state 12
	args           goto state 116

State 68

	pred -> not pred .                                  (rule 48)
	pred -> pred . and pred                             (rule 49)
	pred -> pred . or pred                              (rule 50)

	then           reduce using rule 48
	and            shift, and enter state 70
	or             shift, and enter state 71


State 69

	expr -> if pred then . expr else expr               (rule 9)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 115
	lval           goto state 12

State 70

	pred -> pred and . pred                             (rule 49)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 45
	false          shift, and enter state 46
	not            shift, and enter state 47
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 43
	lval           goto state 12
	pred           goto state 114

State 71

	pred -> pred or . pred                              (rule 50)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 45
	false          shift, and enter state 46
	not            shift, and enter state 47
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 43
	lval           goto state 12
	pred           goto state 113

State 72

	pred -> expr comp . expr                            (rule 51)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 112
	lval           goto state 12

State 73

	comp -> '=' .                                       (rule 52)

	int            reduce using rule 52
	id             reduce using rule 52
	idc            reduce using rule 52
	void           reduce using rule 52
	if             reduce using rule 52
	for            reduce using rule 52
	match          reduce using rule 52
	trans          reduce using rule 52
	shrink         reduce using rule 52
	ext            reduce using rule 52
	sext           reduce using rule 52
	'('            reduce using rule 52
	'{'            reduce using rule 52


State 74

	comp -> '/=' .                                      (rule 53)

	int            reduce using rule 53
	id             reduce using rule 53
	idc            reduce using rule 53
	void           reduce using rule 53
	if             reduce using rule 53
	for            reduce using rule 53
	match          reduce using rule 53
	trans          reduce using rule 53
	shrink         reduce using rule 53
	ext            reduce using rule 53
	sext           reduce using rule 53
	'('            reduce using rule 53
	'{'            reduce using rule 53


State 75

	comp -> '<' .                                       (rule 54)

	int            reduce using rule 54
	id             reduce using rule 54
	idc            reduce using rule 54
	void           reduce using rule 54
	if             reduce using rule 54
	for            reduce using rule 54
	match          reduce using rule 54
	trans          reduce using rule 54
	shrink         reduce using rule 54
	ext            reduce using rule 54
	sext           reduce using rule 54
	'('            reduce using rule 54
	'{'            reduce using rule 54


State 76

	comp -> '>' .                                       (rule 55)

	int            reduce using rule 55
	id             reduce using rule 55
	idc            reduce using rule 55
	void           reduce using rule 55
	if             reduce using rule 55
	for            reduce using rule 55
	match          reduce using rule 55
	trans          reduce using rule 55
	shrink         reduce using rule 55
	ext            reduce using rule 55
	sext           reduce using rule 55
	'('            reduce using rule 55
	'{'            reduce using rule 55


State 77

	comp -> '<=' .                                      (rule 56)

	int            reduce using rule 56
	id             reduce using rule 56
	idc            reduce using rule 56
	void           reduce using rule 56
	if             reduce using rule 56
	for            reduce using rule 56
	match          reduce using rule 56
	trans          reduce using rule 56
	shrink         reduce using rule 56
	ext            reduce using rule 56
	sext           reduce using rule 56
	'('            reduce using rule 56
	'{'            reduce using rule 56


State 78

	comp -> '>=' .                                      (rule 57)

	int            reduce using rule 57
	id             reduce using rule 57
	idc            reduce using rule 57
	void           reduce using rule 57
	if             reduce using rule 57
	for            reduce using rule 57
	match          reduce using rule 57
	trans          reduce using rule 57
	shrink         reduce using rule 57
	ext            reduce using rule 57
	sext           reduce using rule 57
	'('            reduce using rule 57
	'{'            reduce using rule 57


State 79

	comp -> '<$' .                                      (rule 58)

	int            reduce using rule 58
	id             reduce using rule 58
	idc            reduce using rule 58
	void           reduce using rule 58
	if             reduce using rule 58
	for            reduce using rule 58
	match          reduce using rule 58
	trans          reduce using rule 58
	shrink         reduce using rule 58
	ext            reduce using rule 58
	sext           reduce using rule 58
	'('            reduce using rule 58
	'{'            reduce using rule 58


State 80

	comp -> '<=$' .                                     (rule 60)

	int            reduce using rule 60
	id             reduce using rule 60
	idc            reduce using rule 60
	void           reduce using rule 60
	if             reduce using rule 60
	for            reduce using rule 60
	match          reduce using rule 60
	trans          reduce using rule 60
	shrink         reduce using rule 60
	ext            reduce using rule 60
	sext           reduce using rule 60
	'('            reduce using rule 60
	'{'            reduce using rule 60


State 81

	comp -> '>$' .                                      (rule 59)

	int            reduce using rule 59
	id             reduce using rule 59
	idc            reduce using rule 59
	void           reduce using rule 59
	if             reduce using rule 59
	for            reduce using rule 59
	match          reduce using rule 59
	trans          reduce using rule 59
	shrink         reduce using rule 59
	ext            reduce using rule 59
	sext           reduce using rule 59
	'('            reduce using rule 59
	'{'            reduce using rule 59


State 82

	comp -> '>=$' .                                     (rule 61)

	int            reduce using rule 61
	id             reduce using rule 61
	idc            reduce using rule 61
	void           reduce using rule 61
	if             reduce using rule 61
	for            reduce using rule 61
	match          reduce using rule 61
	trans          reduce using rule 61
	shrink         reduce using rule 61
	ext            reduce using rule 61
	sext           reduce using rule 61
	'('            reduce using rule 61
	'{'            reduce using rule 61


State 83

	expr -> for id '=' . expr to expr do expr           (rule 10)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 111
	lval           goto state 12

State 84

	expr -> match expr with . '{' cases '}'             (rule 14)

	'{'            shift, and enter state 110


State 85

	expr -> trans '[' int . ',' int ']' '(' expr ')'    (rule 15)

	','            shift, and enter state 109


State 86

	expr -> shrink '[' int . ']' '(' expr ')'           (rule 18)

	']'            shift, and enter state 108


State 87

	expr -> ext '[' int . ']' '(' expr ')'              (rule 16)

	']'            shift, and enter state 107


State 88

	expr -> sext '[' int . ']' '(' expr ')'             (rule 17)

	']'            shift, and enter state 106


State 89

	expr -> '(' expr ')' .                              (rule 25)

	int            reduce using rule 25
	id             reduce using rule 25
	idc            reduce using rule 25
	var            reduce using rule 25
	void           reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	for            reduce using rule 25
	to             reduce using rule 25
	do             reduce using rule 25
	match          reduce using rule 25
	with           reduce using rule 25
	and            reduce using rule 25
	or             reduce using rule 25
	trans          reduce using rule 25
	shrink         reduce using rule 25
	ext            reduce using rule 25
	sext           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'&'            reduce using rule 25
	'|'            reduce using rule 25
	'^'            reduce using rule 25
	'='            reduce using rule 25
	'/='           reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	'_'            reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'<$'           reduce using rule 25
	'<=$'          reduce using rule 25
	'>$'           reduce using rule 25
	'>=$'          reduce using rule 25


State 90

	var_decl -> var id . ':' type_reg '=' expr          (rule 33)

	':'            shift, and enter state 105


State 91

	vars -> var_decl vars .                             (rule 32)

	int            reduce using rule 32
	id             reduce using rule 32
	idc            reduce using rule 32
	void           reduce using rule 32
	if             reduce using rule 32
	for            reduce using rule 32
	match          reduce using rule 32
	trans          reduce using rule 32
	shrink         reduce using rule 32
	ext            reduce using rule 32
	sext           reduce using rule 32
	'('            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32


State 92

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	exprs -> expr . exprs                               (rule 30)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'('            shift, and enter state 24
	'{'            shift, and enter state 25
	'}'            reduce using rule 29

	expr           goto state 92
	lval           goto state 12
	exprs          goto state 104

State 93

	expr -> '{' vars exprs . '}'                        (rule 8)

	'}'            shift, and enter state 103


State 94

	state_var -> id ':' type_reg . '=' expr             (rule 5)

	'='            shift, and enter state 102


State 95

	type_reg -> bits . '[' int ']'                      (rule 62)

	'['            shift, and enter state 101


State 96

	type_reg -> range . '[' int ',' int ']'             (rule 63)

	'['            shift, and enter state 100


State 97

	type_reg -> data . id                               (rule 64)

	id             shift, and enter state 99


State 98

	type_reg -> void .                                  (rule 65)

	'='            reduce using rule 65


State 99

	type_reg -> data id .                               (rule 64)

	'='            reduce using rule 64


State 100

	type_reg -> range '[' . int ',' int ']'             (rule 63)

	int            shift, and enter state 135


State 101

	type_reg -> bits '[' . int ']'                      (rule 62)

	int            shift, and enter state 134


State 102

	state_var -> id ':' type_reg '=' . expr             (rule 5)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 133
	lval           goto state 12

State 103

	expr -> '{' vars exprs '}' .                        (rule 8)

	int            reduce using rule 8
	id             reduce using rule 8
	idc            reduce using rule 8
	var            reduce using rule 8
	void           reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	for            reduce using rule 8
	to             reduce using rule 8
	do             reduce using rule 8
	match          reduce using rule 8
	with           reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	trans          reduce using rule 8
	shrink         reduce using rule 8
	ext            reduce using rule 8
	sext           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	'^'            reduce using rule 8
	'='            reduce using rule 8
	'/='           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	'_'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'<$'           reduce using rule 8
	'<=$'          reduce using rule 8
	'>$'           reduce using rule 8
	'>=$'          reduce using rule 8


State 104

	exprs -> expr exprs .                               (rule 30)

	'}'            reduce using rule 30


State 105

	var_decl -> var id ':' . type_reg '=' expr          (rule 33)

	bits           shift, and enter state 95
	range          shift, and enter state 96
	data           shift, and enter state 97
	void           shift, and enter state 98

	type_reg       goto state 132

State 106

	expr -> sext '[' int ']' . '(' expr ')'             (rule 17)

	'('            shift, and enter state 131


State 107

	expr -> ext '[' int ']' . '(' expr ')'              (rule 16)

	'('            shift, and enter state 130


State 108

	expr -> shrink '[' int ']' . '(' expr ')'           (rule 18)

	'('            shift, and enter state 129


State 109

	expr -> trans '[' int ',' . int ']' '(' expr ')'    (rule 15)

	int            shift, and enter state 128


State 110

	expr -> match expr with '{' . cases '}'             (rule 14)

	int            shift, and enter state 125
	id             shift, and enter state 126
	'}'            reduce using rule 37
	'_'            shift, and enter state 127

	cases          goto state 122
	case           goto state 123
	pat            goto state 124

State 111

	expr -> for id '=' expr . to expr do expr           (rule 10)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	to             shift, and enter state 121
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57


State 112

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	pred -> expr comp expr .                            (rule 51)

	then           reduce using rule 51
	and            reduce using rule 51
	or             reduce using rule 51
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57


State 113

	pred -> pred . and pred                             (rule 49)
	pred -> pred . or pred                              (rule 50)
	pred -> pred or pred .                              (rule 50)

	then           reduce using rule 50
	and            reduce using rule 50
	or             reduce using rule 50


State 114

	pred -> pred . and pred                             (rule 49)
	pred -> pred and pred .                             (rule 49)
	pred -> pred . or pred                              (rule 50)

	then           reduce using rule 49
	and            reduce using rule 49
	or             shift, and enter state 71


State 115

	expr -> if pred then expr . else expr               (rule 9)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	else           shift, and enter state 120
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57


State 116

	args -> expr ',' args .                             (rule 36)

	')'            reduce using rule 36


State 117

	lval -> id '[' expr ']' .                           (rule 28)

	'<-'           reduce using rule 28


State 118

	expr -> id '.' idc args . ')'                       (rule 13)

	')'            shift, and enter state 119


State 119

	expr -> id '.' idc args ')' .                       (rule 13)

	int            reduce using rule 13
	id             reduce using rule 13
	idc            reduce using rule 13
	var            reduce using rule 13
	void           reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	for            reduce using rule 13
	to             reduce using rule 13
	do             reduce using rule 13
	match          reduce using rule 13
	with           reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	trans          reduce using rule 13
	shrink         reduce using rule 13
	ext            reduce using rule 13
	sext           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'&'            reduce using rule 13
	'|'            reduce using rule 13
	'^'            reduce using rule 13
	'='            reduce using rule 13
	'/='           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	'_'            reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<$'           reduce using rule 13
	'<=$'          reduce using rule 13
	'>$'           reduce using rule 13
	'>=$'          reduce using rule 13


State 120

	expr -> if pred then expr else . expr               (rule 9)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 148
	lval           goto state 12

State 121

	expr -> for id '=' expr to . expr do expr           (rule 10)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 147
	lval           goto state 12

State 122

	expr -> match expr with '{' cases . '}'             (rule 14)

	'}'            shift, and enter state 146


State 123

	cases -> case . cases                               (rule 38)

	int            shift, and enter state 125
	id             shift, and enter state 126
	'}'            reduce using rule 37
	'_'            shift, and enter state 127

	cases          goto state 145
	case           goto state 123
	pat            goto state 124

State 124

	case -> pat . '->' expr                             (rule 39)

	'->'           shift, and enter state 144


State 125

	pat -> int .                                        (rule 41)

	','            reduce using rule 41
	'->'           reduce using rule 41


State 126

	pat -> id .                                         (rule 42)
	pat -> id . '(' pats ')'                            (rule 43)

	'('            shift, and enter state 143
	','            reduce using rule 42
	'->'           reduce using rule 42


State 127

	pat -> '_' .                                        (rule 40)

	','            reduce using rule 40
	'->'           reduce using rule 40


State 128

	expr -> trans '[' int ',' int . ']' '(' expr ')'    (rule 15)

	']'            shift, and enter state 142


State 129

	expr -> shrink '[' int ']' '(' . expr ')'           (rule 18)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 141
	lval           goto state 12

State 130

	expr -> ext '[' int ']' '(' . expr ')'              (rule 16)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 140
	lval           goto state 12

State 131

	expr -> sext '[' int ']' '(' . expr ')'             (rule 17)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 139
	lval           goto state 12

State 132

	var_decl -> var id ':' type_reg . '=' expr          (rule 33)

	'='            shift, and enter state 138


State 133

	state_var -> id ':' type_reg '=' expr .             (rule 5)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	id             reduce using rule 5
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'}'            reduce using rule 5


State 134

	type_reg -> bits '[' int . ']'                      (rule 62)

	']'            shift, and enter state 137


State 135

	type_reg -> range '[' int . ',' int ']'             (rule 63)

	','            shift, and enter state 136


State 136

	type_reg -> range '[' int ',' . int ']'             (rule 63)

	int            shift, and enter state 158


State 137

	type_reg -> bits '[' int ']' .                      (rule 62)

	'='            reduce using rule 62


State 138

	var_decl -> var id ':' type_reg '=' . expr          (rule 33)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 157
	lval           goto state 12

State 139

	expr -> sext '[' int ']' '(' expr . ')'             (rule 17)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            shift, and enter state 156


State 140

	expr -> ext '[' int ']' '(' expr . ')'              (rule 16)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            shift, and enter state 155


State 141

	expr -> shrink '[' int ']' '(' expr . ')'           (rule 18)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            shift, and enter state 154


State 142

	expr -> trans '[' int ',' int ']' . '(' expr ')'    (rule 15)

	'('            shift, and enter state 153


State 143

	pat -> id '(' . pats ')'                            (rule 43)

	int            shift, and enter state 125
	id             shift, and enter state 126
	')'            reduce using rule 44
	'_'            shift, and enter state 127

	pat            goto state 151
	pats           goto state 152

State 144

	case -> pat '->' . expr                             (rule 39)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 150
	lval           goto state 12

State 145

	cases -> case cases .                               (rule 38)

	'}'            reduce using rule 38


State 146

	expr -> match expr with '{' cases '}' .             (rule 14)

	int            reduce using rule 14
	id             reduce using rule 14
	idc            reduce using rule 14
	var            reduce using rule 14
	void           reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	for            reduce using rule 14
	to             reduce using rule 14
	do             reduce using rule 14
	match          reduce using rule 14
	with           reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	trans          reduce using rule 14
	shrink         reduce using rule 14
	ext            reduce using rule 14
	sext           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'&'            reduce using rule 14
	'|'            reduce using rule 14
	'^'            reduce using rule 14
	'='            reduce using rule 14
	'/='           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	'_'            reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<$'           reduce using rule 14
	'<=$'          reduce using rule 14
	'>$'           reduce using rule 14
	'>=$'          reduce using rule 14


State 147

	expr -> for id '=' expr to expr . do expr           (rule 10)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	do             shift, and enter state 149
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57


State 148

	expr -> if pred then expr else expr .               (rule 9)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 9
	id             reduce using rule 9
	idc            reduce using rule 9
	var            reduce using rule 9
	void           reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	for            reduce using rule 9
	to             reduce using rule 9
	do             reduce using rule 9
	match          reduce using rule 9
	with           reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	trans          reduce using rule 9
	shrink         reduce using rule 9
	ext            reduce using rule 9
	sext           reduce using rule 9
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            reduce using rule 9
	'/='           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	'_'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'<$'           reduce using rule 9
	'<=$'          reduce using rule 9
	'>$'           reduce using rule 9
	'>=$'          reduce using rule 9


State 149

	expr -> for id '=' expr to expr do . expr           (rule 10)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 163
	lval           goto state 12

State 150

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	case -> pat '->' expr .                             (rule 39)

	int            reduce using rule 39
	id             reduce using rule 39
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'}'            reduce using rule 39
	'_'            reduce using rule 39


State 151

	pats -> pat . ',' pats                              (rule 45)

	','            shift, and enter state 162


State 152

	pat -> id '(' pats . ')'                            (rule 43)

	')'            shift, and enter state 161


State 153

	expr -> trans '[' int ',' int ']' '(' . expr ')'    (rule 15)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 160
	lval           goto state 12

State 154

	expr -> shrink '[' int ']' '(' expr ')' .           (rule 18)

	int            reduce using rule 18
	id             reduce using rule 18
	idc            reduce using rule 18
	var            reduce using rule 18
	void           reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	for            reduce using rule 18
	to             reduce using rule 18
	do             reduce using rule 18
	match          reduce using rule 18
	with           reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	trans          reduce using rule 18
	shrink         reduce using rule 18
	ext            reduce using rule 18
	sext           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'^'            reduce using rule 18
	'='            reduce using rule 18
	'/='           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	'_'            reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'<='           reduce using rule 18
	'>='           reduce using rule 18
	'<$'           reduce using rule 18
	'<=$'          reduce using rule 18
	'>$'           reduce using rule 18
	'>=$'          reduce using rule 18


State 155

	expr -> ext '[' int ']' '(' expr ')' .              (rule 16)

	int            reduce using rule 16
	id             reduce using rule 16
	idc            reduce using rule 16
	var            reduce using rule 16
	void           reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	to             reduce using rule 16
	do             reduce using rule 16
	match          reduce using rule 16
	with           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	trans          reduce using rule 16
	shrink         reduce using rule 16
	ext            reduce using rule 16
	sext           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'&'            reduce using rule 16
	'|'            reduce using rule 16
	'^'            reduce using rule 16
	'='            reduce using rule 16
	'/='           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<$'           reduce using rule 16
	'<=$'          reduce using rule 16
	'>$'           reduce using rule 16
	'>=$'          reduce using rule 16


State 156

	expr -> sext '[' int ']' '(' expr ')' .             (rule 17)

	int            reduce using rule 17
	id             reduce using rule 17
	idc            reduce using rule 17
	var            reduce using rule 17
	void           reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	for            reduce using rule 17
	to             reduce using rule 17
	do             reduce using rule 17
	match          reduce using rule 17
	with           reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	trans          reduce using rule 17
	shrink         reduce using rule 17
	ext            reduce using rule 17
	sext           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	'^'            reduce using rule 17
	'='            reduce using rule 17
	'/='           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	'_'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'<$'           reduce using rule 17
	'<=$'          reduce using rule 17
	'>$'           reduce using rule 17
	'>=$'          reduce using rule 17


State 157

	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)
	var_decl -> var id ':' type_reg '=' expr .          (rule 33)

	int            reduce using rule 33
	id             reduce using rule 33
	idc            reduce using rule 33
	var            reduce using rule 33
	void           reduce using rule 33
	if             reduce using rule 33
	for            reduce using rule 33
	match          reduce using rule 33
	trans          reduce using rule 33
	shrink         reduce using rule 33
	ext            reduce using rule 33
	sext           reduce using rule 33
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'('            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33


State 158

	type_reg -> range '[' int ',' int . ']'             (rule 63)

	']'            shift, and enter state 159


State 159

	type_reg -> range '[' int ',' int ']' .             (rule 63)

	'='            reduce using rule 63


State 160

	expr -> trans '[' int ',' int ']' '(' expr . ')'    (rule 15)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	')'            shift, and enter state 165


State 161

	pat -> id '(' pats ')' .                            (rule 43)

	','            reduce using rule 43
	'->'           reduce using rule 43


State 162

	pats -> pat ',' . pats                              (rule 45)

	int            shift, and enter state 125
	id             shift, and enter state 126
	')'            reduce using rule 44
	'_'            shift, and enter state 127

	pat            goto state 151
	pats           goto state 164

State 163

	expr -> for id '=' expr to expr do expr .           (rule 10)
	expr -> expr . '+' expr                             (rule 19)
	expr -> expr . '-' expr                             (rule 20)
	expr -> expr . '&' expr                             (rule 21)
	expr -> expr . '^' expr                             (rule 22)
	expr -> expr . '|' expr                             (rule 23)

	int            reduce using rule 10
	id             reduce using rule 10
	idc            reduce using rule 10
	var            reduce using rule 10
	void           reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	for            reduce using rule 10
	to             reduce using rule 10
	do             reduce using rule 10
	match          reduce using rule 10
	with           reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	trans          reduce using rule 10
	shrink         reduce using rule 10
	ext            reduce using rule 10
	sext           reduce using rule 10
	'+'            shift, and enter state 53
	'-'            shift, and enter state 54
	'&'            shift, and enter state 55
	'|'            shift, and enter state 56
	'^'            shift, and enter state 57
	'='            reduce using rule 10
	'/='           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	'_'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'<$'           reduce using rule 10
	'<=$'          reduce using rule 10
	'>$'           reduce using rule 10
	'>=$'          reduce using rule 10


State 164

	pats -> pat ',' pats .                              (rule 45)

	')'            reduce using rule 45


State 165

	expr -> trans '[' int ',' int ']' '(' expr ')' .    (rule 15)

	int            reduce using rule 15
	id             reduce using rule 15
	idc            reduce using rule 15
	var            reduce using rule 15
	void           reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	for            reduce using rule 15
	to             reduce using rule 15
	do             reduce using rule 15
	match          reduce using rule 15
	with           reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	trans          reduce using rule 15
	shrink         reduce using rule 15
	ext            reduce using rule 15
	sext           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'&'            reduce using rule 15
	'|'            reduce using rule 15
	'^'            reduce using rule 15
	'='            reduce using rule 15
	'/='           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	'_'            reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<$'           reduce using rule 15
	'<=$'          reduce using rule 15
	'>$'           reduce using rule 15
	'>=$'          reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 66
Number of terminals: 55
Number of non-terminals: 19
Number of states: 166
