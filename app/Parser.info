-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> expr                               (0)
	expr -> int                                        (1)
	expr -> '{' vars exprs '}'                         (2)
	expr -> if pred then expr else expr                (3)
	expr -> for id '=' expr to expr do expr            (4)
	expr -> lval '<-' expr                             (5)
	expr -> idc args ')'                               (6)
	expr -> id '.' idc args ')'                        (7)
	expr -> match expr with '{' cases '}'              (8)
	expr -> trans expr                                 (9)
	expr -> ext expr                                   (10)
	expr -> sext expr                                  (11)
	expr -> shrink expr                                (12)
	expr -> expr '+' expr                              (13)
	expr -> expr '-' expr                              (14)
	expr -> expr '&' expr                              (15)
	expr -> expr '^' expr                              (16)
	expr -> expr '|' expr                              (17)
	expr -> id                                         (18)
	expr -> '(' expr ')'                               (19)
	lval -> id                                         (20)
	lval -> id '[' expr ']'                            (21)
	exprs ->                                           (22)
	exprs -> expr exprs                                (23)
	vars ->                                            (24)
	vars -> var_decl vars                              (25)
	var_decl -> var id ':' type_reg '=' expr           (26)
	args ->                                            (27)
	args -> expr                                       (28)
	args -> expr ',' args                              (29)
	cases ->                                           (30)
	cases -> case cases                                (31)
	case -> pat '->' expr                              (32)
	pat -> '_'                                         (33)
	pat -> int                                         (34)
	pat -> id                                          (35)
	pat -> id '(' pats ')'                             (36)
	pats ->                                            (37)
	pats -> pat ',' pats                               (38)
	pred -> true                                       (39)
	pred -> false                                      (40)
	pred -> not pred                                   (41)
	pred -> pred and pred                              (42)
	pred -> pred or pred                               (43)
	pred -> expr comp expr                             (44)
	comp -> '<'                                        (45)
	comp -> '>'                                        (46)
	comp -> '<='                                       (47)
	comp -> '>='                                       (48)
	comp -> '<$'                                       (49)
	comp -> '>$'                                       (50)
	comp -> '<=$'                                      (51)
	comp -> '>=$'                                      (52)
	type_reg -> bits '[' int ']'                       (53)
	type_reg -> range '[' int ',' int ']'              (54)
	type_reg -> data id                                (55)
	type_reg -> void                                   (56)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	data           { TokenData }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'&'            { TokenAmphersand }
	'|'            { TokenPipe }
	'^'            { TokenCaret }
	'='            { TokenEq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
	lval            rules 20, 21
	exprs           rules 22, 23
	vars            rules 24, 25
	var_decl        rule  26
	args            rules 27, 28, 29
	cases           rules 30, 31
	case            rule  32
	pat             rules 33, 34, 35, 36
	pats            rules 37, 38
	pred            rules 39, 40, 41, 42, 43, 44
	comp            rules 45, 46, 47, 48, 49, 50, 51, 52
	type_reg        rules 53, 54, 55, 56

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . expr                              (rule 0)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 3
	lval           goto state 4

State 1

	expr -> . int                                       (rule 1)

	int            shift, and enter state 2


State 2

	expr -> int .                                       (rule 1)

	int            reduce using rule 1
	id             reduce using rule 1
	idc            reduce using rule 1
	var            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	for            reduce using rule 1
	to             reduce using rule 1
	do             reduce using rule 1
	match          reduce using rule 1
	with           reduce using rule 1
	and            reduce using rule 1
	or             reduce using rule 1
	trans          reduce using rule 1
	shrink         reduce using rule 1
	ext            reduce using rule 1
	sext           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'&'            reduce using rule 1
	'|'            reduce using rule 1
	'^'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	'_'            reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'<$'           reduce using rule 1
	'<=$'          reduce using rule 1
	'>$'           reduce using rule 1
	'>=$'          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parse -> expr .                              (rule 0)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	%eof           accept


State 4

	expr -> lval . '<-' expr                            (rule 5)

	'<-'           shift, and enter state 35


State 5

	expr -> id . '.' idc args ')'                       (rule 7)
	expr -> id .                                        (rule 18)
	lval -> id .                                        (rule 20)
	lval -> id . '[' expr ']'                           (rule 21)

	int            reduce using rule 18
	id             reduce using rule 18
	idc            reduce using rule 18
	var            reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	for            reduce using rule 18
	to             reduce using rule 18
	do             reduce using rule 18
	match          reduce using rule 18
	with           reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	trans          reduce using rule 18
	shrink         reduce using rule 18
	ext            reduce using rule 18
	sext           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'^'            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'['            shift, and enter state 33
	']'            reduce using rule 18
	','            reduce using rule 18
	'.'            shift, and enter state 34
	'_'            reduce using rule 18
	'<-'           reduce using rule 20
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'<='           reduce using rule 18
	'>='           reduce using rule 18
	'<$'           reduce using rule 18
	'<=$'          reduce using rule 18
	'>$'           reduce using rule 18
	'>=$'          reduce using rule 18
	%eof           reduce using rule 18


State 6

	expr -> idc . args ')'                              (rule 6)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 27
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 32

State 7

	expr -> if . pred then expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 27

State 8

	expr -> for . id '=' expr to expr do expr           (rule 4)

	id             shift, and enter state 25


State 9

	expr -> match . expr with '{' cases '}'             (rule 8)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 24
	lval           goto state 4

State 10

	expr -> trans . expr                                (rule 9)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 23
	lval           goto state 4

State 11

	expr -> shrink . expr                               (rule 12)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 22
	lval           goto state 4

State 12

	expr -> ext . expr                                  (rule 10)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 21
	lval           goto state 4

State 13

	expr -> sext . expr                                 (rule 11)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 20
	lval           goto state 4

State 14

	expr -> '(' . expr ')'                              (rule 19)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 19
	lval           goto state 4

State 15

	expr -> '{' . vars exprs '}'                        (rule 2)

	int            reduce using rule 24
	id             reduce using rule 24
	idc            reduce using rule 24
	var            shift, and enter state 18
	if             reduce using rule 24
	for            reduce using rule 24
	match          reduce using rule 24
	trans          reduce using rule 24
	shrink         reduce using rule 24
	ext            reduce using rule 24
	sext           reduce using rule 24
	'('            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24

	vars           goto state 16
	var_decl       goto state 17

State 16

	expr -> '{' vars . exprs '}'                        (rule 2)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15
	'}'            reduce using rule 22

	expr           goto state 69
	lval           goto state 4
	exprs          goto state 70

State 17

	vars -> var_decl . vars                             (rule 25)

	int            reduce using rule 24
	id             reduce using rule 24
	idc            reduce using rule 24
	var            shift, and enter state 18
	if             reduce using rule 24
	for            reduce using rule 24
	match          reduce using rule 24
	trans          reduce using rule 24
	shrink         reduce using rule 24
	ext            reduce using rule 24
	sext           reduce using rule 24
	'('            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24

	vars           goto state 68
	var_decl       goto state 17

State 18

	var_decl -> var . id ':' type_reg '=' expr          (rule 26)

	id             shift, and enter state 67


State 19

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	expr -> '(' expr . ')'                              (rule 19)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 66


State 20

	expr -> sext expr .                                 (rule 11)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 11
	id             reduce using rule 11
	idc            reduce using rule 11
	var            reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	for            reduce using rule 11
	to             reduce using rule 11
	do             reduce using rule 11
	match          reduce using rule 11
	with           reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	trans          reduce using rule 11
	shrink         reduce using rule 11
	ext            reduce using rule 11
	sext           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'&'            reduce using rule 11
	'|'            reduce using rule 11
	'^'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	'_'            reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'<$'           reduce using rule 11
	'<=$'          reduce using rule 11
	'>$'           reduce using rule 11
	'>=$'          reduce using rule 11
	%eof           reduce using rule 11


State 21

	expr -> ext expr .                                  (rule 10)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 10
	id             reduce using rule 10
	idc            reduce using rule 10
	var            reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	for            reduce using rule 10
	to             reduce using rule 10
	do             reduce using rule 10
	match          reduce using rule 10
	with           reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	trans          reduce using rule 10
	shrink         reduce using rule 10
	ext            reduce using rule 10
	sext           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'&'            reduce using rule 10
	'|'            reduce using rule 10
	'^'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	'_'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'<$'           reduce using rule 10
	'<=$'          reduce using rule 10
	'>$'           reduce using rule 10
	'>=$'          reduce using rule 10
	%eof           reduce using rule 10


State 22

	expr -> shrink expr .                               (rule 12)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 12
	id             reduce using rule 12
	idc            reduce using rule 12
	var            reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	for            reduce using rule 12
	to             reduce using rule 12
	do             reduce using rule 12
	match          reduce using rule 12
	with           reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	trans          reduce using rule 12
	shrink         reduce using rule 12
	ext            reduce using rule 12
	sext           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'&'            reduce using rule 12
	'|'            reduce using rule 12
	'^'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	'_'            reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'<$'           reduce using rule 12
	'<=$'          reduce using rule 12
	'>$'           reduce using rule 12
	'>=$'          reduce using rule 12
	%eof           reduce using rule 12


State 23

	expr -> trans expr .                                (rule 9)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 9
	id             reduce using rule 9
	idc            reduce using rule 9
	var            reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	for            reduce using rule 9
	to             reduce using rule 9
	do             reduce using rule 9
	match          reduce using rule 9
	with           reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	trans          reduce using rule 9
	shrink         reduce using rule 9
	ext            reduce using rule 9
	sext           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'&'            reduce using rule 9
	'|'            reduce using rule 9
	'^'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	'_'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'<$'           reduce using rule 9
	'<=$'          reduce using rule 9
	'>$'           reduce using rule 9
	'>=$'          reduce using rule 9
	%eof           reduce using rule 9


State 24

	expr -> match expr . with '{' cases '}'             (rule 8)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	with           shift, and enter state 65
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40


State 25

	expr -> for id . '=' expr to expr do expr           (rule 4)

	'='            shift, and enter state 64


State 26

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	pred -> expr . comp expr                            (rule 44)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'<'            shift, and enter state 56
	'>'            shift, and enter state 57
	'<='           shift, and enter state 58
	'>='           shift, and enter state 59
	'<$'           shift, and enter state 60
	'<=$'          shift, and enter state 61
	'>$'           shift, and enter state 62
	'>=$'          shift, and enter state 63

	comp           goto state 55

State 27

	expr -> if pred . then expr else expr               (rule 3)
	pred -> pred . and pred                             (rule 42)
	pred -> pred . or pred                              (rule 43)

	then           shift, and enter state 52
	and            shift, and enter state 53
	or             shift, and enter state 54


State 28

	pred -> true .                                      (rule 39)

	then           reduce using rule 39
	and            reduce using rule 39
	or             reduce using rule 39


State 29

	pred -> false .                                     (rule 40)

	then           reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40


State 30

	pred -> not . pred                                  (rule 41)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 51

State 31

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	args -> expr .                                      (rule 28)
	args -> expr . ',' args                             (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            reduce using rule 28
	','            shift, and enter state 50


State 32

	expr -> idc args . ')'                              (rule 6)

	')'            shift, and enter state 49


State 33

	lval -> id '[' . expr ']'                           (rule 21)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 48
	lval           goto state 4

State 34

	expr -> id '.' . idc args ')'                       (rule 7)

	idc            shift, and enter state 47


State 35

	expr -> lval '<-' . expr                            (rule 5)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 46
	lval           goto state 4

State 36

	expr -> expr '+' . expr                             (rule 13)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 45
	lval           goto state 4

State 37

	expr -> expr '-' . expr                             (rule 14)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 44
	lval           goto state 4

State 38

	expr -> expr '&' . expr                             (rule 15)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 43
	lval           goto state 4

State 39

	expr -> expr '|' . expr                             (rule 17)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 42
	lval           goto state 4

State 40

	expr -> expr '^' . expr                             (rule 16)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 41
	lval           goto state 4

State 41

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr '^' expr .                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 16
	id             reduce using rule 16
	idc            reduce using rule 16
	var            reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	to             reduce using rule 16
	do             reduce using rule 16
	match          reduce using rule 16
	with           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	trans          reduce using rule 16
	shrink         reduce using rule 16
	ext            reduce using rule 16
	sext           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'&'            reduce using rule 16
	'|'            shift, and enter state 39
	'^'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<$'           reduce using rule 16
	'<=$'          reduce using rule 16
	'>$'           reduce using rule 16
	'>=$'          reduce using rule 16
	%eof           reduce using rule 16


State 42

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	expr -> expr '|' expr .                             (rule 17)

	int            reduce using rule 17
	id             reduce using rule 17
	idc            reduce using rule 17
	var            reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	for            reduce using rule 17
	to             reduce using rule 17
	do             reduce using rule 17
	match          reduce using rule 17
	with           reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	trans          reduce using rule 17
	shrink         reduce using rule 17
	ext            reduce using rule 17
	sext           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	'^'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	'_'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'<$'           reduce using rule 17
	'<=$'          reduce using rule 17
	'>$'           reduce using rule 17
	'>=$'          reduce using rule 17
	%eof           reduce using rule 17


State 43

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr '&' expr .                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 15
	id             reduce using rule 15
	idc            reduce using rule 15
	var            reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	for            reduce using rule 15
	to             reduce using rule 15
	do             reduce using rule 15
	match          reduce using rule 15
	with           reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	trans          reduce using rule 15
	shrink         reduce using rule 15
	ext            reduce using rule 15
	sext           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'&'            reduce using rule 15
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	'_'            reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<$'           reduce using rule 15
	'<=$'          reduce using rule 15
	'>$'           reduce using rule 15
	'>=$'          reduce using rule 15
	%eof           reduce using rule 15


State 44

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr '-' expr .                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 14
	id             reduce using rule 14
	idc            reduce using rule 14
	var            reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	for            reduce using rule 14
	to             reduce using rule 14
	do             reduce using rule 14
	match          reduce using rule 14
	with           reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	trans          reduce using rule 14
	shrink         reduce using rule 14
	ext            reduce using rule 14
	sext           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	'_'            reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<$'           reduce using rule 14
	'<=$'          reduce using rule 14
	'>$'           reduce using rule 14
	'>=$'          reduce using rule 14
	%eof           reduce using rule 14


State 45

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr '+' expr .                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 13
	id             reduce using rule 13
	idc            reduce using rule 13
	var            reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	for            reduce using rule 13
	to             reduce using rule 13
	do             reduce using rule 13
	match          reduce using rule 13
	with           reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	trans          reduce using rule 13
	shrink         reduce using rule 13
	ext            reduce using rule 13
	sext           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	'_'            reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<$'           reduce using rule 13
	'<=$'          reduce using rule 13
	'>$'           reduce using rule 13
	'>=$'          reduce using rule 13
	%eof           reduce using rule 13


State 46

	expr -> lval '<-' expr .                            (rule 5)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 5
	id             reduce using rule 5
	idc            reduce using rule 5
	var            reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	for            reduce using rule 5
	to             reduce using rule 5
	do             reduce using rule 5
	match          reduce using rule 5
	with           reduce using rule 5
	and            reduce using rule 5
	or             reduce using rule 5
	trans          reduce using rule 5
	shrink         reduce using rule 5
	ext            reduce using rule 5
	sext           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	'^'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	'_'            reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	'<='           reduce using rule 5
	'>='           reduce using rule 5
	'<$'           reduce using rule 5
	'<=$'          reduce using rule 5
	'>$'           reduce using rule 5
	'>=$'          reduce using rule 5
	%eof           reduce using rule 5


State 47

	expr -> id '.' idc . args ')'                       (rule 7)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 27
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 82

State 48

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	lval -> id '[' expr . ']'                           (rule 21)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	']'            shift, and enter state 81


State 49

	expr -> idc args ')' .                              (rule 6)

	int            reduce using rule 6
	id             reduce using rule 6
	idc            reduce using rule 6
	var            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	for            reduce using rule 6
	to             reduce using rule 6
	do             reduce using rule 6
	match          reduce using rule 6
	with           reduce using rule 6
	and            reduce using rule 6
	or             reduce using rule 6
	trans          reduce using rule 6
	shrink         reduce using rule 6
	ext            reduce using rule 6
	sext           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'&'            reduce using rule 6
	'|'            reduce using rule 6
	'^'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	'_'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'<$'           reduce using rule 6
	'<=$'          reduce using rule 6
	'>$'           reduce using rule 6
	'>=$'          reduce using rule 6
	%eof           reduce using rule 6


State 50

	args -> expr ',' . args                             (rule 29)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 27
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 80

State 51

	pred -> not pred .                                  (rule 41)
	pred -> pred . and pred                             (rule 42)
	pred -> pred . or pred                              (rule 43)

	then           reduce using rule 41
	and            shift, and enter state 53
	or             shift, and enter state 54


State 52

	expr -> if pred then . expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 79
	lval           goto state 4

State 53

	pred -> pred and . pred                             (rule 42)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 78

State 54

	pred -> pred or . pred                              (rule 43)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 77

State 55

	pred -> expr comp . expr                            (rule 44)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 76
	lval           goto state 4

State 56

	comp -> '<' .                                       (rule 45)

	int            reduce using rule 45
	id             reduce using rule 45
	idc            reduce using rule 45
	if             reduce using rule 45
	for            reduce using rule 45
	match          reduce using rule 45
	trans          reduce using rule 45
	shrink         reduce using rule 45
	ext            reduce using rule 45
	sext           reduce using rule 45
	'('            reduce using rule 45
	'{'            reduce using rule 45


State 57

	comp -> '>' .                                       (rule 46)

	int            reduce using rule 46
	id             reduce using rule 46
	idc            reduce using rule 46
	if             reduce using rule 46
	for            reduce using rule 46
	match          reduce using rule 46
	trans          reduce using rule 46
	shrink         reduce using rule 46
	ext            reduce using rule 46
	sext           reduce using rule 46
	'('            reduce using rule 46
	'{'            reduce using rule 46


State 58

	comp -> '<=' .                                      (rule 47)

	int            reduce using rule 47
	id             reduce using rule 47
	idc            reduce using rule 47
	if             reduce using rule 47
	for            reduce using rule 47
	match          reduce using rule 47
	trans          reduce using rule 47
	shrink         reduce using rule 47
	ext            reduce using rule 47
	sext           reduce using rule 47
	'('            reduce using rule 47
	'{'            reduce using rule 47


State 59

	comp -> '>=' .                                      (rule 48)

	int            reduce using rule 48
	id             reduce using rule 48
	idc            reduce using rule 48
	if             reduce using rule 48
	for            reduce using rule 48
	match          reduce using rule 48
	trans          reduce using rule 48
	shrink         reduce using rule 48
	ext            reduce using rule 48
	sext           reduce using rule 48
	'('            reduce using rule 48
	'{'            reduce using rule 48


State 60

	comp -> '<$' .                                      (rule 49)

	int            reduce using rule 49
	id             reduce using rule 49
	idc            reduce using rule 49
	if             reduce using rule 49
	for            reduce using rule 49
	match          reduce using rule 49
	trans          reduce using rule 49
	shrink         reduce using rule 49
	ext            reduce using rule 49
	sext           reduce using rule 49
	'('            reduce using rule 49
	'{'            reduce using rule 49


State 61

	comp -> '<=$' .                                     (rule 51)

	int            reduce using rule 51
	id             reduce using rule 51
	idc            reduce using rule 51
	if             reduce using rule 51
	for            reduce using rule 51
	match          reduce using rule 51
	trans          reduce using rule 51
	shrink         reduce using rule 51
	ext            reduce using rule 51
	sext           reduce using rule 51
	'('            reduce using rule 51
	'{'            reduce using rule 51


State 62

	comp -> '>$' .                                      (rule 50)

	int            reduce using rule 50
	id             reduce using rule 50
	idc            reduce using rule 50
	if             reduce using rule 50
	for            reduce using rule 50
	match          reduce using rule 50
	trans          reduce using rule 50
	shrink         reduce using rule 50
	ext            reduce using rule 50
	sext           reduce using rule 50
	'('            reduce using rule 50
	'{'            reduce using rule 50


State 63

	comp -> '>=$' .                                     (rule 52)

	int            reduce using rule 52
	id             reduce using rule 52
	idc            reduce using rule 52
	if             reduce using rule 52
	for            reduce using rule 52
	match          reduce using rule 52
	trans          reduce using rule 52
	shrink         reduce using rule 52
	ext            reduce using rule 52
	sext           reduce using rule 52
	'('            reduce using rule 52
	'{'            reduce using rule 52


State 64

	expr -> for id '=' . expr to expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 75
	lval           goto state 4

State 65

	expr -> match expr with . '{' cases '}'             (rule 8)

	'{'            shift, and enter state 74


State 66

	expr -> '(' expr ')' .                              (rule 19)

	int            reduce using rule 19
	id             reduce using rule 19
	idc            reduce using rule 19
	var            reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	for            reduce using rule 19
	to             reduce using rule 19
	do             reduce using rule 19
	match          reduce using rule 19
	with           reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	trans          reduce using rule 19
	shrink         reduce using rule 19
	ext            reduce using rule 19
	sext           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	'^'            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	'_'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'<$'           reduce using rule 19
	'<=$'          reduce using rule 19
	'>$'           reduce using rule 19
	'>=$'          reduce using rule 19
	%eof           reduce using rule 19


State 67

	var_decl -> var id . ':' type_reg '=' expr          (rule 26)

	':'            shift, and enter state 73


State 68

	vars -> var_decl vars .                             (rule 25)

	int            reduce using rule 25
	id             reduce using rule 25
	idc            reduce using rule 25
	if             reduce using rule 25
	for            reduce using rule 25
	match          reduce using rule 25
	trans          reduce using rule 25
	shrink         reduce using rule 25
	ext            reduce using rule 25
	sext           reduce using rule 25
	'('            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25


State 69

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	exprs -> expr . exprs                               (rule 23)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            shift, and enter state 14
	'{'            shift, and enter state 15
	'}'            reduce using rule 22

	expr           goto state 69
	lval           goto state 4
	exprs          goto state 72

State 70

	expr -> '{' vars exprs . '}'                        (rule 2)

	'}'            shift, and enter state 71


State 71

	expr -> '{' vars exprs '}' .                        (rule 2)

	int            reduce using rule 2
	id             reduce using rule 2
	idc            reduce using rule 2
	var            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	for            reduce using rule 2
	to             reduce using rule 2
	do             reduce using rule 2
	match          reduce using rule 2
	with           reduce using rule 2
	and            reduce using rule 2
	or             reduce using rule 2
	trans          reduce using rule 2
	shrink         reduce using rule 2
	ext            reduce using rule 2
	sext           reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'&'            reduce using rule 2
	'|'            reduce using rule 2
	'^'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	'_'            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'<$'           reduce using rule 2
	'<=$'          reduce using rule 2
	'>$'           reduce using rule 2
	'>=$'          reduce using rule 2
	%eof           reduce using rule 2


State 72

	exprs -> expr exprs .                               (rule 23)

	'}'            reduce using rule 23


State 73

	var_decl -> var id ':' . type_reg '=' expr          (rule 26)

	bits           shift, and enter state 93
	range          shift, and enter state 94
	data           shift, and enter state 95
	void           shift, and enter state 96

	type_reg       goto state 92

State 74

	expr -> match expr with '{' . cases '}'             (rule 8)

	int            shift, and enter state 89
	id             shift, and enter state 90
	'}'            reduce using rule 30
	'_'            shift, and enter state 91

	cases          goto state 86
	case           goto state 87
	pat            goto state 88

State 75

	expr -> for id '=' expr . to expr do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	to             shift, and enter state 85
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40


State 76

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	pred -> expr comp expr .                            (rule 44)

	then           reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40


State 77

	pred -> pred . and pred                             (rule 42)
	pred -> pred . or pred                              (rule 43)
	pred -> pred or pred .                              (rule 43)

	then           reduce using rule 43
	and            reduce using rule 43
	or             reduce using rule 43


State 78

	pred -> pred . and pred                             (rule 42)
	pred -> pred and pred .                             (rule 42)
	pred -> pred . or pred                              (rule 43)

	then           reduce using rule 42
	and            reduce using rule 42
	or             shift, and enter state 54


State 79

	expr -> if pred then expr . else expr               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	else           shift, and enter state 84
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40


State 80

	args -> expr ',' args .                             (rule 29)

	')'            reduce using rule 29


State 81

	lval -> id '[' expr ']' .                           (rule 21)

	'<-'           reduce using rule 21


State 82

	expr -> id '.' idc args . ')'                       (rule 7)

	')'            shift, and enter state 83


State 83

	expr -> id '.' idc args ')' .                       (rule 7)

	int            reduce using rule 7
	id             reduce using rule 7
	idc            reduce using rule 7
	var            reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	for            reduce using rule 7
	to             reduce using rule 7
	do             reduce using rule 7
	match          reduce using rule 7
	with           reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	trans          reduce using rule 7
	shrink         reduce using rule 7
	ext            reduce using rule 7
	sext           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'^'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	'_'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'<$'           reduce using rule 7
	'<=$'          reduce using rule 7
	'>$'           reduce using rule 7
	'>=$'          reduce using rule 7
	%eof           reduce using rule 7


State 84

	expr -> if pred then expr else . expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 106
	lval           goto state 4

State 85

	expr -> for id '=' expr to . expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 105
	lval           goto state 4

State 86

	expr -> match expr with '{' cases . '}'             (rule 8)

	'}'            shift, and enter state 104


State 87

	cases -> case . cases                               (rule 31)

	int            shift, and enter state 89
	id             shift, and enter state 90
	'}'            reduce using rule 30
	'_'            shift, and enter state 91

	cases          goto state 103
	case           goto state 87
	pat            goto state 88

State 88

	case -> pat . '->' expr                             (rule 32)

	'->'           shift, and enter state 102


State 89

	pat -> int .                                        (rule 34)

	','            reduce using rule 34
	'->'           reduce using rule 34


State 90

	pat -> id .                                         (rule 35)
	pat -> id . '(' pats ')'                            (rule 36)

	'('            shift, and enter state 101
	','            reduce using rule 35
	'->'           reduce using rule 35


State 91

	pat -> '_' .                                        (rule 33)

	','            reduce using rule 33
	'->'           reduce using rule 33


State 92

	var_decl -> var id ':' type_reg . '=' expr          (rule 26)

	'='            shift, and enter state 100


State 93

	type_reg -> bits . '[' int ']'                      (rule 53)

	'['            shift, and enter state 99


State 94

	type_reg -> range . '[' int ',' int ']'             (rule 54)

	'['            shift, and enter state 98


State 95

	type_reg -> data . id                               (rule 55)

	id             shift, and enter state 97


State 96

	type_reg -> void .                                  (rule 56)

	'='            reduce using rule 56


State 97

	type_reg -> data id .                               (rule 55)

	'='            reduce using rule 55


State 98

	type_reg -> range '[' . int ',' int ']'             (rule 54)

	int            shift, and enter state 113


State 99

	type_reg -> bits '[' . int ']'                      (rule 53)

	int            shift, and enter state 112


State 100

	var_decl -> var id ':' type_reg '=' . expr          (rule 26)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 111
	lval           goto state 4

State 101

	pat -> id '(' . pats ')'                            (rule 36)

	int            shift, and enter state 89
	id             shift, and enter state 90
	')'            reduce using rule 37
	'_'            shift, and enter state 91

	pat            goto state 109
	pats           goto state 110

State 102

	case -> pat '->' . expr                             (rule 32)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 108
	lval           goto state 4

State 103

	cases -> case cases .                               (rule 31)

	'}'            reduce using rule 31


State 104

	expr -> match expr with '{' cases '}' .             (rule 8)

	int            reduce using rule 8
	id             reduce using rule 8
	idc            reduce using rule 8
	var            reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	for            reduce using rule 8
	to             reduce using rule 8
	do             reduce using rule 8
	match          reduce using rule 8
	with           reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	trans          reduce using rule 8
	shrink         reduce using rule 8
	ext            reduce using rule 8
	sext           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'&'            reduce using rule 8
	'|'            reduce using rule 8
	'^'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	'_'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'<$'           reduce using rule 8
	'<=$'          reduce using rule 8
	'>$'           reduce using rule 8
	'>=$'          reduce using rule 8
	%eof           reduce using rule 8


State 105

	expr -> for id '=' expr to expr . do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	do             shift, and enter state 107
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40


State 106

	expr -> if pred then expr else expr .               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 3
	id             reduce using rule 3
	idc            reduce using rule 3
	var            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	for            reduce using rule 3
	to             reduce using rule 3
	do             reduce using rule 3
	match          reduce using rule 3
	with           reduce using rule 3
	and            reduce using rule 3
	or             reduce using rule 3
	trans          reduce using rule 3
	shrink         reduce using rule 3
	ext            reduce using rule 3
	sext           reduce using rule 3
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 3
	')'            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	'_'            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'<$'           reduce using rule 3
	'<=$'          reduce using rule 3
	'>$'           reduce using rule 3
	'>=$'          reduce using rule 3
	%eof           reduce using rule 3


State 107

	expr -> for id '=' expr to expr do . expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 118
	lval           goto state 4

State 108

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	case -> pat '->' expr .                             (rule 32)

	int            reduce using rule 32
	id             reduce using rule 32
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'}'            reduce using rule 32
	'_'            reduce using rule 32


State 109

	pats -> pat . ',' pats                              (rule 38)

	','            shift, and enter state 117


State 110

	pat -> id '(' pats . ')'                            (rule 36)

	')'            shift, and enter state 116


State 111

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)
	var_decl -> var id ':' type_reg '=' expr .          (rule 26)

	int            reduce using rule 26
	id             reduce using rule 26
	idc            reduce using rule 26
	var            reduce using rule 26
	if             reduce using rule 26
	for            reduce using rule 26
	match          reduce using rule 26
	trans          reduce using rule 26
	shrink         reduce using rule 26
	ext            reduce using rule 26
	sext           reduce using rule 26
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26


State 112

	type_reg -> bits '[' int . ']'                      (rule 53)

	']'            shift, and enter state 115


State 113

	type_reg -> range '[' int . ',' int ']'             (rule 54)

	','            shift, and enter state 114


State 114

	type_reg -> range '[' int ',' . int ']'             (rule 54)

	int            shift, and enter state 120


State 115

	type_reg -> bits '[' int ']' .                      (rule 53)

	'='            reduce using rule 53


State 116

	pat -> id '(' pats ')' .                            (rule 36)

	','            reduce using rule 36
	'->'           reduce using rule 36


State 117

	pats -> pat ',' . pats                              (rule 38)

	int            shift, and enter state 89
	id             shift, and enter state 90
	')'            reduce using rule 37
	'_'            shift, and enter state 91

	pat            goto state 109
	pats           goto state 119

State 118

	expr -> for id '=' expr to expr do expr .           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '-' expr                             (rule 14)
	expr -> expr . '&' expr                             (rule 15)
	expr -> expr . '^' expr                             (rule 16)
	expr -> expr . '|' expr                             (rule 17)

	int            reduce using rule 4
	id             reduce using rule 4
	idc            reduce using rule 4
	var            reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	for            reduce using rule 4
	to             reduce using rule 4
	do             reduce using rule 4
	match          reduce using rule 4
	with           reduce using rule 4
	and            reduce using rule 4
	or             reduce using rule 4
	trans          reduce using rule 4
	shrink         reduce using rule 4
	ext            reduce using rule 4
	sext           reduce using rule 4
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'&'            shift, and enter state 38
	'|'            shift, and enter state 39
	'^'            shift, and enter state 40
	'('            reduce using rule 4
	')'            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	'_'            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'<='           reduce using rule 4
	'>='           reduce using rule 4
	'<$'           reduce using rule 4
	'<=$'          reduce using rule 4
	'>$'           reduce using rule 4
	'>=$'          reduce using rule 4
	%eof           reduce using rule 4


State 119

	pats -> pat ',' pats .                              (rule 38)

	')'            reduce using rule 38


State 120

	type_reg -> range '[' int ',' int . ']'             (rule 54)

	']'            shift, and enter state 121


State 121

	type_reg -> range '[' int ',' int ']' .             (rule 54)

	'='            reduce using rule 54


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 57
Number of terminals: 51
Number of non-terminals: 14
Number of states: 122
