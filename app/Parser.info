-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> expr                               (0)
	expr -> int                                        (1)
	expr -> '{' vars exprs '}'                         (2)
	expr -> if pred then expr else expr                (3)
	expr -> for id '=' expr to expr do expr            (4)
	expr -> lval '<-' expr                             (5)
	expr -> idc args ')'                               (6)
	expr -> id '.' idc args ')'                        (7)
	expr -> match expr with '{' cases '}'              (8)
	expr -> trans expr                                 (9)
	expr -> ext expr                                   (10)
	expr -> sext expr                                  (11)
	expr -> shrink expr                                (12)
	expr -> expr '+' expr                              (13)
	expr -> expr '*' expr                              (14)
	expr -> id                                         (15)
	expr -> '(' expr ')'                               (16)
	lval -> id                                         (17)
	lval -> id '[' expr ']'                            (18)
	exprs ->                                           (19)
	exprs -> expr exprs                                (20)
	vars ->                                            (21)
	vars -> var_decl vars                              (22)
	var_decl -> var id ':' type_reg '=' expr           (23)
	args ->                                            (24)
	args -> expr                                       (25)
	args -> expr ',' args                              (26)
	cases ->                                           (27)
	cases -> case cases                                (28)
	case -> pat '->' expr                              (29)
	pat -> '_'                                         (30)
	pat -> int                                         (31)
	pat -> id                                          (32)
	pat -> id '(' pats ')'                             (33)
	pats ->                                            (34)
	pats -> pat ',' pats                               (35)
	pred -> true                                       (36)
	pred -> false                                      (37)
	pred -> not pred                                   (38)
	pred -> pred and pred                              (39)
	pred -> pred or pred                               (40)
	pred -> expr comp expr                             (41)
	comp -> '<'                                        (42)
	comp -> '>'                                        (43)
	comp -> '<='                                       (44)
	comp -> '>='                                       (45)
	comp -> '<$'                                       (46)
	comp -> '>$'                                       (47)
	comp -> '<=$'                                      (48)
	comp -> '>=$'                                      (49)
	type_reg -> bits '[' int ']'                       (50)
	type_reg -> range '[' int ',' int ']'              (51)
	type_reg -> data id                                (52)
	type_reg -> void                                   (53)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	data           { TokenData }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'*'            { TokenMult }
	'='            { TokenEq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
	lval            rules 17, 18
	exprs           rules 19, 20
	vars            rules 21, 22
	var_decl        rule  23
	args            rules 24, 25, 26
	cases           rules 27, 28
	case            rule  29
	pat             rules 30, 31, 32, 33
	pats            rules 34, 35
	pred            rules 36, 37, 38, 39, 40, 41
	comp            rules 42, 43, 44, 45, 46, 47, 48, 49
	type_reg        rules 50, 51, 52, 53

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . expr                              (rule 0)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 3
	lval           goto state 4

State 1

	expr -> . int                                       (rule 1)

	int            shift, and enter state 2


State 2

	expr -> int .                                       (rule 1)

	int            reduce using rule 1
	id             reduce using rule 1
	idc            reduce using rule 1
	var            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	for            reduce using rule 1
	to             reduce using rule 1
	do             reduce using rule 1
	match          reduce using rule 1
	with           reduce using rule 1
	and            reduce using rule 1
	or             reduce using rule 1
	trans          reduce using rule 1
	shrink         reduce using rule 1
	ext            reduce using rule 1
	sext           reduce using rule 1
	'+'            reduce using rule 1
	'*'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	'_'            reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'<$'           reduce using rule 1
	'<=$'          reduce using rule 1
	'>$'           reduce using rule 1
	'>=$'          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parse -> expr .                              (rule 0)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	%eof           accept


State 4

	expr -> lval . '<-' expr                            (rule 5)

	'<-'           shift, and enter state 35


State 5

	expr -> id . '.' idc args ')'                       (rule 7)
	expr -> id .                                        (rule 15)
	lval -> id .                                        (rule 17)
	lval -> id . '[' expr ']'                           (rule 18)

	int            reduce using rule 15
	id             reduce using rule 15
	idc            reduce using rule 15
	var            reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	for            reduce using rule 15
	to             reduce using rule 15
	do             reduce using rule 15
	match          reduce using rule 15
	with           reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	trans          reduce using rule 15
	shrink         reduce using rule 15
	ext            reduce using rule 15
	sext           reduce using rule 15
	'+'            reduce using rule 15
	'*'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	'['            shift, and enter state 33
	']'            reduce using rule 15
	','            reduce using rule 15
	'.'            shift, and enter state 34
	'_'            reduce using rule 15
	'<-'           reduce using rule 17
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<$'           reduce using rule 15
	'<=$'          reduce using rule 15
	'>$'           reduce using rule 15
	'>=$'          reduce using rule 15
	%eof           reduce using rule 15


State 6

	expr -> idc . args ')'                              (rule 6)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 24
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 32

State 7

	expr -> if . pred then expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 27

State 8

	expr -> for . id '=' expr to expr do expr           (rule 4)

	id             shift, and enter state 25


State 9

	expr -> match . expr with '{' cases '}'             (rule 8)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 24
	lval           goto state 4

State 10

	expr -> trans . expr                                (rule 9)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 23
	lval           goto state 4

State 11

	expr -> shrink . expr                               (rule 12)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 22
	lval           goto state 4

State 12

	expr -> ext . expr                                  (rule 10)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 21
	lval           goto state 4

State 13

	expr -> sext . expr                                 (rule 11)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 20
	lval           goto state 4

State 14

	expr -> '(' . expr ')'                              (rule 16)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 19
	lval           goto state 4

State 15

	expr -> '{' . vars exprs '}'                        (rule 2)

	int            reduce using rule 21
	id             reduce using rule 21
	idc            reduce using rule 21
	var            shift, and enter state 18
	if             reduce using rule 21
	for            reduce using rule 21
	match          reduce using rule 21
	trans          reduce using rule 21
	shrink         reduce using rule 21
	ext            reduce using rule 21
	sext           reduce using rule 21
	'('            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21

	vars           goto state 16
	var_decl       goto state 17

State 16

	expr -> '{' vars . exprs '}'                        (rule 2)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15
	'}'            reduce using rule 19

	expr           goto state 63
	lval           goto state 4
	exprs          goto state 64

State 17

	vars -> var_decl . vars                             (rule 22)

	int            reduce using rule 21
	id             reduce using rule 21
	idc            reduce using rule 21
	var            shift, and enter state 18
	if             reduce using rule 21
	for            reduce using rule 21
	match          reduce using rule 21
	trans          reduce using rule 21
	shrink         reduce using rule 21
	ext            reduce using rule 21
	sext           reduce using rule 21
	'('            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21

	vars           goto state 62
	var_decl       goto state 17

State 18

	var_decl -> var . id ':' type_reg '=' expr          (rule 23)

	id             shift, and enter state 61


State 19

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> '(' expr . ')'                              (rule 16)

	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	')'            shift, and enter state 60


State 20

	expr -> sext expr .                                 (rule 11)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 11
	id             reduce using rule 11
	idc            reduce using rule 11
	var            reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	for            reduce using rule 11
	to             reduce using rule 11
	do             reduce using rule 11
	match          reduce using rule 11
	with           reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	trans          reduce using rule 11
	shrink         reduce using rule 11
	ext            reduce using rule 11
	sext           reduce using rule 11
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	'_'            reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'<$'           reduce using rule 11
	'<=$'          reduce using rule 11
	'>$'           reduce using rule 11
	'>=$'          reduce using rule 11
	%eof           reduce using rule 11


State 21

	expr -> ext expr .                                  (rule 10)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 10
	id             reduce using rule 10
	idc            reduce using rule 10
	var            reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	for            reduce using rule 10
	to             reduce using rule 10
	do             reduce using rule 10
	match          reduce using rule 10
	with           reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	trans          reduce using rule 10
	shrink         reduce using rule 10
	ext            reduce using rule 10
	sext           reduce using rule 10
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	'_'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'<$'           reduce using rule 10
	'<=$'          reduce using rule 10
	'>$'           reduce using rule 10
	'>=$'          reduce using rule 10
	%eof           reduce using rule 10


State 22

	expr -> shrink expr .                               (rule 12)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 12
	id             reduce using rule 12
	idc            reduce using rule 12
	var            reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	for            reduce using rule 12
	to             reduce using rule 12
	do             reduce using rule 12
	match          reduce using rule 12
	with           reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	trans          reduce using rule 12
	shrink         reduce using rule 12
	ext            reduce using rule 12
	sext           reduce using rule 12
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	'_'            reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'<$'           reduce using rule 12
	'<=$'          reduce using rule 12
	'>$'           reduce using rule 12
	'>=$'          reduce using rule 12
	%eof           reduce using rule 12


State 23

	expr -> trans expr .                                (rule 9)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 9
	id             reduce using rule 9
	idc            reduce using rule 9
	var            reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	for            reduce using rule 9
	to             reduce using rule 9
	do             reduce using rule 9
	match          reduce using rule 9
	with           reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	trans          reduce using rule 9
	shrink         reduce using rule 9
	ext            reduce using rule 9
	sext           reduce using rule 9
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	'_'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'<$'           reduce using rule 9
	'<=$'          reduce using rule 9
	'>$'           reduce using rule 9
	'>=$'          reduce using rule 9
	%eof           reduce using rule 9


State 24

	expr -> match expr . with '{' cases '}'             (rule 8)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	with           shift, and enter state 59
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37


State 25

	expr -> for id . '=' expr to expr do expr           (rule 4)

	'='            shift, and enter state 58


State 26

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	pred -> expr . comp expr                            (rule 41)

	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'<'            shift, and enter state 50
	'>'            shift, and enter state 51
	'<='           shift, and enter state 52
	'>='           shift, and enter state 53
	'<$'           shift, and enter state 54
	'<=$'          shift, and enter state 55
	'>$'           shift, and enter state 56
	'>=$'          shift, and enter state 57

	comp           goto state 49

State 27

	expr -> if pred . then expr else expr               (rule 3)
	pred -> pred . and pred                             (rule 39)
	pred -> pred . or pred                              (rule 40)

	then           shift, and enter state 46
	and            shift, and enter state 47
	or             shift, and enter state 48


State 28

	pred -> true .                                      (rule 36)

	then           reduce using rule 36
	and            reduce using rule 36
	or             reduce using rule 36


State 29

	pred -> false .                                     (rule 37)

	then           reduce using rule 37
	and            reduce using rule 37
	or             reduce using rule 37


State 30

	pred -> not . pred                                  (rule 38)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 45

State 31

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	args -> expr .                                      (rule 25)
	args -> expr . ',' args                             (rule 26)

	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	')'            reduce using rule 25
	','            shift, and enter state 44


State 32

	expr -> idc args . ')'                              (rule 6)

	')'            shift, and enter state 43


State 33

	lval -> id '[' . expr ']'                           (rule 18)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 42
	lval           goto state 4

State 34

	expr -> id '.' . idc args ')'                       (rule 7)

	idc            shift, and enter state 41


State 35

	expr -> lval '<-' . expr                            (rule 5)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 40
	lval           goto state 4

State 36

	expr -> expr '+' . expr                             (rule 13)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 39
	lval           goto state 4

State 37

	expr -> expr '*' . expr                             (rule 14)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 38
	lval           goto state 4

State 38

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	expr -> expr '*' expr .                             (rule 14)

	int            reduce using rule 14
	id             reduce using rule 14
	idc            reduce using rule 14
	var            reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	for            reduce using rule 14
	to             reduce using rule 14
	do             reduce using rule 14
	match          reduce using rule 14
	with           reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	trans          reduce using rule 14
	shrink         reduce using rule 14
	ext            reduce using rule 14
	sext           reduce using rule 14
	'+'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	'_'            reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<$'           reduce using rule 14
	'<=$'          reduce using rule 14
	'>$'           reduce using rule 14
	'>=$'          reduce using rule 14
	%eof           reduce using rule 14


State 39

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr '+' expr .                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 13
	id             reduce using rule 13
	idc            reduce using rule 13
	var            reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	for            reduce using rule 13
	to             reduce using rule 13
	do             reduce using rule 13
	match          reduce using rule 13
	with           reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	trans          reduce using rule 13
	shrink         reduce using rule 13
	ext            reduce using rule 13
	sext           reduce using rule 13
	'+'            reduce using rule 13
	'*'            shift, and enter state 37
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	'_'            reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<$'           reduce using rule 13
	'<=$'          reduce using rule 13
	'>$'           reduce using rule 13
	'>=$'          reduce using rule 13
	%eof           reduce using rule 13


State 40

	expr -> lval '<-' expr .                            (rule 5)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 5
	id             reduce using rule 5
	idc            reduce using rule 5
	var            reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	for            reduce using rule 5
	to             reduce using rule 5
	do             reduce using rule 5
	match          reduce using rule 5
	with           reduce using rule 5
	and            reduce using rule 5
	or             reduce using rule 5
	trans          reduce using rule 5
	shrink         reduce using rule 5
	ext            reduce using rule 5
	sext           reduce using rule 5
	'+'            reduce using rule 5
	'*'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	'_'            reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	'<='           reduce using rule 5
	'>='           reduce using rule 5
	'<$'           reduce using rule 5
	'<=$'          reduce using rule 5
	'>$'           reduce using rule 5
	'>=$'          reduce using rule 5
	%eof           reduce using rule 5


State 41

	expr -> id '.' idc . args ')'                       (rule 7)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 24
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 76

State 42

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	lval -> id '[' expr . ']'                           (rule 18)

	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	']'            shift, and enter state 75


State 43

	expr -> idc args ')' .                              (rule 6)

	int            reduce using rule 6
	id             reduce using rule 6
	idc            reduce using rule 6
	var            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	for            reduce using rule 6
	to             reduce using rule 6
	do             reduce using rule 6
	match          reduce using rule 6
	with           reduce using rule 6
	and            reduce using rule 6
	or             reduce using rule 6
	trans          reduce using rule 6
	shrink         reduce using rule 6
	ext            reduce using rule 6
	sext           reduce using rule 6
	'+'            reduce using rule 6
	'*'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	'_'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'<$'           reduce using rule 6
	'<=$'          reduce using rule 6
	'>$'           reduce using rule 6
	'>=$'          reduce using rule 6
	%eof           reduce using rule 6


State 44

	args -> expr ',' . args                             (rule 26)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	')'            reduce using rule 24
	'{'            shift, and enter state 15

	expr           goto state 31
	lval           goto state 4
	args           goto state 74

State 45

	pred -> not pred .                                  (rule 38)
	pred -> pred . and pred                             (rule 39)
	pred -> pred . or pred                              (rule 40)

	then           reduce using rule 38
	and            shift, and enter state 47
	or             shift, and enter state 48


State 46

	expr -> if pred then . expr else expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 73
	lval           goto state 4

State 47

	pred -> pred and . pred                             (rule 39)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 72

State 48

	pred -> pred or . pred                              (rule 40)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	true           shift, and enter state 28
	false          shift, and enter state 29
	not            shift, and enter state 30
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 26
	lval           goto state 4
	pred           goto state 71

State 49

	pred -> expr comp . expr                            (rule 41)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 70
	lval           goto state 4

State 50

	comp -> '<' .                                       (rule 42)

	int            reduce using rule 42
	id             reduce using rule 42
	idc            reduce using rule 42
	if             reduce using rule 42
	for            reduce using rule 42
	match          reduce using rule 42
	trans          reduce using rule 42
	shrink         reduce using rule 42
	ext            reduce using rule 42
	sext           reduce using rule 42
	'('            reduce using rule 42
	'{'            reduce using rule 42


State 51

	comp -> '>' .                                       (rule 43)

	int            reduce using rule 43
	id             reduce using rule 43
	idc            reduce using rule 43
	if             reduce using rule 43
	for            reduce using rule 43
	match          reduce using rule 43
	trans          reduce using rule 43
	shrink         reduce using rule 43
	ext            reduce using rule 43
	sext           reduce using rule 43
	'('            reduce using rule 43
	'{'            reduce using rule 43


State 52

	comp -> '<=' .                                      (rule 44)

	int            reduce using rule 44
	id             reduce using rule 44
	idc            reduce using rule 44
	if             reduce using rule 44
	for            reduce using rule 44
	match          reduce using rule 44
	trans          reduce using rule 44
	shrink         reduce using rule 44
	ext            reduce using rule 44
	sext           reduce using rule 44
	'('            reduce using rule 44
	'{'            reduce using rule 44


State 53

	comp -> '>=' .                                      (rule 45)

	int            reduce using rule 45
	id             reduce using rule 45
	idc            reduce using rule 45
	if             reduce using rule 45
	for            reduce using rule 45
	match          reduce using rule 45
	trans          reduce using rule 45
	shrink         reduce using rule 45
	ext            reduce using rule 45
	sext           reduce using rule 45
	'('            reduce using rule 45
	'{'            reduce using rule 45


State 54

	comp -> '<$' .                                      (rule 46)

	int            reduce using rule 46
	id             reduce using rule 46
	idc            reduce using rule 46
	if             reduce using rule 46
	for            reduce using rule 46
	match          reduce using rule 46
	trans          reduce using rule 46
	shrink         reduce using rule 46
	ext            reduce using rule 46
	sext           reduce using rule 46
	'('            reduce using rule 46
	'{'            reduce using rule 46


State 55

	comp -> '<=$' .                                     (rule 48)

	int            reduce using rule 48
	id             reduce using rule 48
	idc            reduce using rule 48
	if             reduce using rule 48
	for            reduce using rule 48
	match          reduce using rule 48
	trans          reduce using rule 48
	shrink         reduce using rule 48
	ext            reduce using rule 48
	sext           reduce using rule 48
	'('            reduce using rule 48
	'{'            reduce using rule 48


State 56

	comp -> '>$' .                                      (rule 47)

	int            reduce using rule 47
	id             reduce using rule 47
	idc            reduce using rule 47
	if             reduce using rule 47
	for            reduce using rule 47
	match          reduce using rule 47
	trans          reduce using rule 47
	shrink         reduce using rule 47
	ext            reduce using rule 47
	sext           reduce using rule 47
	'('            reduce using rule 47
	'{'            reduce using rule 47


State 57

	comp -> '>=$' .                                     (rule 49)

	int            reduce using rule 49
	id             reduce using rule 49
	idc            reduce using rule 49
	if             reduce using rule 49
	for            reduce using rule 49
	match          reduce using rule 49
	trans          reduce using rule 49
	shrink         reduce using rule 49
	ext            reduce using rule 49
	sext           reduce using rule 49
	'('            reduce using rule 49
	'{'            reduce using rule 49


State 58

	expr -> for id '=' . expr to expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 69
	lval           goto state 4

State 59

	expr -> match expr with . '{' cases '}'             (rule 8)

	'{'            shift, and enter state 68


State 60

	expr -> '(' expr ')' .                              (rule 16)

	int            reduce using rule 16
	id             reduce using rule 16
	idc            reduce using rule 16
	var            reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	to             reduce using rule 16
	do             reduce using rule 16
	match          reduce using rule 16
	with           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	trans          reduce using rule 16
	shrink         reduce using rule 16
	ext            reduce using rule 16
	sext           reduce using rule 16
	'+'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<$'           reduce using rule 16
	'<=$'          reduce using rule 16
	'>$'           reduce using rule 16
	'>=$'          reduce using rule 16
	%eof           reduce using rule 16


State 61

	var_decl -> var id . ':' type_reg '=' expr          (rule 23)

	':'            shift, and enter state 67


State 62

	vars -> var_decl vars .                             (rule 22)

	int            reduce using rule 22
	id             reduce using rule 22
	idc            reduce using rule 22
	if             reduce using rule 22
	for            reduce using rule 22
	match          reduce using rule 22
	trans          reduce using rule 22
	shrink         reduce using rule 22
	ext            reduce using rule 22
	sext           reduce using rule 22
	'('            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22


State 63

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	exprs -> expr . exprs                               (rule 20)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            shift, and enter state 14
	'{'            shift, and enter state 15
	'}'            reduce using rule 19

	expr           goto state 63
	lval           goto state 4
	exprs          goto state 66

State 64

	expr -> '{' vars exprs . '}'                        (rule 2)

	'}'            shift, and enter state 65


State 65

	expr -> '{' vars exprs '}' .                        (rule 2)

	int            reduce using rule 2
	id             reduce using rule 2
	idc            reduce using rule 2
	var            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	for            reduce using rule 2
	to             reduce using rule 2
	do             reduce using rule 2
	match          reduce using rule 2
	with           reduce using rule 2
	and            reduce using rule 2
	or             reduce using rule 2
	trans          reduce using rule 2
	shrink         reduce using rule 2
	ext            reduce using rule 2
	sext           reduce using rule 2
	'+'            reduce using rule 2
	'*'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	'_'            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'<$'           reduce using rule 2
	'<=$'          reduce using rule 2
	'>$'           reduce using rule 2
	'>=$'          reduce using rule 2
	%eof           reduce using rule 2


State 66

	exprs -> expr exprs .                               (rule 20)

	'}'            reduce using rule 20


State 67

	var_decl -> var id ':' . type_reg '=' expr          (rule 23)

	bits           shift, and enter state 87
	range          shift, and enter state 88
	data           shift, and enter state 89
	void           shift, and enter state 90

	type_reg       goto state 86

State 68

	expr -> match expr with '{' . cases '}'             (rule 8)

	int            shift, and enter state 83
	id             shift, and enter state 84
	'}'            reduce using rule 27
	'_'            shift, and enter state 85

	cases          goto state 80
	case           goto state 81
	pat            goto state 82

State 69

	expr -> for id '=' expr . to expr do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	to             shift, and enter state 79
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37


State 70

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	pred -> expr comp expr .                            (rule 41)

	then           reduce using rule 41
	and            reduce using rule 41
	or             reduce using rule 41
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37


State 71

	pred -> pred . and pred                             (rule 39)
	pred -> pred . or pred                              (rule 40)
	pred -> pred or pred .                              (rule 40)

	then           reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40


State 72

	pred -> pred . and pred                             (rule 39)
	pred -> pred and pred .                             (rule 39)
	pred -> pred . or pred                              (rule 40)

	then           reduce using rule 39
	and            reduce using rule 39
	or             shift, and enter state 48


State 73

	expr -> if pred then expr . else expr               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	else           shift, and enter state 78
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37


State 74

	args -> expr ',' args .                             (rule 26)

	')'            reduce using rule 26


State 75

	lval -> id '[' expr ']' .                           (rule 18)

	'<-'           reduce using rule 18


State 76

	expr -> id '.' idc args . ')'                       (rule 7)

	')'            shift, and enter state 77


State 77

	expr -> id '.' idc args ')' .                       (rule 7)

	int            reduce using rule 7
	id             reduce using rule 7
	idc            reduce using rule 7
	var            reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	for            reduce using rule 7
	to             reduce using rule 7
	do             reduce using rule 7
	match          reduce using rule 7
	with           reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	trans          reduce using rule 7
	shrink         reduce using rule 7
	ext            reduce using rule 7
	sext           reduce using rule 7
	'+'            reduce using rule 7
	'*'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	'_'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'<$'           reduce using rule 7
	'<=$'          reduce using rule 7
	'>$'           reduce using rule 7
	'>=$'          reduce using rule 7
	%eof           reduce using rule 7


State 78

	expr -> if pred then expr else . expr               (rule 3)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 100
	lval           goto state 4

State 79

	expr -> for id '=' expr to . expr do expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 99
	lval           goto state 4

State 80

	expr -> match expr with '{' cases . '}'             (rule 8)

	'}'            shift, and enter state 98


State 81

	cases -> case . cases                               (rule 28)

	int            shift, and enter state 83
	id             shift, and enter state 84
	'}'            reduce using rule 27
	'_'            shift, and enter state 85

	cases          goto state 97
	case           goto state 81
	pat            goto state 82

State 82

	case -> pat . '->' expr                             (rule 29)

	'->'           shift, and enter state 96


State 83

	pat -> int .                                        (rule 31)

	','            reduce using rule 31
	'->'           reduce using rule 31


State 84

	pat -> id .                                         (rule 32)
	pat -> id . '(' pats ')'                            (rule 33)

	'('            shift, and enter state 95
	','            reduce using rule 32
	'->'           reduce using rule 32


State 85

	pat -> '_' .                                        (rule 30)

	','            reduce using rule 30
	'->'           reduce using rule 30


State 86

	var_decl -> var id ':' type_reg . '=' expr          (rule 23)

	'='            shift, and enter state 94


State 87

	type_reg -> bits . '[' int ']'                      (rule 50)

	'['            shift, and enter state 93


State 88

	type_reg -> range . '[' int ',' int ']'             (rule 51)

	'['            shift, and enter state 92


State 89

	type_reg -> data . id                               (rule 52)

	id             shift, and enter state 91


State 90

	type_reg -> void .                                  (rule 53)

	'='            reduce using rule 53


State 91

	type_reg -> data id .                               (rule 52)

	'='            reduce using rule 52


State 92

	type_reg -> range '[' . int ',' int ']'             (rule 51)

	int            shift, and enter state 107


State 93

	type_reg -> bits '[' . int ']'                      (rule 50)

	int            shift, and enter state 106


State 94

	var_decl -> var id ':' type_reg '=' . expr          (rule 23)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 105
	lval           goto state 4

State 95

	pat -> id '(' . pats ')'                            (rule 33)

	int            shift, and enter state 83
	id             shift, and enter state 84
	')'            reduce using rule 34
	'_'            shift, and enter state 85

	pat            goto state 103
	pats           goto state 104

State 96

	case -> pat '->' . expr                             (rule 29)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 102
	lval           goto state 4

State 97

	cases -> case cases .                               (rule 28)

	'}'            reduce using rule 28


State 98

	expr -> match expr with '{' cases '}' .             (rule 8)

	int            reduce using rule 8
	id             reduce using rule 8
	idc            reduce using rule 8
	var            reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	for            reduce using rule 8
	to             reduce using rule 8
	do             reduce using rule 8
	match          reduce using rule 8
	with           reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	trans          reduce using rule 8
	shrink         reduce using rule 8
	ext            reduce using rule 8
	sext           reduce using rule 8
	'+'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	'_'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'<$'           reduce using rule 8
	'<=$'          reduce using rule 8
	'>$'           reduce using rule 8
	'>=$'          reduce using rule 8
	%eof           reduce using rule 8


State 99

	expr -> for id '=' expr to expr . do expr           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	do             shift, and enter state 101
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37


State 100

	expr -> if pred then expr else expr .               (rule 3)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 3
	id             reduce using rule 3
	idc            reduce using rule 3
	var            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	for            reduce using rule 3
	to             reduce using rule 3
	do             reduce using rule 3
	match          reduce using rule 3
	with           reduce using rule 3
	and            reduce using rule 3
	or             reduce using rule 3
	trans          reduce using rule 3
	shrink         reduce using rule 3
	ext            reduce using rule 3
	sext           reduce using rule 3
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 3
	')'            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	'_'            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'<$'           reduce using rule 3
	'<=$'          reduce using rule 3
	'>$'           reduce using rule 3
	'>=$'          reduce using rule 3
	%eof           reduce using rule 3


State 101

	expr -> for id '=' expr to expr do . expr           (rule 4)

	int            shift, and enter state 2
	id             shift, and enter state 5
	idc            shift, and enter state 6
	if             shift, and enter state 7
	for            shift, and enter state 8
	match          shift, and enter state 9
	trans          shift, and enter state 10
	shrink         shift, and enter state 11
	ext            shift, and enter state 12
	sext           shift, and enter state 13
	'('            shift, and enter state 14
	'{'            shift, and enter state 15

	expr           goto state 112
	lval           goto state 4

State 102

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	case -> pat '->' expr .                             (rule 29)

	int            reduce using rule 29
	id             reduce using rule 29
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'}'            reduce using rule 29
	'_'            reduce using rule 29


State 103

	pats -> pat . ',' pats                              (rule 35)

	','            shift, and enter state 111


State 104

	pat -> id '(' pats . ')'                            (rule 33)

	')'            shift, and enter state 110


State 105

	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)
	var_decl -> var id ':' type_reg '=' expr .          (rule 23)

	int            reduce using rule 23
	id             reduce using rule 23
	idc            reduce using rule 23
	var            reduce using rule 23
	if             reduce using rule 23
	for            reduce using rule 23
	match          reduce using rule 23
	trans          reduce using rule 23
	shrink         reduce using rule 23
	ext            reduce using rule 23
	sext           reduce using rule 23
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23


State 106

	type_reg -> bits '[' int . ']'                      (rule 50)

	']'            shift, and enter state 109


State 107

	type_reg -> range '[' int . ',' int ']'             (rule 51)

	','            shift, and enter state 108


State 108

	type_reg -> range '[' int ',' . int ']'             (rule 51)

	int            shift, and enter state 114


State 109

	type_reg -> bits '[' int ']' .                      (rule 50)

	'='            reduce using rule 50


State 110

	pat -> id '(' pats ')' .                            (rule 33)

	','            reduce using rule 33
	'->'           reduce using rule 33


State 111

	pats -> pat ',' . pats                              (rule 35)

	int            shift, and enter state 83
	id             shift, and enter state 84
	')'            reduce using rule 34
	'_'            shift, and enter state 85

	pat            goto state 103
	pats           goto state 113

State 112

	expr -> for id '=' expr to expr do expr .           (rule 4)
	expr -> expr . '+' expr                             (rule 13)
	expr -> expr . '*' expr                             (rule 14)

	int            reduce using rule 4
	id             reduce using rule 4
	idc            reduce using rule 4
	var            reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	for            reduce using rule 4
	to             reduce using rule 4
	do             reduce using rule 4
	match          reduce using rule 4
	with           reduce using rule 4
	and            reduce using rule 4
	or             reduce using rule 4
	trans          reduce using rule 4
	shrink         reduce using rule 4
	ext            reduce using rule 4
	sext           reduce using rule 4
	'+'            shift, and enter state 36
	'*'            shift, and enter state 37
	'('            reduce using rule 4
	')'            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	'_'            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'<='           reduce using rule 4
	'>='           reduce using rule 4
	'<$'           reduce using rule 4
	'<=$'          reduce using rule 4
	'>$'           reduce using rule 4
	'>=$'          reduce using rule 4
	%eof           reduce using rule 4


State 113

	pats -> pat ',' pats .                              (rule 35)

	')'            reduce using rule 35


State 114

	type_reg -> range '[' int ',' int . ']'             (rule 51)

	']'            shift, and enter state 115


State 115

	type_reg -> range '[' int ',' int ']' .             (rule 51)

	'='            reduce using rule 51


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 54
Number of terminals: 48
Number of non-terminals: 14
Number of states: 116
