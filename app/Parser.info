-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> mode_decl                          (0)
	mode_decl -> mode id '{' state_decl main_decl func_decl '}'   (1)
	state_decl -> state '{' state_vars '}'             (2)
	state_vars ->                                      (3)
	state_vars -> state_var state_vars                 (4)
	state_var -> id ':' type_state '=' expr            (5)
	main_decl -> main expr                             (6)
	func_decl -> funcs '{' func_list '}'               (7)
	func_list ->                                       (8)
	func_list -> func func_list                        (9)
	func -> id '(' params ')' ':' type_reg expr        (10)
	func -> idc params ')' ':' type_reg expr           (11)
	params ->                                          (12)
	params -> param                                    (13)
	params -> param ',' params                         (14)
	param -> id ':' type_reg                           (15)
	expr -> int                                        (16)
	expr -> '{' vars exprs '}'                         (17)
	expr -> if pred then expr else expr                (18)
	expr -> for id '=' expr to expr do expr            (19)
	expr -> lval '<-' expr                             (20)
	expr -> idc args ')'                               (21)
	expr -> id '.' idc args ')'                        (22)
	expr -> match expr with '{' cases '}'              (23)
	expr -> trans '[' int ',' int ']' '(' expr ')'     (24)
	expr -> ext '[' int ']' '(' expr ')'               (25)
	expr -> sext '[' int ']' '(' expr ')'              (26)
	expr -> shrink '[' int ']' '(' expr ')'            (27)
	expr -> expr '+' expr                              (28)
	expr -> expr '-' expr                              (29)
	expr -> expr '&' expr                              (30)
	expr -> expr '^' expr                              (31)
	expr -> expr '|' expr                              (32)
	expr -> id                                         (33)
	expr -> '(' expr ')'                               (34)
	expr -> void                                       (35)
	lval -> id                                         (36)
	lval -> id '[' expr ']'                            (37)
	exprs ->                                           (38)
	exprs -> expr exprs                                (39)
	vars ->                                            (40)
	vars -> var_decl vars                              (41)
	var_decl -> var id ':' type_reg '=' expr           (42)
	args ->                                            (43)
	args -> expr                                       (44)
	args -> expr ',' args                              (45)
	cases ->                                           (46)
	cases -> case cases                                (47)
	case -> pat '->' expr                              (48)
	pat -> '_'                                         (49)
	pat -> int                                         (50)
	pat -> id                                          (51)
	pat -> id '(' pats ')'                             (52)
	pats ->                                            (53)
	pats -> pat ',' pats                               (54)
	pred -> true                                       (55)
	pred -> false                                      (56)
	pred -> not pred                                   (57)
	pred -> pred and pred                              (58)
	pred -> pred or pred                               (59)
	pred -> expr comp expr                             (60)
	comp -> '='                                        (61)
	comp -> '/='                                       (62)
	comp -> '<'                                        (63)
	comp -> '>'                                        (64)
	comp -> '<='                                       (65)
	comp -> '>='                                       (66)
	comp -> '<$'                                       (67)
	comp -> '>$'                                       (68)
	comp -> '<=$'                                      (69)
	comp -> '>=$'                                      (70)
	type_state -> type_reg                             (71)
	type_reg -> bits '[' int ']'                       (72)
	type_reg -> range '[' int ',' int ']'              (73)
	type_reg -> data id                                (74)
	type_reg -> void                                   (75)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	mode           { TokenMode }
	state          { TokenState }
	main           { TokenMain }
	funcs          { TokenFunctions }
	int            { TokenInt $$ }
	id             { TokenId $$ }
	idc            { TokenIdC $$ }
	var            { TokenVar }
	bits           { TokenBits }
	range          { TokenRange }
	data           { TokenData }
	void           { TokenVoid }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	for            { TokenFor }
	to             { TokenTo }
	do             { TokenDo }
	match          { TokenMatch }
	with           { TokenWith }
	true           { TokenTrue }
	false          { TokenFalse }
	not            { TokenNot }
	and            { TokenAnd }
	or             { TokenOr }
	trans          { TokenTransmute }
	shrink         { TokenShrink }
	ext            { TokenExtend }
	sext           { TokenSignExtend }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'&'            { TokenAmphersand }
	'|'            { TokenPipe }
	'^'            { TokenCaret }
	'='            { TokenEq }
	'/='           { TokenNeq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenLBrace }
	'}'            { TokenRBrace }
	'['            { TokenLBracket }
	']'            { TokenRBracket }
	':'            { TokenColon }
	','            { TokenComma }
	'.'            { TokenDot }
	'_'            { TokenUnderscore }
	'->'           { TokenRArrow }
	'<-'           { TokenLArrow }
	'<'            { TokenLe }
	'>'            { TokenGe }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'<$'           { TokenLeS }
	'<=$'          { TokenLeqS }
	'>$'           { TokenGeS }
	'>=$'          { TokenGeqS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	mode_decl       rule  1
	state_decl      rule  2
	state_vars      rules 3, 4
	state_var       rule  5
	main_decl       rule  6
	func_decl       rule  7
	func_list       rules 8, 9
	func            rules 10, 11
	params          rules 12, 13, 14
	param           rule  15
	expr            rules 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	lval            rules 36, 37
	exprs           rules 38, 39
	vars            rules 40, 41
	var_decl        rule  42
	args            rules 43, 44, 45
	cases           rules 46, 47
	case            rule  48
	pat             rules 49, 50, 51, 52
	pats            rules 53, 54
	pred            rules 55, 56, 57, 58, 59, 60
	comp            rules 61, 62, 63, 64, 65, 66, 67, 68, 69, 70
	type_state      rule  71
	type_reg        rules 72, 73, 74, 75

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . mode_decl                         (rule 0)

	mode           shift, and enter state 2

	mode_decl      goto state 3

State 1

	mode_decl -> . mode id '{' state_decl main_decl func_decl '}'    (rule 1)

	mode           shift, and enter state 2


State 2

	mode_decl -> mode . id '{' state_decl main_decl func_decl '}'    (rule 1)

	id             shift, and enter state 4


State 3

	%start_parse -> mode_decl .                         (rule 0)

	%eof           accept


State 4

	mode_decl -> mode id . '{' state_decl main_decl func_decl '}'    (rule 1)

	'{'            shift, and enter state 5


State 5

	mode_decl -> mode id '{' . state_decl main_decl func_decl '}'    (rule 1)

	state          shift, and enter state 7

	state_decl     goto state 6

State 6

	mode_decl -> mode id '{' state_decl . main_decl func_decl '}'    (rule 1)

	main           shift, and enter state 10

	main_decl      goto state 9

State 7

	state_decl -> state . '{' state_vars '}'            (rule 2)

	'{'            shift, and enter state 8


State 8

	state_decl -> state '{' . state_vars '}'            (rule 2)

	id             shift, and enter state 30
	'}'            reduce using rule 3

	state_vars     goto state 28
	state_var      goto state 29

State 9

	mode_decl -> mode id '{' state_decl main_decl . func_decl '}'    (rule 1)

	funcs          shift, and enter state 27

	func_decl      goto state 26

State 10

	main_decl -> main . expr                            (rule 6)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 11
	lval           goto state 12

State 11

	main_decl -> main expr .                            (rule 6)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 6
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 12

	expr -> lval . '<-' expr                            (rule 20)

	'<-'           shift, and enter state 55


State 13

	expr -> int .                                       (rule 16)

	funcs          reduce using rule 16
	int            reduce using rule 16
	id             reduce using rule 16
	idc            reduce using rule 16
	var            reduce using rule 16
	void           reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	for            reduce using rule 16
	to             reduce using rule 16
	do             reduce using rule 16
	match          reduce using rule 16
	with           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	trans          reduce using rule 16
	shrink         reduce using rule 16
	ext            reduce using rule 16
	sext           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'&'            reduce using rule 16
	'|'            reduce using rule 16
	'^'            reduce using rule 16
	'='            reduce using rule 16
	'/='           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<$'           reduce using rule 16
	'<=$'          reduce using rule 16
	'>$'           reduce using rule 16
	'>=$'          reduce using rule 16


State 14

	expr -> id . '.' idc args ')'                       (rule 22)
	expr -> id .                                        (rule 33)
	lval -> id .                                        (rule 36)
	lval -> id . '[' expr ']'                           (rule 37)

	funcs          reduce using rule 33
	int            reduce using rule 33
	id             reduce using rule 33
	idc            reduce using rule 33
	var            reduce using rule 33
	void           reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	for            reduce using rule 33
	to             reduce using rule 33
	do             reduce using rule 33
	match          reduce using rule 33
	with           reduce using rule 33
	and            reduce using rule 33
	or             reduce using rule 33
	trans          reduce using rule 33
	shrink         reduce using rule 33
	ext            reduce using rule 33
	sext           reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'&'            reduce using rule 33
	'|'            reduce using rule 33
	'^'            reduce using rule 33
	'='            reduce using rule 33
	'/='           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'['            shift, and enter state 53
	']'            reduce using rule 33
	','            reduce using rule 33
	'.'            shift, and enter state 54
	'_'            reduce using rule 33
	'<-'           reduce using rule 36
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<$'           reduce using rule 33
	'<=$'          reduce using rule 33
	'>$'           reduce using rule 33
	'>=$'          reduce using rule 33


State 15

	expr -> idc . args ')'                              (rule 21)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 43
	'{'            shift, and enter state 25

	expr           goto state 51
	lval           goto state 12
	args           goto state 52

State 16

	expr -> void .                                      (rule 35)

	funcs          reduce using rule 35
	int            reduce using rule 35
	id             reduce using rule 35
	idc            reduce using rule 35
	var            reduce using rule 35
	void           reduce using rule 35
	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	for            reduce using rule 35
	to             reduce using rule 35
	do             reduce using rule 35
	match          reduce using rule 35
	with           reduce using rule 35
	and            reduce using rule 35
	or             reduce using rule 35
	trans          reduce using rule 35
	shrink         reduce using rule 35
	ext            reduce using rule 35
	sext           reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'&'            reduce using rule 35
	'|'            reduce using rule 35
	'^'            reduce using rule 35
	'='            reduce using rule 35
	'/='           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	'_'            reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	'<$'           reduce using rule 35
	'<=$'          reduce using rule 35
	'>$'           reduce using rule 35
	'>=$'          reduce using rule 35


State 17

	expr -> if . pred then expr else expr               (rule 18)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 48
	false          shift, and enter state 49
	not            shift, and enter state 50
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 46
	lval           goto state 12
	pred           goto state 47

State 18

	expr -> for . id '=' expr to expr do expr           (rule 19)

	id             shift, and enter state 45


State 19

	expr -> match . expr with '{' cases '}'             (rule 23)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 44
	lval           goto state 12

State 20

	expr -> trans . '[' int ',' int ']' '(' expr ')'    (rule 24)

	'['            shift, and enter state 43


State 21

	expr -> shrink . '[' int ']' '(' expr ')'           (rule 27)

	'['            shift, and enter state 42


State 22

	expr -> ext . '[' int ']' '(' expr ')'              (rule 25)

	'['            shift, and enter state 41


State 23

	expr -> sext . '[' int ']' '(' expr ')'             (rule 26)

	'['            shift, and enter state 40


State 24

	expr -> '(' . expr ')'                              (rule 34)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 39
	lval           goto state 12

State 25

	expr -> '{' . vars exprs '}'                        (rule 17)

	int            reduce using rule 40
	id             reduce using rule 40
	idc            reduce using rule 40
	var            shift, and enter state 38
	void           reduce using rule 40
	if             reduce using rule 40
	for            reduce using rule 40
	match          reduce using rule 40
	trans          reduce using rule 40
	shrink         reduce using rule 40
	ext            reduce using rule 40
	sext           reduce using rule 40
	'('            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40

	vars           goto state 36
	var_decl       goto state 37

State 26

	mode_decl -> mode id '{' state_decl main_decl func_decl . '}'    (rule 1)

	'}'            shift, and enter state 35


State 27

	func_decl -> funcs . '{' func_list '}'              (rule 7)

	'{'            shift, and enter state 34


State 28

	state_decl -> state '{' state_vars . '}'            (rule 2)

	'}'            shift, and enter state 33


State 29

	state_vars -> state_var . state_vars                (rule 4)

	id             shift, and enter state 30
	'}'            reduce using rule 3

	state_vars     goto state 32
	state_var      goto state 29

State 30

	state_var -> id . ':' type_state '=' expr           (rule 5)

	':'            shift, and enter state 31


State 31

	state_var -> id ':' . type_state '=' expr           (rule 5)

	bits           shift, and enter state 103
	range          shift, and enter state 104
	data           shift, and enter state 105
	void           shift, and enter state 106

	type_state     goto state 101
	type_reg       goto state 102

State 32

	state_vars -> state_var state_vars .                (rule 4)

	'}'            reduce using rule 4


State 33

	state_decl -> state '{' state_vars '}' .            (rule 2)

	main           reduce using rule 2


State 34

	func_decl -> funcs '{' . func_list '}'              (rule 7)

	id             shift, and enter state 99
	idc            shift, and enter state 100
	'}'            reduce using rule 8

	func_list      goto state 97
	func           goto state 98

State 35

	mode_decl -> mode id '{' state_decl main_decl func_decl '}' .    (rule 1)

	%eof           reduce using rule 1


State 36

	expr -> '{' vars . exprs '}'                        (rule 17)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25
	'}'            reduce using rule 38

	expr           goto state 95
	lval           goto state 12
	exprs          goto state 96

State 37

	vars -> var_decl . vars                             (rule 41)

	int            reduce using rule 40
	id             reduce using rule 40
	idc            reduce using rule 40
	var            shift, and enter state 38
	void           reduce using rule 40
	if             reduce using rule 40
	for            reduce using rule 40
	match          reduce using rule 40
	trans          reduce using rule 40
	shrink         reduce using rule 40
	ext            reduce using rule 40
	sext           reduce using rule 40
	'('            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40

	vars           goto state 94
	var_decl       goto state 37

State 38

	var_decl -> var . id ':' type_reg '=' expr          (rule 42)

	id             shift, and enter state 93


State 39

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	expr -> '(' expr . ')'                              (rule 34)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            shift, and enter state 92


State 40

	expr -> sext '[' . int ']' '(' expr ')'             (rule 26)

	int            shift, and enter state 91


State 41

	expr -> ext '[' . int ']' '(' expr ')'              (rule 25)

	int            shift, and enter state 90


State 42

	expr -> shrink '[' . int ']' '(' expr ')'           (rule 27)

	int            shift, and enter state 89


State 43

	expr -> trans '[' . int ',' int ']' '(' expr ')'    (rule 24)

	int            shift, and enter state 88


State 44

	expr -> match expr . with '{' cases '}'             (rule 23)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	with           shift, and enter state 87
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 45

	expr -> for id . '=' expr to expr do expr           (rule 19)

	'='            shift, and enter state 86


State 46

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	pred -> expr . comp expr                            (rule 60)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'='            shift, and enter state 76
	'/='           shift, and enter state 77
	'<'            shift, and enter state 78
	'>'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>='           shift, and enter state 81
	'<$'           shift, and enter state 82
	'<=$'          shift, and enter state 83
	'>$'           shift, and enter state 84
	'>=$'          shift, and enter state 85

	comp           goto state 75

State 47

	expr -> if pred . then expr else expr               (rule 18)
	pred -> pred . and pred                             (rule 58)
	pred -> pred . or pred                              (rule 59)

	then           shift, and enter state 72
	and            shift, and enter state 73
	or             shift, and enter state 74


State 48

	pred -> true .                                      (rule 55)

	then           reduce using rule 55
	and            reduce using rule 55
	or             reduce using rule 55


State 49

	pred -> false .                                     (rule 56)

	then           reduce using rule 56
	and            reduce using rule 56
	or             reduce using rule 56


State 50

	pred -> not . pred                                  (rule 57)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 48
	false          shift, and enter state 49
	not            shift, and enter state 50
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 46
	lval           goto state 12
	pred           goto state 71

State 51

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	args -> expr .                                      (rule 44)
	args -> expr . ',' args                             (rule 45)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            reduce using rule 44
	','            shift, and enter state 70


State 52

	expr -> idc args . ')'                              (rule 21)

	')'            shift, and enter state 69


State 53

	lval -> id '[' . expr ']'                           (rule 37)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 68
	lval           goto state 12

State 54

	expr -> id '.' . idc args ')'                       (rule 22)

	idc            shift, and enter state 67


State 55

	expr -> lval '<-' . expr                            (rule 20)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 66
	lval           goto state 12

State 56

	expr -> expr '+' . expr                             (rule 28)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 65
	lval           goto state 12

State 57

	expr -> expr '-' . expr                             (rule 29)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 64
	lval           goto state 12

State 58

	expr -> expr '&' . expr                             (rule 30)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 63
	lval           goto state 12

State 59

	expr -> expr '|' . expr                             (rule 32)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 62
	lval           goto state 12

State 60

	expr -> expr '^' . expr                             (rule 31)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 61
	lval           goto state 12

State 61

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr '^' expr .                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 31
	int            reduce using rule 31
	id             reduce using rule 31
	idc            reduce using rule 31
	var            reduce using rule 31
	void           reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	for            reduce using rule 31
	to             reduce using rule 31
	do             reduce using rule 31
	match          reduce using rule 31
	with           reduce using rule 31
	and            reduce using rule 31
	or             reduce using rule 31
	trans          reduce using rule 31
	shrink         reduce using rule 31
	ext            reduce using rule 31
	sext           reduce using rule 31
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            reduce using rule 31
	'^'            reduce using rule 31
	'='            reduce using rule 31
	'/='           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	'_'            reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	'<$'           reduce using rule 31
	'<=$'          reduce using rule 31
	'>$'           reduce using rule 31
	'>=$'          reduce using rule 31


State 62

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	expr -> expr '|' expr .                             (rule 32)

	funcs          reduce using rule 32
	int            reduce using rule 32
	id             reduce using rule 32
	idc            reduce using rule 32
	var            reduce using rule 32
	void           reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	for            reduce using rule 32
	to             reduce using rule 32
	do             reduce using rule 32
	match          reduce using rule 32
	with           reduce using rule 32
	and            reduce using rule 32
	or             reduce using rule 32
	trans          reduce using rule 32
	shrink         reduce using rule 32
	ext            reduce using rule 32
	sext           reduce using rule 32
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            reduce using rule 32
	'^'            shift, and enter state 60
	'='            reduce using rule 32
	'/='           reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	'_'            reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	'<$'           reduce using rule 32
	'<=$'          reduce using rule 32
	'>$'           reduce using rule 32
	'>=$'          reduce using rule 32


State 63

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr '&' expr .                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 30
	int            reduce using rule 30
	id             reduce using rule 30
	idc            reduce using rule 30
	var            reduce using rule 30
	void           reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	for            reduce using rule 30
	to             reduce using rule 30
	do             reduce using rule 30
	match          reduce using rule 30
	with           reduce using rule 30
	and            reduce using rule 30
	or             reduce using rule 30
	trans          reduce using rule 30
	shrink         reduce using rule 30
	ext            reduce using rule 30
	sext           reduce using rule 30
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            reduce using rule 30
	'|'            reduce using rule 30
	'^'            reduce using rule 30
	'='            reduce using rule 30
	'/='           reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	'_'            reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	'<$'           reduce using rule 30
	'<=$'          reduce using rule 30
	'>$'           reduce using rule 30
	'>=$'          reduce using rule 30


State 64

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr '-' expr .                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 29
	int            reduce using rule 29
	id             reduce using rule 29
	idc            reduce using rule 29
	var            reduce using rule 29
	void           reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	for            reduce using rule 29
	to             reduce using rule 29
	do             reduce using rule 29
	match          reduce using rule 29
	with           reduce using rule 29
	and            reduce using rule 29
	or             reduce using rule 29
	trans          reduce using rule 29
	shrink         reduce using rule 29
	ext            reduce using rule 29
	sext           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'&'            reduce using rule 29
	'|'            reduce using rule 29
	'^'            reduce using rule 29
	'='            reduce using rule 29
	'/='           reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	'_'            reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	'<$'           reduce using rule 29
	'<=$'          reduce using rule 29
	'>$'           reduce using rule 29
	'>=$'          reduce using rule 29


State 65

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr '+' expr .                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 28
	int            reduce using rule 28
	id             reduce using rule 28
	idc            reduce using rule 28
	var            reduce using rule 28
	void           reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	for            reduce using rule 28
	to             reduce using rule 28
	do             reduce using rule 28
	match          reduce using rule 28
	with           reduce using rule 28
	and            reduce using rule 28
	or             reduce using rule 28
	trans          reduce using rule 28
	shrink         reduce using rule 28
	ext            reduce using rule 28
	sext           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'&'            reduce using rule 28
	'|'            reduce using rule 28
	'^'            reduce using rule 28
	'='            reduce using rule 28
	'/='           reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	'_'            reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'<$'           reduce using rule 28
	'<=$'          reduce using rule 28
	'>$'           reduce using rule 28
	'>=$'          reduce using rule 28


State 66

	expr -> lval '<-' expr .                            (rule 20)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 20
	int            reduce using rule 20
	id             reduce using rule 20
	idc            reduce using rule 20
	var            reduce using rule 20
	void           reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	for            reduce using rule 20
	to             reduce using rule 20
	do             reduce using rule 20
	match          reduce using rule 20
	with           reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	trans          reduce using rule 20
	shrink         reduce using rule 20
	ext            reduce using rule 20
	sext           reduce using rule 20
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'='            reduce using rule 20
	'/='           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	'_'            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'<$'           reduce using rule 20
	'<=$'          reduce using rule 20
	'>$'           reduce using rule 20
	'>=$'          reduce using rule 20


State 67

	expr -> id '.' idc . args ')'                       (rule 22)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 43
	'{'            shift, and enter state 25

	expr           goto state 51
	lval           goto state 12
	args           goto state 132

State 68

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	lval -> id '[' expr . ']'                           (rule 37)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	']'            shift, and enter state 131


State 69

	expr -> idc args ')' .                              (rule 21)

	funcs          reduce using rule 21
	int            reduce using rule 21
	id             reduce using rule 21
	idc            reduce using rule 21
	var            reduce using rule 21
	void           reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	for            reduce using rule 21
	to             reduce using rule 21
	do             reduce using rule 21
	match          reduce using rule 21
	with           reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	trans          reduce using rule 21
	shrink         reduce using rule 21
	ext            reduce using rule 21
	sext           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'&'            reduce using rule 21
	'|'            reduce using rule 21
	'^'            reduce using rule 21
	'='            reduce using rule 21
	'/='           reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	'_'            reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'<='           reduce using rule 21
	'>='           reduce using rule 21
	'<$'           reduce using rule 21
	'<=$'          reduce using rule 21
	'>$'           reduce using rule 21
	'>=$'          reduce using rule 21


State 70

	args -> expr ',' . args                             (rule 45)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 43
	'{'            shift, and enter state 25

	expr           goto state 51
	lval           goto state 12
	args           goto state 130

State 71

	pred -> not pred .                                  (rule 57)
	pred -> pred . and pred                             (rule 58)
	pred -> pred . or pred                              (rule 59)

	then           reduce using rule 57
	and            reduce using rule 57
	or             reduce using rule 57


State 72

	expr -> if pred then . expr else expr               (rule 18)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 129
	lval           goto state 12

State 73

	pred -> pred and . pred                             (rule 58)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 48
	false          shift, and enter state 49
	not            shift, and enter state 50
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 46
	lval           goto state 12
	pred           goto state 128

State 74

	pred -> pred or . pred                              (rule 59)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	true           shift, and enter state 48
	false          shift, and enter state 49
	not            shift, and enter state 50
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 46
	lval           goto state 12
	pred           goto state 127

State 75

	pred -> expr comp . expr                            (rule 60)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 126
	lval           goto state 12

State 76

	comp -> '=' .                                       (rule 61)

	int            reduce using rule 61
	id             reduce using rule 61
	idc            reduce using rule 61
	void           reduce using rule 61
	if             reduce using rule 61
	for            reduce using rule 61
	match          reduce using rule 61
	trans          reduce using rule 61
	shrink         reduce using rule 61
	ext            reduce using rule 61
	sext           reduce using rule 61
	'('            reduce using rule 61
	'{'            reduce using rule 61


State 77

	comp -> '/=' .                                      (rule 62)

	int            reduce using rule 62
	id             reduce using rule 62
	idc            reduce using rule 62
	void           reduce using rule 62
	if             reduce using rule 62
	for            reduce using rule 62
	match          reduce using rule 62
	trans          reduce using rule 62
	shrink         reduce using rule 62
	ext            reduce using rule 62
	sext           reduce using rule 62
	'('            reduce using rule 62
	'{'            reduce using rule 62


State 78

	comp -> '<' .                                       (rule 63)

	int            reduce using rule 63
	id             reduce using rule 63
	idc            reduce using rule 63
	void           reduce using rule 63
	if             reduce using rule 63
	for            reduce using rule 63
	match          reduce using rule 63
	trans          reduce using rule 63
	shrink         reduce using rule 63
	ext            reduce using rule 63
	sext           reduce using rule 63
	'('            reduce using rule 63
	'{'            reduce using rule 63


State 79

	comp -> '>' .                                       (rule 64)

	int            reduce using rule 64
	id             reduce using rule 64
	idc            reduce using rule 64
	void           reduce using rule 64
	if             reduce using rule 64
	for            reduce using rule 64
	match          reduce using rule 64
	trans          reduce using rule 64
	shrink         reduce using rule 64
	ext            reduce using rule 64
	sext           reduce using rule 64
	'('            reduce using rule 64
	'{'            reduce using rule 64


State 80

	comp -> '<=' .                                      (rule 65)

	int            reduce using rule 65
	id             reduce using rule 65
	idc            reduce using rule 65
	void           reduce using rule 65
	if             reduce using rule 65
	for            reduce using rule 65
	match          reduce using rule 65
	trans          reduce using rule 65
	shrink         reduce using rule 65
	ext            reduce using rule 65
	sext           reduce using rule 65
	'('            reduce using rule 65
	'{'            reduce using rule 65


State 81

	comp -> '>=' .                                      (rule 66)

	int            reduce using rule 66
	id             reduce using rule 66
	idc            reduce using rule 66
	void           reduce using rule 66
	if             reduce using rule 66
	for            reduce using rule 66
	match          reduce using rule 66
	trans          reduce using rule 66
	shrink         reduce using rule 66
	ext            reduce using rule 66
	sext           reduce using rule 66
	'('            reduce using rule 66
	'{'            reduce using rule 66


State 82

	comp -> '<$' .                                      (rule 67)

	int            reduce using rule 67
	id             reduce using rule 67
	idc            reduce using rule 67
	void           reduce using rule 67
	if             reduce using rule 67
	for            reduce using rule 67
	match          reduce using rule 67
	trans          reduce using rule 67
	shrink         reduce using rule 67
	ext            reduce using rule 67
	sext           reduce using rule 67
	'('            reduce using rule 67
	'{'            reduce using rule 67


State 83

	comp -> '<=$' .                                     (rule 69)

	int            reduce using rule 69
	id             reduce using rule 69
	idc            reduce using rule 69
	void           reduce using rule 69
	if             reduce using rule 69
	for            reduce using rule 69
	match          reduce using rule 69
	trans          reduce using rule 69
	shrink         reduce using rule 69
	ext            reduce using rule 69
	sext           reduce using rule 69
	'('            reduce using rule 69
	'{'            reduce using rule 69


State 84

	comp -> '>$' .                                      (rule 68)

	int            reduce using rule 68
	id             reduce using rule 68
	idc            reduce using rule 68
	void           reduce using rule 68
	if             reduce using rule 68
	for            reduce using rule 68
	match          reduce using rule 68
	trans          reduce using rule 68
	shrink         reduce using rule 68
	ext            reduce using rule 68
	sext           reduce using rule 68
	'('            reduce using rule 68
	'{'            reduce using rule 68


State 85

	comp -> '>=$' .                                     (rule 70)

	int            reduce using rule 70
	id             reduce using rule 70
	idc            reduce using rule 70
	void           reduce using rule 70
	if             reduce using rule 70
	for            reduce using rule 70
	match          reduce using rule 70
	trans          reduce using rule 70
	shrink         reduce using rule 70
	ext            reduce using rule 70
	sext           reduce using rule 70
	'('            reduce using rule 70
	'{'            reduce using rule 70


State 86

	expr -> for id '=' . expr to expr do expr           (rule 19)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 125
	lval           goto state 12

State 87

	expr -> match expr with . '{' cases '}'             (rule 23)

	'{'            shift, and enter state 124


State 88

	expr -> trans '[' int . ',' int ']' '(' expr ')'    (rule 24)

	','            shift, and enter state 123


State 89

	expr -> shrink '[' int . ']' '(' expr ')'           (rule 27)

	']'            shift, and enter state 122


State 90

	expr -> ext '[' int . ']' '(' expr ')'              (rule 25)

	']'            shift, and enter state 121


State 91

	expr -> sext '[' int . ']' '(' expr ')'             (rule 26)

	']'            shift, and enter state 120


State 92

	expr -> '(' expr ')' .                              (rule 34)

	funcs          reduce using rule 34
	int            reduce using rule 34
	id             reduce using rule 34
	idc            reduce using rule 34
	var            reduce using rule 34
	void           reduce using rule 34
	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	for            reduce using rule 34
	to             reduce using rule 34
	do             reduce using rule 34
	match          reduce using rule 34
	with           reduce using rule 34
	and            reduce using rule 34
	or             reduce using rule 34
	trans          reduce using rule 34
	shrink         reduce using rule 34
	ext            reduce using rule 34
	sext           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'&'            reduce using rule 34
	'|'            reduce using rule 34
	'^'            reduce using rule 34
	'='            reduce using rule 34
	'/='           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	'_'            reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	'<$'           reduce using rule 34
	'<=$'          reduce using rule 34
	'>$'           reduce using rule 34
	'>=$'          reduce using rule 34


State 93

	var_decl -> var id . ':' type_reg '=' expr          (rule 42)

	':'            shift, and enter state 119


State 94

	vars -> var_decl vars .                             (rule 41)

	int            reduce using rule 41
	id             reduce using rule 41
	idc            reduce using rule 41
	void           reduce using rule 41
	if             reduce using rule 41
	for            reduce using rule 41
	match          reduce using rule 41
	trans          reduce using rule 41
	shrink         reduce using rule 41
	ext            reduce using rule 41
	sext           reduce using rule 41
	'('            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41


State 95

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	exprs -> expr . exprs                               (rule 39)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'('            shift, and enter state 24
	'{'            shift, and enter state 25
	'}'            reduce using rule 38

	expr           goto state 95
	lval           goto state 12
	exprs          goto state 118

State 96

	expr -> '{' vars exprs . '}'                        (rule 17)

	'}'            shift, and enter state 117


State 97

	func_decl -> funcs '{' func_list . '}'              (rule 7)

	'}'            shift, and enter state 116


State 98

	func_list -> func . func_list                       (rule 9)

	id             shift, and enter state 99
	idc            shift, and enter state 100
	'}'            reduce using rule 8

	func_list      goto state 115
	func           goto state 98

State 99

	func -> id . '(' params ')' ':' type_reg expr       (rule 10)

	'('            shift, and enter state 114


State 100

	func -> idc . params ')' ':' type_reg expr          (rule 11)

	id             shift, and enter state 113
	')'            reduce using rule 12

	params         goto state 111
	param          goto state 112

State 101

	state_var -> id ':' type_state . '=' expr           (rule 5)

	'='            shift, and enter state 110


State 102

	type_state -> type_reg .                            (rule 71)

	'='            reduce using rule 71


State 103

	type_reg -> bits . '[' int ']'                      (rule 72)

	'['            shift, and enter state 109


State 104

	type_reg -> range . '[' int ',' int ']'             (rule 73)

	'['            shift, and enter state 108


State 105

	type_reg -> data . id                               (rule 74)

	id             shift, and enter state 107


State 106

	type_reg -> void .                                  (rule 75)

	int            reduce using rule 75
	id             reduce using rule 75
	idc            reduce using rule 75
	void           reduce using rule 75
	if             reduce using rule 75
	for            reduce using rule 75
	match          reduce using rule 75
	trans          reduce using rule 75
	shrink         reduce using rule 75
	ext            reduce using rule 75
	sext           reduce using rule 75
	'='            reduce using rule 75
	'('            reduce using rule 75
	')'            reduce using rule 75
	'{'            reduce using rule 75
	','            reduce using rule 75


State 107

	type_reg -> data id .                               (rule 74)

	int            reduce using rule 74
	id             reduce using rule 74
	idc            reduce using rule 74
	void           reduce using rule 74
	if             reduce using rule 74
	for            reduce using rule 74
	match          reduce using rule 74
	trans          reduce using rule 74
	shrink         reduce using rule 74
	ext            reduce using rule 74
	sext           reduce using rule 74
	'='            reduce using rule 74
	'('            reduce using rule 74
	')'            reduce using rule 74
	'{'            reduce using rule 74
	','            reduce using rule 74


State 108

	type_reg -> range '[' . int ',' int ']'             (rule 73)

	int            shift, and enter state 153


State 109

	type_reg -> bits '[' . int ']'                      (rule 72)

	int            shift, and enter state 152


State 110

	state_var -> id ':' type_state '=' . expr           (rule 5)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 151
	lval           goto state 12

State 111

	func -> idc params . ')' ':' type_reg expr          (rule 11)

	')'            shift, and enter state 150


State 112

	params -> param .                                   (rule 13)
	params -> param . ',' params                        (rule 14)

	')'            reduce using rule 13
	','            shift, and enter state 149


State 113

	param -> id . ':' type_reg                          (rule 15)

	':'            shift, and enter state 148


State 114

	func -> id '(' . params ')' ':' type_reg expr       (rule 10)

	id             shift, and enter state 113
	')'            reduce using rule 12

	params         goto state 147
	param          goto state 112

State 115

	func_list -> func func_list .                       (rule 9)

	'}'            reduce using rule 9


State 116

	func_decl -> funcs '{' func_list '}' .              (rule 7)

	'}'            reduce using rule 7


State 117

	expr -> '{' vars exprs '}' .                        (rule 17)

	funcs          reduce using rule 17
	int            reduce using rule 17
	id             reduce using rule 17
	idc            reduce using rule 17
	var            reduce using rule 17
	void           reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	for            reduce using rule 17
	to             reduce using rule 17
	do             reduce using rule 17
	match          reduce using rule 17
	with           reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	trans          reduce using rule 17
	shrink         reduce using rule 17
	ext            reduce using rule 17
	sext           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'&'            reduce using rule 17
	'|'            reduce using rule 17
	'^'            reduce using rule 17
	'='            reduce using rule 17
	'/='           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	'_'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'<$'           reduce using rule 17
	'<=$'          reduce using rule 17
	'>$'           reduce using rule 17
	'>=$'          reduce using rule 17


State 118

	exprs -> expr exprs .                               (rule 39)

	'}'            reduce using rule 39


State 119

	var_decl -> var id ':' . type_reg '=' expr          (rule 42)

	bits           shift, and enter state 103
	range          shift, and enter state 104
	data           shift, and enter state 105
	void           shift, and enter state 106

	type_reg       goto state 146

State 120

	expr -> sext '[' int ']' . '(' expr ')'             (rule 26)

	'('            shift, and enter state 145


State 121

	expr -> ext '[' int ']' . '(' expr ')'              (rule 25)

	'('            shift, and enter state 144


State 122

	expr -> shrink '[' int ']' . '(' expr ')'           (rule 27)

	'('            shift, and enter state 143


State 123

	expr -> trans '[' int ',' . int ']' '(' expr ')'    (rule 24)

	int            shift, and enter state 142


State 124

	expr -> match expr with '{' . cases '}'             (rule 23)

	int            shift, and enter state 139
	id             shift, and enter state 140
	'}'            reduce using rule 46
	'_'            shift, and enter state 141

	cases          goto state 136
	case           goto state 137
	pat            goto state 138

State 125

	expr -> for id '=' expr . to expr do expr           (rule 19)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	to             shift, and enter state 135
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 126

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	pred -> expr comp expr .                            (rule 60)

	then           reduce using rule 60
	and            reduce using rule 60
	or             reduce using rule 60
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 127

	pred -> pred . and pred                             (rule 58)
	pred -> pred . or pred                              (rule 59)
	pred -> pred or pred .                              (rule 59)

	then           reduce using rule 59
	and            shift, and enter state 73
	or             reduce using rule 59


State 128

	pred -> pred . and pred                             (rule 58)
	pred -> pred and pred .                             (rule 58)
	pred -> pred . or pred                              (rule 59)

	then           reduce using rule 58
	and            reduce using rule 58
	or             reduce using rule 58


State 129

	expr -> if pred then expr . else expr               (rule 18)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	else           shift, and enter state 134
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 130

	args -> expr ',' args .                             (rule 45)

	')'            reduce using rule 45


State 131

	lval -> id '[' expr ']' .                           (rule 37)

	'<-'           reduce using rule 37


State 132

	expr -> id '.' idc args . ')'                       (rule 22)

	')'            shift, and enter state 133


State 133

	expr -> id '.' idc args ')' .                       (rule 22)

	funcs          reduce using rule 22
	int            reduce using rule 22
	id             reduce using rule 22
	idc            reduce using rule 22
	var            reduce using rule 22
	void           reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	for            reduce using rule 22
	to             reduce using rule 22
	do             reduce using rule 22
	match          reduce using rule 22
	with           reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	trans          reduce using rule 22
	shrink         reduce using rule 22
	ext            reduce using rule 22
	sext           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'&'            reduce using rule 22
	'|'            reduce using rule 22
	'^'            reduce using rule 22
	'='            reduce using rule 22
	'/='           reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	'_'            reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	'<='           reduce using rule 22
	'>='           reduce using rule 22
	'<$'           reduce using rule 22
	'<=$'          reduce using rule 22
	'>$'           reduce using rule 22
	'>=$'          reduce using rule 22


State 134

	expr -> if pred then expr else . expr               (rule 18)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 170
	lval           goto state 12

State 135

	expr -> for id '=' expr to . expr do expr           (rule 19)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 169
	lval           goto state 12

State 136

	expr -> match expr with '{' cases . '}'             (rule 23)

	'}'            shift, and enter state 168


State 137

	cases -> case . cases                               (rule 47)

	int            shift, and enter state 139
	id             shift, and enter state 140
	'}'            reduce using rule 46
	'_'            shift, and enter state 141

	cases          goto state 167
	case           goto state 137
	pat            goto state 138

State 138

	case -> pat . '->' expr                             (rule 48)

	'->'           shift, and enter state 166


State 139

	pat -> int .                                        (rule 50)

	','            reduce using rule 50
	'->'           reduce using rule 50


State 140

	pat -> id .                                         (rule 51)
	pat -> id . '(' pats ')'                            (rule 52)

	'('            shift, and enter state 165
	','            reduce using rule 51
	'->'           reduce using rule 51


State 141

	pat -> '_' .                                        (rule 49)

	','            reduce using rule 49
	'->'           reduce using rule 49


State 142

	expr -> trans '[' int ',' int . ']' '(' expr ')'    (rule 24)

	']'            shift, and enter state 164


State 143

	expr -> shrink '[' int ']' '(' . expr ')'           (rule 27)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 163
	lval           goto state 12

State 144

	expr -> ext '[' int ']' '(' . expr ')'              (rule 25)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 162
	lval           goto state 12

State 145

	expr -> sext '[' int ']' '(' . expr ')'             (rule 26)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 161
	lval           goto state 12

State 146

	var_decl -> var id ':' type_reg . '=' expr          (rule 42)

	'='            shift, and enter state 160


State 147

	func -> id '(' params . ')' ':' type_reg expr       (rule 10)

	')'            shift, and enter state 159


State 148

	param -> id ':' . type_reg                          (rule 15)

	bits           shift, and enter state 103
	range          shift, and enter state 104
	data           shift, and enter state 105
	void           shift, and enter state 106

	type_reg       goto state 158

State 149

	params -> param ',' . params                        (rule 14)

	id             shift, and enter state 113
	')'            reduce using rule 12

	params         goto state 157
	param          goto state 112

State 150

	func -> idc params ')' . ':' type_reg expr          (rule 11)

	':'            shift, and enter state 156


State 151

	state_var -> id ':' type_state '=' expr .           (rule 5)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	id             reduce using rule 5
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'}'            reduce using rule 5


State 152

	type_reg -> bits '[' int . ']'                      (rule 72)

	']'            shift, and enter state 155


State 153

	type_reg -> range '[' int . ',' int ']'             (rule 73)

	','            shift, and enter state 154


State 154

	type_reg -> range '[' int ',' . int ']'             (rule 73)

	int            shift, and enter state 182


State 155

	type_reg -> bits '[' int ']' .                      (rule 72)

	int            reduce using rule 72
	id             reduce using rule 72
	idc            reduce using rule 72
	void           reduce using rule 72
	if             reduce using rule 72
	for            reduce using rule 72
	match          reduce using rule 72
	trans          reduce using rule 72
	shrink         reduce using rule 72
	ext            reduce using rule 72
	sext           reduce using rule 72
	'='            reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'{'            reduce using rule 72
	','            reduce using rule 72


State 156

	func -> idc params ')' ':' . type_reg expr          (rule 11)

	bits           shift, and enter state 103
	range          shift, and enter state 104
	data           shift, and enter state 105
	void           shift, and enter state 106

	type_reg       goto state 181

State 157

	params -> param ',' params .                        (rule 14)

	')'            reduce using rule 14


State 158

	param -> id ':' type_reg .                          (rule 15)

	')'            reduce using rule 15
	','            reduce using rule 15


State 159

	func -> id '(' params ')' . ':' type_reg expr       (rule 10)

	':'            shift, and enter state 180


State 160

	var_decl -> var id ':' type_reg '=' . expr          (rule 42)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 179
	lval           goto state 12

State 161

	expr -> sext '[' int ']' '(' expr . ')'             (rule 26)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            shift, and enter state 178


State 162

	expr -> ext '[' int ']' '(' expr . ')'              (rule 25)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            shift, and enter state 177


State 163

	expr -> shrink '[' int ']' '(' expr . ')'           (rule 27)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            shift, and enter state 176


State 164

	expr -> trans '[' int ',' int ']' . '(' expr ')'    (rule 24)

	'('            shift, and enter state 175


State 165

	pat -> id '(' . pats ')'                            (rule 52)

	int            shift, and enter state 139
	id             shift, and enter state 140
	')'            reduce using rule 53
	'_'            shift, and enter state 141

	pat            goto state 173
	pats           goto state 174

State 166

	case -> pat '->' . expr                             (rule 48)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 172
	lval           goto state 12

State 167

	cases -> case cases .                               (rule 47)

	'}'            reduce using rule 47


State 168

	expr -> match expr with '{' cases '}' .             (rule 23)

	funcs          reduce using rule 23
	int            reduce using rule 23
	id             reduce using rule 23
	idc            reduce using rule 23
	var            reduce using rule 23
	void           reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	for            reduce using rule 23
	to             reduce using rule 23
	do             reduce using rule 23
	match          reduce using rule 23
	with           reduce using rule 23
	and            reduce using rule 23
	or             reduce using rule 23
	trans          reduce using rule 23
	shrink         reduce using rule 23
	ext            reduce using rule 23
	sext           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'&'            reduce using rule 23
	'|'            reduce using rule 23
	'^'            reduce using rule 23
	'='            reduce using rule 23
	'/='           reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	'_'            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'<$'           reduce using rule 23
	'<=$'          reduce using rule 23
	'>$'           reduce using rule 23
	'>=$'          reduce using rule 23


State 169

	expr -> for id '=' expr to expr . do expr           (rule 19)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	do             shift, and enter state 171
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60


State 170

	expr -> if pred then expr else expr .               (rule 18)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 18
	int            reduce using rule 18
	id             reduce using rule 18
	idc            reduce using rule 18
	var            reduce using rule 18
	void           reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	for            reduce using rule 18
	to             reduce using rule 18
	do             reduce using rule 18
	match          reduce using rule 18
	with           reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	trans          reduce using rule 18
	shrink         reduce using rule 18
	ext            reduce using rule 18
	sext           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'^'            reduce using rule 18
	'='            reduce using rule 18
	'/='           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	'_'            reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'<='           reduce using rule 18
	'>='           reduce using rule 18
	'<$'           reduce using rule 18
	'<=$'          reduce using rule 18
	'>$'           reduce using rule 18
	'>=$'          reduce using rule 18


State 171

	expr -> for id '=' expr to expr do . expr           (rule 19)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 189
	lval           goto state 12

State 172

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	case -> pat '->' expr .                             (rule 48)

	int            reduce using rule 48
	id             reduce using rule 48
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'}'            reduce using rule 48
	'_'            reduce using rule 48


State 173

	pats -> pat . ',' pats                              (rule 54)

	','            shift, and enter state 188


State 174

	pat -> id '(' pats . ')'                            (rule 52)

	')'            shift, and enter state 187


State 175

	expr -> trans '[' int ',' int ']' '(' . expr ')'    (rule 24)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 186
	lval           goto state 12

State 176

	expr -> shrink '[' int ']' '(' expr ')' .           (rule 27)

	funcs          reduce using rule 27
	int            reduce using rule 27
	id             reduce using rule 27
	idc            reduce using rule 27
	var            reduce using rule 27
	void           reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	for            reduce using rule 27
	to             reduce using rule 27
	do             reduce using rule 27
	match          reduce using rule 27
	with           reduce using rule 27
	and            reduce using rule 27
	or             reduce using rule 27
	trans          reduce using rule 27
	shrink         reduce using rule 27
	ext            reduce using rule 27
	sext           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'&'            reduce using rule 27
	'|'            reduce using rule 27
	'^'            reduce using rule 27
	'='            reduce using rule 27
	'/='           reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	'_'            reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	'<$'           reduce using rule 27
	'<=$'          reduce using rule 27
	'>$'           reduce using rule 27
	'>=$'          reduce using rule 27


State 177

	expr -> ext '[' int ']' '(' expr ')' .              (rule 25)

	funcs          reduce using rule 25
	int            reduce using rule 25
	id             reduce using rule 25
	idc            reduce using rule 25
	var            reduce using rule 25
	void           reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	for            reduce using rule 25
	to             reduce using rule 25
	do             reduce using rule 25
	match          reduce using rule 25
	with           reduce using rule 25
	and            reduce using rule 25
	or             reduce using rule 25
	trans          reduce using rule 25
	shrink         reduce using rule 25
	ext            reduce using rule 25
	sext           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'&'            reduce using rule 25
	'|'            reduce using rule 25
	'^'            reduce using rule 25
	'='            reduce using rule 25
	'/='           reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	'_'            reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'<$'           reduce using rule 25
	'<=$'          reduce using rule 25
	'>$'           reduce using rule 25
	'>=$'          reduce using rule 25


State 178

	expr -> sext '[' int ']' '(' expr ')' .             (rule 26)

	funcs          reduce using rule 26
	int            reduce using rule 26
	id             reduce using rule 26
	idc            reduce using rule 26
	var            reduce using rule 26
	void           reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	for            reduce using rule 26
	to             reduce using rule 26
	do             reduce using rule 26
	match          reduce using rule 26
	with           reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	trans          reduce using rule 26
	shrink         reduce using rule 26
	ext            reduce using rule 26
	sext           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'&'            reduce using rule 26
	'|'            reduce using rule 26
	'^'            reduce using rule 26
	'='            reduce using rule 26
	'/='           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	'_'            reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'<$'           reduce using rule 26
	'<=$'          reduce using rule 26
	'>$'           reduce using rule 26
	'>=$'          reduce using rule 26


State 179

	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)
	var_decl -> var id ':' type_reg '=' expr .          (rule 42)

	int            reduce using rule 42
	id             reduce using rule 42
	idc            reduce using rule 42
	var            reduce using rule 42
	void           reduce using rule 42
	if             reduce using rule 42
	for            reduce using rule 42
	match          reduce using rule 42
	trans          reduce using rule 42
	shrink         reduce using rule 42
	ext            reduce using rule 42
	sext           reduce using rule 42
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'('            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42


State 180

	func -> id '(' params ')' ':' . type_reg expr       (rule 10)

	bits           shift, and enter state 103
	range          shift, and enter state 104
	data           shift, and enter state 105
	void           shift, and enter state 106

	type_reg       goto state 185

State 181

	func -> idc params ')' ':' type_reg . expr          (rule 11)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 184
	lval           goto state 12

State 182

	type_reg -> range '[' int ',' int . ']'             (rule 73)

	']'            shift, and enter state 183


State 183

	type_reg -> range '[' int ',' int ']' .             (rule 73)

	int            reduce using rule 73
	id             reduce using rule 73
	idc            reduce using rule 73
	void           reduce using rule 73
	if             reduce using rule 73
	for            reduce using rule 73
	match          reduce using rule 73
	trans          reduce using rule 73
	shrink         reduce using rule 73
	ext            reduce using rule 73
	sext           reduce using rule 73
	'='            reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	'{'            reduce using rule 73
	','            reduce using rule 73


State 184

	func -> idc params ')' ':' type_reg expr .          (rule 11)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	id             reduce using rule 11
	idc            reduce using rule 11
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'}'            reduce using rule 11


State 185

	func -> id '(' params ')' ':' type_reg . expr       (rule 10)

	int            shift, and enter state 13
	id             shift, and enter state 14
	idc            shift, and enter state 15
	void           shift, and enter state 16
	if             shift, and enter state 17
	for            shift, and enter state 18
	match          shift, and enter state 19
	trans          shift, and enter state 20
	shrink         shift, and enter state 21
	ext            shift, and enter state 22
	sext           shift, and enter state 23
	'('            shift, and enter state 24
	'{'            shift, and enter state 25

	expr           goto state 192
	lval           goto state 12

State 186

	expr -> trans '[' int ',' int ']' '(' expr . ')'    (rule 24)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	')'            shift, and enter state 191


State 187

	pat -> id '(' pats ')' .                            (rule 52)

	','            reduce using rule 52
	'->'           reduce using rule 52


State 188

	pats -> pat ',' . pats                              (rule 54)

	int            shift, and enter state 139
	id             shift, and enter state 140
	')'            reduce using rule 53
	'_'            shift, and enter state 141

	pat            goto state 173
	pats           goto state 190

State 189

	expr -> for id '=' expr to expr do expr .           (rule 19)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	funcs          reduce using rule 19
	int            reduce using rule 19
	id             reduce using rule 19
	idc            reduce using rule 19
	var            reduce using rule 19
	void           reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	for            reduce using rule 19
	to             reduce using rule 19
	do             reduce using rule 19
	match          reduce using rule 19
	with           reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	trans          reduce using rule 19
	shrink         reduce using rule 19
	ext            reduce using rule 19
	sext           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	'^'            reduce using rule 19
	'='            reduce using rule 19
	'/='           reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	'_'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'<$'           reduce using rule 19
	'<=$'          reduce using rule 19
	'>$'           reduce using rule 19
	'>=$'          reduce using rule 19


State 190

	pats -> pat ',' pats .                              (rule 54)

	')'            reduce using rule 54


State 191

	expr -> trans '[' int ',' int ']' '(' expr ')' .    (rule 24)

	funcs          reduce using rule 24
	int            reduce using rule 24
	id             reduce using rule 24
	idc            reduce using rule 24
	var            reduce using rule 24
	void           reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	for            reduce using rule 24
	to             reduce using rule 24
	do             reduce using rule 24
	match          reduce using rule 24
	with           reduce using rule 24
	and            reduce using rule 24
	or             reduce using rule 24
	trans          reduce using rule 24
	shrink         reduce using rule 24
	ext            reduce using rule 24
	sext           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'&'            reduce using rule 24
	'|'            reduce using rule 24
	'^'            reduce using rule 24
	'='            reduce using rule 24
	'/='           reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	'_'            reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'<='           reduce using rule 24
	'>='           reduce using rule 24
	'<$'           reduce using rule 24
	'<=$'          reduce using rule 24
	'>$'           reduce using rule 24
	'>=$'          reduce using rule 24


State 192

	func -> id '(' params ')' ':' type_reg expr .       (rule 10)
	expr -> expr . '+' expr                             (rule 28)
	expr -> expr . '-' expr                             (rule 29)
	expr -> expr . '&' expr                             (rule 30)
	expr -> expr . '^' expr                             (rule 31)
	expr -> expr . '|' expr                             (rule 32)

	id             reduce using rule 10
	idc            reduce using rule 10
	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'&'            shift, and enter state 58
	'|'            shift, and enter state 59
	'^'            shift, and enter state 60
	'}'            reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 76
Number of terminals: 56
Number of non-terminals: 25
Number of states: 193
